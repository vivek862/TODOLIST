!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=38)}([function(e,t,n){"use strict";e.exports=n(24)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(28)()},function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"f",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"g",(function(){return u})),n.d(t,"h",(function(){return l})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return s})),n.d(t,"e",(function(){return f})),n.d(t,"i",(function(){return d}));var r="@@router/LOCATION_CHANGE",o=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return{type:r,payload:{location:e,action:t,isFirstRendering:n}}},i="@@router/CALL_HISTORY_METHOD",a=function(e){return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return{type:i,payload:{method:e,args:n}}}},u=a("push"),l=a("replace"),c=a("go"),s=a("goBack"),f=a("goForward"),d={push:u,replace:l,go:c,goBack:s,goForward:f}},function(e,t,n){"use strict";t.a=function(e,t){if(!e)throw new Error("Invariant failed")}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return i})),n.d(t,"applyMiddleware",(function(){return v})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return c})),n.d(t,"compose",(function(){return m})),n.d(t,"createStore",(function(){return u}));var r=n(14),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,c=t,s=[],f=s,d=!1;function p(){f===s&&(f=s.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),s=null}}}function v(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,c=l(c,e)}finally{d=!1}for(var t=s=f,n=0;n<t.length;n++){(0,t[n])()}return e}function y(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:i.REPLACE})}function g(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return v({type:i.INIT}),(o={dispatch:v,subscribe:m,getState:h,replaceReducer:y})[r.a]=g,o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<u.length;i++){var c=u[i],s=n[c],f=e[c],d=s(f,t);if(void 0===d){var p=l(c,t);throw new Error(p)}o[c]=d,r=r||d!==f}return(r=r||u.length!==Object.keys(e).length)?o:e}}function s(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=s(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return w})),n.d(t,"c",(function(){return k})),n.d(t,"b",(function(){return h})),n.d(t,"e",(function(){return m})),n.d(t,"d",(function(){return p}));var r=n(1);function o(e){return"/"===e.charAt(0)}function i(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var a=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],u=e&&o(e),l=t&&o(t),c=u||l;if(e&&o(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var s=a[a.length-1];n="."===s||".."===s||""===s}else n=!1;for(var f=0,d=a.length;d>=0;d--){var p=a[d];"."===p?i(a,d):".."===p?(i(a,d),f++):f&&(i(a,d),f--)}if(!c)for(;f--;f)a.unshift("..");!c||""===a[0]||a[0]&&o(a[0])||a.unshift("");var h=a.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};function u(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var l=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=u(t),o=u(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},c=n(4);function s(e){return"/"===e.charAt(0)?e:"/"+e}function f(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function d(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function p(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function h(e,t,n,o){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=Object(r.a)({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),o?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=a(i.pathname,o.pathname)):i.pathname=o.pathname:i.pathname||(i.pathname="/"),i}function m(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&l(e.state,t.state)}function v(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var y=!("undefined"==typeof window||!window.document||!window.document.createElement);function g(e,t){t(window.confirm(e))}function b(){try{return window.history.state||{}}catch(e){return{}}}function w(e){void 0===e&&(e={}),y||Object(c.a)(!1);var t,n=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,u=a.forceRefresh,l=void 0!==u&&u,m=a.getUserConfirmation,w=void 0===m?g:m,x=a.keyLength,k=void 0===x?6:x,E=e.basename?d(s(e.basename)):"";function T(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return E&&(i=f(i,E)),h(i,r,n)}function S(){return Math.random().toString(36).substr(2,k)}var O=v();function P(e){Object(r.a)(F,e),F.length=n.length,O.notifyListeners(F.location,F.action)}function C(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||N(T(e.state))}function _(){N(T(b()))}var j=!1;function N(e){if(j)j=!1,P();else{O.confirmTransitionTo(e,"POP",w,(function(t){t?P({action:"POP",location:e}):function(e){var t=F.location,n=M.indexOf(t.key);-1===n&&(n=0);var r=M.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(j=!0,z(o))}(e)}))}}var R=T(b()),M=[R.key];function I(e){return E+p(e)}function z(e){n.go(e)}var A=0;function D(e){1===(A+=e)&&1===e?(window.addEventListener("popstate",C),i&&window.addEventListener("hashchange",_)):0===A&&(window.removeEventListener("popstate",C),i&&window.removeEventListener("hashchange",_))}var L=!1;var F={length:n.length,action:"POP",location:R,createHref:I,push:function(e,t){var r=h(e,t,S(),F.location);O.confirmTransitionTo(r,"PUSH",w,(function(e){if(e){var t=I(r),i=r.key,a=r.state;if(o)if(n.pushState({key:i,state:a},null,t),l)window.location.href=t;else{var u=M.indexOf(F.location.key),c=M.slice(0,u+1);c.push(r.key),M=c,P({action:"PUSH",location:r})}else window.location.href=t}}))},replace:function(e,t){var r=h(e,t,S(),F.location);O.confirmTransitionTo(r,"REPLACE",w,(function(e){if(e){var t=I(r),i=r.key,a=r.state;if(o)if(n.replaceState({key:i,state:a},null,t),l)window.location.replace(t);else{var u=M.indexOf(F.location.key);-1!==u&&(M[u]=r.key),P({action:"REPLACE",location:r})}else window.location.replace(t)}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=O.setPrompt(e);return L||(D(1),L=!0),function(){return L&&(L=!1,D(-1)),t()}},listen:function(e){var t=O.appendListener(e);return D(1),function(){D(-1),t()}}};return F}function x(e,t,n){return Math.min(Math.max(e,t),n)}function k(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,o=t.initialEntries,i=void 0===o?["/"]:o,a=t.initialIndex,u=void 0===a?0:a,l=t.keyLength,c=void 0===l?6:l,s=v();function f(e){Object(r.a)(w,e),w.length=w.entries.length,s.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,c)}var m=x(u,0,i.length-1),y=i.map((function(e){return h(e,void 0,"string"==typeof e?d():e.key||d())})),g=p;function b(e){var t=x(w.index+e,0,w.entries.length-1),r=w.entries[t];s.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:y.length,action:"POP",location:y[m],index:m,entries:y,createHref:g,push:function(e,t){var r=h(e,t,d(),w.location);s.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=h(e,t,d(),w.location);s.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:b,goBack:function(){b(-1)},goForward:function(){b(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return w}},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return s})),n.d(t,"connectAdvanced",(function(){return T})),n.d(t,"ReactReduxContext",(function(){return i})),n.d(t,"connect",(function(){return $})),n.d(t,"batch",(function(){return G.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return Q})),n.d(t,"createDispatchHook",(function(){return V})),n.d(t,"useSelector",(function(){return X})),n.d(t,"createSelectorHook",(function(){return K})),n.d(t,"useStore",(function(){return B})),n.d(t,"createStoreHook",(function(){return H})),n.d(t,"shallowEqual",(function(){return O}));var r=n(0),o=n.n(r),i=(n(2),o.a.createContext(null));var a=function(e){e()},u={notify:function(){}};function l(){var e=a,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var c=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=u,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=l())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=u)},e}();var s=function(e){var t=e.store,n=e.context,a=e.children,u=Object(r.useMemo)((function(){var e=new c(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=u.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[u,l]);var s=n||i;return o.a.createElement(s.Provider,{value:u},a)},f=n(1),d=n(5),p=n(10),h=n.n(p),m=n(13),v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,y=[],g=[null,null];function b(e,t){var n=e[1];return[t.payload,n+1]}function w(e,t,n){v((function(){return e.apply(void 0,t)}),n)}function x(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function k(e,t,n,r,o,i,a,u,l,c){if(e){var s=!1,f=null,d=function(){if(!s){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||l():(i.current=e,u.current=e,a.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var E=function(){return[null,0]};function T(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,l=n.methodName,s=void 0===l?"connectAdvanced":l,p=n.renderCountProp,v=void 0===p?void 0:p,T=n.shouldHandleStateChanges,S=void 0===T||T,O=n.storeKey,P=void 0===O?"store":O,C=(n.withRef,n.forwardRef),_=void 0!==C&&C,j=n.context,N=void 0===j?i:j,R=Object(d.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),M=N;return function(t){var n=t.displayName||t.name||"Component",i=u(n),a=Object(f.a)({},R,{getDisplayName:u,methodName:s,renderCountProp:v,shouldHandleStateChanges:S,storeKey:P,displayName:i,wrappedComponentName:n,WrappedComponent:t}),l=R.pure;var p=l?r.useMemo:function(e){return e()};function T(n){var i=Object(r.useMemo)((function(){var e=n.forwardedRef,t=Object(d.a)(n,["forwardedRef"]);return[n.context,e,t]}),[n]),u=i[0],l=i[1],s=i[2],h=Object(r.useMemo)((function(){return u&&u.Consumer&&Object(m.isContextConsumer)(o.a.createElement(u.Consumer,null))?u:M}),[u,M]),v=Object(r.useContext)(h),T=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(v)&&Boolean(v.store);var O=T?n.store:v.store,P=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(O)}),[O]),C=Object(r.useMemo)((function(){if(!S)return g;var e=new c(O,T?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[O,T,v]),_=C[0],j=C[1],N=Object(r.useMemo)((function(){return T?v:Object(f.a)({},v,{subscription:_})}),[T,v,_]),R=Object(r.useReducer)(b,y,E),I=R[0][0],z=R[1];if(I&&I.error)throw I.error;var A=Object(r.useRef)(),D=Object(r.useRef)(s),L=Object(r.useRef)(),F=Object(r.useRef)(!1),U=p((function(){return L.current&&s===D.current?L.current:P(O.getState(),s)}),[O,I,s]);w(x,[D,A,F,s,U,L,j]),w(k,[S,O,_,P,D,A,F,L,j,z],[O,_,P]);var $=Object(r.useMemo)((function(){return o.a.createElement(t,Object(f.a)({},U,{ref:l}))}),[l,t,U]);return Object(r.useMemo)((function(){return S?o.a.createElement(h.Provider,{value:N},$):$}),[h,$,N])}var O=l?o.a.memo(T):T;if(O.WrappedComponent=t,O.displayName=i,_){var C=o.a.forwardRef((function(e,t){return o.a.createElement(O,Object(f.a)({},e,{forwardedRef:t}))}));return C.displayName=i,C.WrappedComponent=t,h()(C,t)}return h()(O,t)}}function S(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function O(e,t){if(S(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!S(e[n[o]],t[n[o]]))return!1;return!0}var P=n(7);function C(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function _(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function j(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=_(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=_(o),o=r(t,n)),o},r}}var N=[function(e){return"function"==typeof e?j(e):void 0},function(e){return e?void 0:C((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?C((function(t){return Object(P.bindActionCreators)(e,t)})):void 0}];var R=[function(e){return"function"==typeof e?j(e):void 0},function(e){return e?void 0:C((function(){return{}}))}];function M(e,t,n){return Object(f.a)({},n,{},e,{},t)}var I=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return M}}];function z(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function A(e,t,n,r,o){var i,a,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,v=!f(p,a),y=!s(o,i);return i=o,a=p,v&&y?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):y?(h=e(i,a),m=!d(h,u),u=h,m&&(c=n(u,l,a)),c):c}return function(o,s){return p?h(o,s):(u=e(i=o,a=s),l=t(r,a),c=n(u,l,a),p=!0,c)}}function D(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Object(d.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?A:z)(a,u,l,e,i)}function L(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function F(e,t){return e===t}function U(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?T:n,o=t.mapStateToPropsFactories,i=void 0===o?R:o,a=t.mapDispatchToPropsFactories,u=void 0===a?N:a,l=t.mergePropsFactories,c=void 0===l?I:l,s=t.selectorFactory,p=void 0===s?D:s;return function(e,t,n,o){void 0===o&&(o={});var a=o,l=a.pure,s=void 0===l||l,h=a.areStatesEqual,m=void 0===h?F:h,v=a.areOwnPropsEqual,y=void 0===v?O:v,g=a.areStatePropsEqual,b=void 0===g?O:g,w=a.areMergedPropsEqual,x=void 0===w?O:w,k=Object(d.a)(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),E=L(e,i,"mapStateToProps"),T=L(t,u,"mapDispatchToProps"),S=L(n,c,"mergeProps");return r(p,Object(f.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:T,initMergeProps:S,pure:s,areStatesEqual:m,areOwnPropsEqual:y,areStatePropsEqual:b,areMergedPropsEqual:x},k))}}var $=U();function W(){return Object(r.useContext)(i)}function H(e){void 0===e&&(e=i);var t=e===i?W:function(){return Object(r.useContext)(e)};return function(){return t().store}}var B=H();function V(e){void 0===e&&(e=i);var t=e===i?B:H(e);return function(){return t().dispatch}}var Q=V(),q=function(e,t){return e===t};function K(e){void 0===e&&(e=i);var t=e===i?W:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=q);var o=t();return function(e,t,n,o){var i,a=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new c(n,o)}),[n,o]),l=Object(r.useRef)(),s=Object(r.useRef)(),f=Object(r.useRef)();try{i=e!==s.current||l.current?e(n.getState()):f.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return v((function(){s.current=e,f.current=i,l.current=void 0})),v((function(){function e(){try{var e=s.current(n.getState());if(t(e,f.current))return;f.current=e}catch(e){l.current=e}a({})}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),i}(e,n,o.store,o.subscription)}}var Y,X=K(),G=n(11);Y=G.unstable_batchedUpdates,a=Y},function(e,t,n){"use strict";var r=n(13),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}}return t}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(25)},function(e,t,n){"use strict";n.r(t),n.d(t,"MemoryRouter",(function(){return g})),n.d(t,"Prompt",(function(){return w})),n.d(t,"Redirect",(function(){return T})),n.d(t,"Route",(function(){return C})),n.d(t,"Router",(function(){return y})),n.d(t,"StaticRouter",(function(){return I})),n.d(t,"Switch",(function(){return z})),n.d(t,"__HistoryContext",(function(){return m})),n.d(t,"__RouterContext",(function(){return v})),n.d(t,"generatePath",(function(){return E})),n.d(t,"matchPath",(function(){return P})),n.d(t,"useHistory",(function(){return L})),n.d(t,"useLocation",(function(){return F})),n.d(t,"useParams",(function(){return U})),n.d(t,"useRouteMatch",(function(){return $})),n.d(t,"withRouter",(function(){return A}));var r=n(6),o=n(0),i=n.n(o),a=(n(2),n(8)),u=n(15),l=n(4),c=n(1),s=n(16),f=n.n(s),d=(n(13),n(5)),p=n(10),h=n.n(p),m=function(e){var t=Object(u.a)();return t.displayName=e,t}("Router-History"),v=function(e){var t=Object(u.a)();return t.displayName=e,t}("Router"),y=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(r.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return i.a.createElement(v.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.a.createElement(m.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.a.Component);var g=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=Object(a.c)(t.props),t}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(y,{history:this.history,children:this.props.children})},t}(i.a.Component);var b=function(e){function t(){return e.apply(this,arguments)||this}Object(r.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(i.a.Component);function w(e){var t=e.message,n=e.when,r=void 0===n||n;return i.a.createElement(v.Consumer,null,(function(e){if(e||Object(l.a)(!1),!r||e.staticContext)return null;var n=e.history.block;return i.a.createElement(b,{onMount:function(e){e.release=n(t)},onUpdate:function(e,r){r.message!==t&&(e.release(),e.release=n(t))},onUnmount:function(e){e.release()},message:t})}))}var x={},k=0;function E(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(x[e])return x[e];var t=f.a.compile(e);return k<1e4&&(x[e]=t,k++),t}(e)(t,{pretty:!0})}function T(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return i.a.createElement(v.Consumer,null,(function(e){e||Object(l.a)(!1);var r=e.history,u=e.staticContext,s=o?r.push:r.replace,f=Object(a.b)(t?"string"==typeof n?E(n,t.params):Object(c.a)({},n,{pathname:E(n.pathname,t.params)}):n);return u?(s(f),null):i.a.createElement(b,{onMount:function(){s(f)},onUpdate:function(e,t){var n=Object(a.b)(t.to);Object(a.e)(n,Object(c.a)({},f,{key:n.key}))||s(f)},to:n})}))}var S={},O=0;function P(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=S[n]||(S[n]={});if(r[e])return r[e];var o=[],i={regexp:f()(e,o,t),keys:o};return O<1e4&&(r[e]=i,O++),i}(n,{end:i,strict:u,sensitive:c}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var s=l[0],d=l.slice(1),p=e===s;return i&&!p?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=d[n],e}),{})}}),null)}var C=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(v.Consumer,null,(function(t){t||Object(l.a)(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?P(n.pathname,e.props):t.match,o=Object(c.a)({},t,{location:n,match:r}),a=e.props,u=a.children,s=a.component,f=a.render;return Array.isArray(u)&&0===u.length&&(u=null),i.a.createElement(v.Provider,{value:o},o.match?u?"function"==typeof u?u(o):u:s?i.a.createElement(s,o):f?f(o):null:"function"==typeof u?u(o):null)}))},t}(i.a.Component);function _(e){return"/"===e.charAt(0)?e:"/"+e}function j(e,t){if(!e)return t;var n=_(e);return 0!==t.pathname.indexOf(n)?t:Object(c.a)({},t,{pathname:t.pathname.substr(n.length)})}function N(e){return"string"==typeof e?e:Object(a.d)(e)}function R(e){return function(){Object(l.a)(!1)}}function M(){}var I=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handlePush=function(e){return t.navigateTo(e,"PUSH")},t.handleReplace=function(e){return t.navigateTo(e,"REPLACE")},t.handleListen=function(){return M},t.handleBlock=function(){return M},t}Object(r.a)(t,e);var n=t.prototype;return n.navigateTo=function(e,t){var n=this.props,r=n.basename,o=void 0===r?"":r,i=n.context,u=void 0===i?{}:i;u.action=t,u.location=function(e,t){return e?Object(c.a)({},t,{pathname:_(e)+t.pathname}):t}(o,Object(a.b)(e)),u.url=N(u.location)},n.render=function(){var e=this.props,t=e.basename,n=void 0===t?"":t,r=e.context,o=void 0===r?{}:r,u=e.location,l=void 0===u?"/":u,s=Object(d.a)(e,["basename","context","location"]),f={createHref:function(e){return _(n+N(e))},action:"POP",location:j(n,Object(a.b)(l)),push:this.handlePush,replace:this.handleReplace,go:R(),goBack:R(),goForward:R(),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(y,Object(c.a)({},s,{history:f,staticContext:o}))},t}(i.a.Component);var z=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(v.Consumer,null,(function(t){t||Object(l.a)(!1);var n,r,o=e.props.location||t.location;return i.a.Children.forEach(e.props.children,(function(e){if(null==r&&i.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?P(o.pathname,Object(c.a)({},e.props,{path:a})):t.match}})),r?i.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(i.a.Component);function A(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(d.a)(t,["wrappedComponentRef"]);return i.a.createElement(v.Consumer,null,(function(t){return t||Object(l.a)(!1),i.a.createElement(e,Object(c.a)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,h()(n,e)}var D=i.a.useContext;function L(){return D(m)}function F(){return D(v).location}function U(){var e=D(v).match;return e?e.params:{}}function $(e){var t=F(),n=D(v).match;return e?P(t.pathname,e):n}},function(e,t,n){"use strict";e.exports=n(30)},function(e,t,n){"use strict";(function(e,r){var o,i=n(22);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(19),n(31)(e))},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),i=n(6),a=n(2),u=n.n(a),l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,a,s="__create-react-context-"+((l[a="__global_unique_id__"]=(l[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(i.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=u.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(i.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[s]=u.a.object,o),{Provider:f,Consumer:d}};t.a=s}).call(this,n(19))},function(e,t,n){var r=n(32);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=m&&null!=h&&h!==m,k="+"===b||"*"===b,E="?"===b||"*"===b,T=n[2]||s,S=y||g;r.push({name:v||i++,prefix:m||"",delimiter:T,optional:E,repeat:k,partial:x,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+l(T)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",u=t||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var d=l(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(3);function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}t.a=function(e){return function(t){return function(t){return function(n){if(n.type!==r.a)return t(n);var i=n.payload,a=i.method,u=i.args;e[a].apply(e,o(u))}}}}},function(e,t,n){"use strict";n.r(t),n.d(t,"LOCATION_CHANGE",(function(){return c.b})),n.d(t,"CALL_HISTORY_METHOD",(function(){return c.a})),n.d(t,"onLocationChanged",(function(){return c.f})),n.d(t,"push",(function(){return c.g})),n.d(t,"replace",(function(){return c.h})),n.d(t,"go",(function(){return c.c})),n.d(t,"goBack",(function(){return c.d})),n.d(t,"goForward",(function(){return c.e})),n.d(t,"routerActions",(function(){return c.i})),n.d(t,"routerMiddleware",(function(){return C.a})),n.d(t,"ConnectedRouter",(function(){return _})),n.d(t,"connectRouter",(function(){return j})),n.d(t,"getLocation",(function(){return R})),n.d(t,"getAction",(function(){return M})),n.d(t,"getHash",(function(){return I})),n.d(t,"getSearch",(function(){return z})),n.d(t,"createMatchSelector",(function(){return A}));var r=n(0),o=n.n(r),i=n(2),a=n.n(i),u=n(9),l=n(12),c=n(3);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f=function(e){var t=e.getIn,n=e.toJS,r=function(e){var r,o=n(t(e,["router"]));if(null==(r=o)||"object"!==s(r)||!t(r,["location"])||!t(r,["action"]))throw'Could not find router reducer in state tree, it must be mounted under "router"';return o},o=function(e){return n(t(r(e),["location"]))};return{getLocation:o,getAction:function(e){return n(t(r(e),["action"]))},getRouter:r,getSearch:function(e){return n(t(r(e),["location","search"]))},getHash:function(e){return n(t(r(e),["location","hash"]))},createMatchSelector:function(e){var t=null,n=null;return function(r){var i=(o(r)||{}).pathname;if(i===t)return n;t=i;var a=Object(l.matchPath)(i,e);return a&&n&&a.url===n.url&&a.isExact===n.isExact||(n=a),n}}}};function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var g=function(e){var t=f(e).getLocation,n=function(e){function n(e){var r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),r=m(this,v(n).call(this,e));var o=e.store,i=e.history,a=e.onLocationChanged;r.inTimeTravelling=!1,r.unsubscribe=o.subscribe((function(){var n=t(o.getState()),a=n.pathname,u=n.search,l=n.hash,c=n.state,s=i.location,f=s.pathname,d=s.search,p=s.hash,h=s.state;"PUSH"!==e.history.action||f===a&&d===u&&p===l&&c===h||(r.inTimeTravelling=!0,i.push({pathname:a,search:u,hash:l,state:c}))}));var u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];r.inTimeTravelling?r.inTimeTravelling=!1:a(e,t,n)};return r.unlisten=i.listen(u),e.noInitialPop||u(i.location,i.action,!0),r}var r,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(n,e),r=n,(i=[{key:"componentWillUnmount",value:function(){this.unlisten(),this.unsubscribe()}},{key:"render",value:function(){var e=this.props,t=e.history,n=e.children;return o.a.createElement(l.Router,{history:t},n)}}])&&h(r.prototype,i),a&&h(r,a),n}(r.PureComponent);n.propTypes={store:a.a.shape({getState:a.a.func.isRequired,subscribe:a.a.func.isRequired}).isRequired,history:a.a.shape({action:a.a.string.isRequired,listen:a.a.func.isRequired,location:a.a.object.isRequired,push:a.a.func.isRequired}).isRequired,basename:a.a.string,children:a.a.oneOfType([a.a.func,a.a.node]),onLocationChanged:a.a.func.isRequired,noInitialPop:a.a.bool};var i=function(e){var t=e.context||u.ReactReduxContext;if(null==t)throw"Please upgrade to react-redux v6";return o.a.createElement(t.Consumer,null,(function(t){var r=t.store;return o.a.createElement(n,p({store:r},e))}))};return i.propTypes={context:a.a.object},Object(u.connect)(null,(function(e){return{onLocationChanged:function(t,n,r){return e(Object(c.f)(t,n,r))}}}))(i)};function b(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){k(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var E=function(e){if(e&&e.query)return e;var t=e&&e.search;if("string"!=typeof t||0===t.length)return x({},e,{query:{}});var n=t.substring(1).split("&").reduce((function(e,t){var n=b(t.split("="),2);return x({},e,k({},n[0],n[1]))}),{});return x({},e,{query:n})},T=function(e){var t=e.fromJS,n=e.merge;return function(e){var r=t({location:E(e.location),action:e.action});return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.type,a=o.payload;if(i===c.b){var u=a.location,l=a.action,s=a.isFirstRendering;return s?e:n(e,{location:t(E(u)),action:l})}return e}}};function S(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var P={fromJS:function(e){return e},getIn:function(e,t){if(!e)return e;var n=t.length;if(n){for(var r=e,o=0;o<n&&r;++o)r=r[t[o]];return r}},merge:function(e,t){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?S(Object(n),!0).forEach((function(t){O(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):S(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{},t)},toJS:function(e){return e}},C=n(20),_=g(P),j=T(P),N=f(P),R=N.getLocation,M=N.getAction,I=N.getHash,z=N.getSearch,A=N.createMatchSelector},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t);var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(18),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function x(){}function k(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var E=k.prototype=new x;E.constructor=k,r(E,w.prototype),E.isPureReactComponent=!0;var T={current:null},S=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:T.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var _=/\/+/g,j=[];function N(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function M(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+I(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+I(u=t[c],c);l+=e(u,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+I(u,c++),r,o);else if("object"===u)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function z(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,(function(e){return e})):null!=e&&(C(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(_,"$&/")+"/")+n)),r.push(e))}function D(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(_,"$&/")+"/"),M(e,A,t=N(t,i,r,o)),R(t)}var L={current:null};function F(){var e=L.current;if(null===e)throw Error(y(321));return e}var U={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,z,t=N(null,null,t,n)),R(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return D(e,t,null,(function(e){return e})),t},only:function(e){if(!C(e))throw Error(y(143));return e}},t.Component=w,t.Fragment=u,t.Profiler=c,t.PureComponent=k,t.StrictMode=l,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=T.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)S.call(t,s)&&!O.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:u,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=P,t.createFactory=function(e){var t=P.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(18),i=n(26);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var l=!1,c=null,s=!1,f=null,d={onError:function(e){l=!0,c=e}};function p(e,t,n,r,o,i,a,s,f){l=!1,c=null,u.apply(d,arguments)}var h=null,m=null,v=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,i,u,d,h){if(p.apply(this,arguments),l){if(!l)throw Error(a(198));var m=c;l=!1,c=null,s||(s=!0,f=m)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function w(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!k[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in k[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;if(E.hasOwnProperty(l))throw Error(a(99,l));E[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&x(c[o],u,l);o=!0}else i.registrationName?(x(i.registrationName,u,l),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function x(e,t,n){if(T[e])throw Error(a(100,e));T[e]=t,S[e]=t.eventTypes[n].dependencies}var k=[],E={},T={},S={};function O(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&w()}var P=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),C=null,_=null,j=null;function N(e){if(e=m(e)){if("function"!=typeof C)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),C(e.stateNode,e.type,t))}}function R(e){_?j?j.push(e):j=[e]:_=e}function M(){if(_){var e=_,t=j;if(j=_=null,N(e),t)for(e=0;e<t.length;e++)N(t[e])}}function I(e,t){return e(t)}function z(e,t,n,r,o){return e(t,n,r,o)}function A(){}var D=I,L=!1,F=!1;function U(){null===_&&null===j||(A(),M())}function $(e,t,n){if(F)return e(t,n);F=!0;try{return D(e,t,n)}finally{F=!1,U()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,H=Object.prototype.hasOwnProperty,B={},V={};function Q(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){q[e]=new Q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];q[t]=new Q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){q[e]=new Q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){q[e]=new Q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){q[e]=new Q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){q[e]=new Q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){q[e]=new Q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){q[e]=new Q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){q[e]=new Q(e,5,!1,e.toLowerCase(),null,!1)}));var K=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(K,Y);q[t]=new Q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(K,Y);q[t]=new Q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(K,Y);q[t]=new Q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){q[e]=new Q(e,1,!1,e.toLowerCase(),null,!1)})),q.xlinkHref=new Q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){q[e]=new Q(e,1,!1,e.toLowerCase(),null,!0)}));var X=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function G(e,t,n,r){var o=q.hasOwnProperty(t)?q[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!H.call(V,e)||!H.call(B,e)&&(W.test(e)?V[e]=!0:(B[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}X.hasOwnProperty("ReactCurrentDispatcher")||(X.ReactCurrentDispatcher={current:null}),X.hasOwnProperty("ReactCurrentBatchConfig")||(X.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ie=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,ue=Z?Symbol.for("react.concurrent_mode"):60111,le=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ve(e.type);n=null,r&&(n=ve(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Te(e,t){null!=(t=t.checked)&&G(e,"checked",t,!1)}function Se(e,t){Te(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Pe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Pe(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Oe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Pe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ce(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function _e(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ne(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Re(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Me(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ie="http://www.w3.org/1999/xhtml",ze="http://www.w3.org/2000/svg";function Ae(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function De(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ae(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Le,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ze||"innerHTML"in e)e.innerHTML=t;else{for((Le=Le||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Le.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ue(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function $e(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var We={animationend:$e("Animation","AnimationEnd"),animationiteration:$e("Animation","AnimationIteration"),animationstart:$e("Animation","AnimationStart"),transitionend:$e("Transition","TransitionEnd")},He={},Be={};function Ve(e){if(He[e])return He[e];if(!We[e])return e;var t,n=We[e];for(t in n)if(n.hasOwnProperty(t)&&t in Be)return He[e]=n[t];return e}P&&(Be=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);var Qe=Ve("animationend"),qe=Ve("animationiteration"),Ke=Ve("animationstart"),Ye=Ve("transitionend"),Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ge=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Ge.get(e);return void 0===t&&(t=new Map,Ge.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function ut(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!P)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Pn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=lt(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,l=0;l<k.length;l++){var c=k[l];c&&(c=c.extractEvents(r,t,i,o,a))&&(u=rt(u,c))}ut(u)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Xe.indexOf(e)&&qt(e,t)}n.set(e,null)}}var mt,vt,yt,gt=!1,bt=[],wt=null,xt=null,kt=null,Et=new Map,Tt=new Map,St=[],Ot="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Pt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ct(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function _t(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":kt=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function jt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=Ct(t,n,r,o,i),null!==t&&(null!==(t=Cn(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Nt(e){var t=Pn(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Rt(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Cn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Mt(e,t,n){Rt(e)&&n.delete(t)}function It(){for(gt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=Cn(e.blockedOn))&&mt(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&Rt(wt)&&(wt=null),null!==xt&&Rt(xt)&&(xt=null),null!==kt&&Rt(kt)&&(kt=null),Et.forEach(Mt),Tt.forEach(Mt)}function zt(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,It)))}function At(e){function t(t){return zt(t,e)}if(0<bt.length){zt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&zt(wt,e),null!==xt&&zt(xt,e),null!==kt&&zt(kt,e),Et.forEach(t),Tt.forEach(t),n=0;n<St.length;n++)(r=St[n]).blockedOn===e&&(r.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)Nt(n),null===n.blockedOn&&St.shift()}var Dt={},Lt=new Map,Ft=new Map,Ut=["abort","abort",Qe,"animationEnd",qe,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function $t(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),Lt.set(r,i),Dt[o]=i}}$t("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),$t("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),$t(Ut,2);for(var Wt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ht=0;Ht<Wt.length;Ht++)Ft.set(Wt[Ht],0);var Bt=i.unstable_UserBlockingPriority,Vt=i.unstable_runWithPriority,Qt=!0;function qt(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Yt.bind(null,t,1,e);break;case 1:r=Xt.bind(null,t,1,e);break;default:r=Gt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Yt(e,t,n,r){L||A();var o=Gt,i=L;L=!0;try{z(o,e,t,n,r)}finally{(L=i)||U()}}function Xt(e,t,n,r){Vt(Bt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){if(Qt)if(0<bt.length&&-1<Ot.indexOf(e))e=Ct(null,e,t,n,r),bt.push(e);else{var o=Jt(e,t,n,r);if(null===o)_t(e,r);else if(-1<Ot.indexOf(e))e=Ct(o,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return wt=jt(wt,e,t,n,r,o),!0;case"dragenter":return xt=jt(xt,e,t,n,r,o),!0;case"mouseover":return kt=jt(kt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Et.set(i,jt(Et.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Tt.set(i,jt(Tt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){_t(e,r),e=dt(e,r,null,t);try{$(pt,e)}finally{ft(e)}}}}function Jt(e,t,n,r){if(null!==(n=Pn(n=lt(r)))){var o=Ze(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{$(pt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var un=Ie;function ln(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,vn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function kn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),Tn="__reactInternalInstance$"+En,Sn="__reactEventHandlers$"+En,On="__reactContainere$"+En;function Pn(e){var t=e[Tn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[On]||n[Tn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kn(e);null!==e;){if(n=e[Tn])return n;e=kn(e)}return t}n=(e=n).parentNode}return null}function Cn(e){return!(e=e[Tn]||e[On])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function _n(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function jn(e){return e[Sn]||null}function Nn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Rn(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Mn(e,t,n){(t=Rn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Nn(t);for(t=n.length;0<t--;)Mn(n[t],"captured",e);for(t=0;t<n.length;t++)Mn(n[t],"bubbled",e)}}function zn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Rn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function An(e){e&&e.dispatchConfig.registrationName&&zn(e._targetInst,null,e)}function Dn(e){ot(e,In)}var Ln=null,Fn=null,Un=null;function $n(){if(Un)return Un;var e,t,n=Fn,r=n.length,o="value"in Ln?Ln.value:Ln.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Un=o.slice(e,1<t?1-t:void 0)}function Wn(){return!0}function Hn(){return!1}function Bn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Wn:Hn,this.isPropagationStopped=Hn,this}function Vn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function qn(e){e.eventPool=[],e.getPooled=Vn,e.release=Qn}o(Bn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wn)},persist:function(){this.isPersistent=Wn},isPersistent:Hn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Hn,this._dispatchInstances=this._dispatchListeners=null}}),Bn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Bn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,qn(n),n},qn(Bn);var Kn=Bn.extend({data:null}),Yn=Bn.extend({data:null}),Xn=[9,13,27,32],Gn=P&&"CompositionEvent"in window,Jn=null;P&&"documentMode"in document&&(Jn=document.documentMode);var Zn=P&&"TextEvent"in window&&!Jn,er=P&&(!Gn||Jn&&8<Jn&&11>=Jn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Xn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var ur={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Gn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=$n()):(Fn="value"in(Ln=r)?Ln.value:Ln.textContent,ar=!0)),i=Kn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),Dn(i),o=i):o=null,(e=Zn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Gn&&or(e,t)?(e=$n(),Un=Fn=Ln=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Yn.getPooled(nr.beforeInput,t,n,r)).data=e,Dn(t)):t=null,null===o?t:null===t?o:[o,t]}},lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!lr[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Bn.getPooled(sr.change,e,t,n)).type="change",R(n),Dn(e),e}var dr=null,pr=null;function hr(e){ut(e)}function mr(e){if(xe(_n(e)))return e}function vr(e,t){if("change"===e)return t}var yr=!1;function gr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&mr(pr))if(e=fr(pr,e,lt(e)),L)ut(e);else{L=!0;try{I(hr,e)}finally{L=!1,U()}}}function wr(e,t,n){"focus"===e?(gr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&gr()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function kr(e,t){if("click"===e)return mr(t)}function Er(e,t){if("input"===e||"change"===e)return mr(t)}P&&(yr=ct("input")&&(!document.documentMode||9<document.documentMode));var Tr={eventTypes:sr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var o=t?_n(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=vr;else if(cr(o))if(yr)a=Er;else{a=xr;var u=wr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=kr);if(a&&(a=a(e,t)))return fr(a,n,r);u&&u(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Pe(o,"number",o.value)}},Sr=Bn.extend({view:null,detail:null}),Or={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Or[e])&&!!t[e]}function Cr(){return Pr}var _r=0,jr=0,Nr=!1,Rr=!1,Mr=Sr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Cr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=_r;return _r=e.screenX,Nr?"mousemove"===e.type?e.screenX-t:0:(Nr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=jr;return jr=e.screenY,Rr?"mousemove"===e.type?e.screenY-t:0:(Rr=!0,0)}}),Ir=Mr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),zr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ar={eventTypes:zr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Pn(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Mr,l=zr.mouseLeave,c=zr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=Ir,l=zr.pointerLeave,c=zr.pointerEnter,s="pointer");if(e=null==a?i:_n(a),i=null==t?i:_n(t),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=i,(n=u.getPooled(c,t,n,r)).type=s+"enter",n.target=i,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=u=r;e;e=Nn(e))a++;for(e=0,t=c;t;t=Nn(t))e++;for(;0<a-e;)u=Nn(u),a--;for(;0<e-a;)c=Nn(c),e--;for(;a--;){if(u===c||u===c.alternate)break e;u=Nn(u),c=Nn(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)u.push(r),r=Nn(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=Nn(s);for(s=0;s<u.length;s++)zn(u[s],"bubbled",l);for(s=r.length;0<s--;)zn(r[s],"captured",n);return 0==(64&o)?[l]:[l,n]}};var Dr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Lr=Object.prototype.hasOwnProperty;function Fr(e,t){if(Dr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Lr.call(t,n[r])||!Dr(e[n[r]],t[n[r]]))return!1;return!0}var Ur=P&&"documentMode"in document&&11>=document.documentMode,$r={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wr=null,Hr=null,Br=null,Vr=!1;function Qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vr||null==Wr||Wr!==sn(n)?null:("selectionStart"in(n=Wr)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Br&&Fr(Br,n)?null:(Br=n,(e=Bn.getPooled($r.select,Hr,e,t)).type="select",e.target=Wr,Dn(e),e))}var qr={eventTypes:$r,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Je(o),i=S.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?_n(t):window,e){case"focus":(cr(o)||"true"===o.contentEditable)&&(Wr=o,Hr=t,Br=null);break;case"blur":Br=Hr=Wr=null;break;case"mousedown":Vr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vr=!1,Qr(n,r);case"selectionchange":if(Ur)break;case"keydown":case"keyup":return Qr(n,r)}return null}},Kr=Bn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yr=Bn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Xr=Sr.extend({relatedTarget:null});function Gr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Sr.extend({key:function(e){if(e.key){var t=Jr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Gr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Cr,charCode:function(e){return"keypress"===e.type?Gr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Gr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Mr.extend({dataTransfer:null}),no=Sr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Cr}),ro=Bn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Mr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:Dt,extractEvents:function(e,t,n,r){var o=Lt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Gr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Xr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Mr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case Qe:case qe:case Ke:e=Kr;break;case Ye:e=ro;break;case"scroll":e=Sr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ir;break;default:e=Bn}return Dn(t=e.getPooled(o,t,n,r)),t}};if(g)throw Error(a(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),h=jn,m=Cn,v=_n,O({SimpleEventPlugin:io,EnterLeaveEventPlugin:Ar,ChangeEventPlugin:Tr,SelectEventPlugin:qr,BeforeInputEventPlugin:ur});var ao=[],uo=-1;function lo(e){0>uo||(e.current=ao[uo],ao[uo]=null,uo--)}function co(e,t){uo++,ao[uo]=e.current,e.current=t}var so={},fo={current:so},po={current:!1},ho=so;function mo(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function vo(e){return null!=(e=e.childContextTypes)}function yo(){lo(po),lo(fo)}function go(e,t,n){if(fo.current!==so)throw Error(a(168));co(fo,t),co(po,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,ve(t)||"Unknown",i));return o({},n,{},r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,ho=fo.current,co(fo,e),co(po,po.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bo(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,lo(po),lo(fo),co(fo,e)):lo(po),co(po,n)}var ko=i.unstable_runWithPriority,Eo=i.unstable_scheduleCallback,To=i.unstable_cancelCallback,So=i.unstable_requestPaint,Oo=i.unstable_now,Po=i.unstable_getCurrentPriorityLevel,Co=i.unstable_ImmediatePriority,_o=i.unstable_UserBlockingPriority,jo=i.unstable_NormalPriority,No=i.unstable_LowPriority,Ro=i.unstable_IdlePriority,Mo={},Io=i.unstable_shouldYield,zo=void 0!==So?So:function(){},Ao=null,Do=null,Lo=!1,Fo=Oo(),Uo=1e4>Fo?Oo:function(){return Oo()-Fo};function $o(){switch(Po()){case Co:return 99;case _o:return 98;case jo:return 97;case No:return 96;case Ro:return 95;default:throw Error(a(332))}}function Wo(e){switch(e){case 99:return Co;case 98:return _o;case 97:return jo;case 96:return No;case 95:return Ro;default:throw Error(a(332))}}function Ho(e,t){return e=Wo(e),ko(e,t)}function Bo(e,t,n){return e=Wo(e),Eo(e,t,n)}function Vo(e){return null===Ao?(Ao=[e],Do=Eo(Co,qo)):Ao.push(e),Mo}function Qo(){if(null!==Do){var e=Do;Do=null,To(e)}qo()}function qo(){if(!Lo&&null!==Ao){Lo=!0;var e=0;try{var t=Ao;Ho(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ao=null}catch(t){throw null!==Ao&&(Ao=Ao.slice(e+1)),Eo(Co,Qo),t}finally{Lo=!1}}}function Ko(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Yo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Xo={current:null},Go=null,Jo=null,Zo=null;function ei(){Zo=Jo=Go=null}function ti(e){var t=Xo.current;lo(Xo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Go=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(ja=!0),e.firstContext=null)}function oi(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Go)throw Error(a(308));Jo=t,Go.dependencies={expirationTime:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ui(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function li(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ci(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.alternate;null!==n&&ui(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,u=i.shared.pending;if(null!==u){if(null!==a){var l=a.next;a.next=u.next,u.next=l}a=u,i.shared.pending=null,null!==(l=e.alternate)&&(null!==(l=l.updateQueue)&&(l.baseQueue=u))}if(null!==a){l=a.next;var c=i.baseState,s=0,f=null,d=null,p=null;if(null!==l)for(var h=l;;){if((u=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=m,f=c):p=p.next=m,u>s&&(s=u)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),il(u,h.suspenseConfig);e:{var v=e,y=h;switch(u=t,m=n,y.tag){case 1:if("function"==typeof(v=y.payload)){c=v.call(m,c,u);break e}c=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(u="function"==typeof(v=y.payload)?v.call(m,c,u):v))break e;c=o({},c,u);break e;case 2:ii=!0}}null!==h.callback&&(e.effectTag|=32,null===(u=i.effects)?i.effects=[h]:u.push(h))}if(null===(h=h.next)||h===l){if(null===(u=i.shared.pending))break;h=a.next=u.next,u.next=l,i.baseQueue=a=u,i.shared.pending=null}}null===p?f=c:p.next=d,i.baseState=f,i.baseQueue=p,al(s),e.expirationTime=s,e.memoizedState=c}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var pi=X.ReactCurrentBatchConfig,hi=(new r.Component).refs;function mi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Qu(),o=pi.suspense;(o=li(r=qu(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ci(e,o),Ku(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Qu(),o=pi.suspense;(o=li(r=qu(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ci(e,o),Ku(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Qu(),r=pi.suspense;(r=li(n=qu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ci(e,r),Ku(e,n)}};function yi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(o,i))}function gi(e,t,n){var r=!1,o=so,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=vo(t)?ho:fo.current,i=(r=null!=(r=t.contextTypes))?mo(e,o):so),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function bi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vi.enqueueReplaceState(t,t.state,null)}function wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=hi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=vo(t)?ho:fo.current,o.context=mo(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(mi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&vi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var xi=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===hi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ei(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ti(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ol(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=_l(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Pl(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=jl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Cl(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=_l(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Pl(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case te:return(t=jl(t,e.mode,n)).return=e,t}if(xi(t)||me(t))return(t=Cl(t,e.mode,n,null)).return=e,t;Ei(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(xi(n)||me(n))return null!==o?null:f(e,t,n,r,null);Ei(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(xi(r)||me(r))return f(t,e=e.get(n)||null,r,o,null);Ei(t,r)}return null}function m(o,a,u,l){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,u,l,c){var s=me(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(o,g.value,c))&&(u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case ee:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(i.type===ne){n(e,c.sibling),(r=o(c,i.props.children)).return=e,e=r;break e}break;default:if(c.elementType===i.type){n(e,c.sibling),(r=o(c,i.props)).ref=ki(e,c,i),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}i.type===ne?((r=Cl(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Pl(i.type,i.key,i.props,null,e.mode,l)).ref=ki(e,r,i),l.return=e,e=l)}return u(e);case te:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=jl(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=_l(i,e.mode,l)).return=e,e=r),u(e);if(xi(i))return m(e,r,i,l);if(me(i))return v(e,r,i,l);if(s&&Ei(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Si=Ti(!0),Oi=Ti(!1),Pi={},Ci={current:Pi},_i={current:Pi},ji={current:Pi};function Ni(e){if(e===Pi)throw Error(a(174));return e}function Ri(e,t){switch(co(ji,t),co(_i,e),co(Ci,Pi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:De(null,"");break;default:t=De(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Ci),co(Ci,t)}function Mi(){lo(Ci),lo(_i),lo(ji)}function Ii(e){Ni(ji.current);var t=Ni(Ci.current),n=De(t,e.type);t!==n&&(co(_i,e),co(Ci,n))}function zi(e){_i.current===e&&(lo(Ci),lo(_i))}var Ai={current:0};function Di(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Li(e,t){return{responder:e,props:t}}var Fi=X.ReactCurrentDispatcher,Ui=X.ReactCurrentBatchConfig,$i=0,Wi=null,Hi=null,Bi=null,Vi=!1;function Qi(){throw Error(a(321))}function qi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Dr(e[n],t[n]))return!1;return!0}function Ki(e,t,n,r,o,i){if($i=i,Wi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fi.current=null===e||null===e.memoizedState?ya:ga,e=n(r,o),t.expirationTime===$i){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Bi=Hi=null,t.updateQueue=null,Fi.current=ba,e=n(r,o)}while(t.expirationTime===$i)}if(Fi.current=va,t=null!==Hi&&null!==Hi.next,$i=0,Bi=Hi=Wi=null,Vi=!1,t)throw Error(a(300));return e}function Yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Bi?Wi.memoizedState=Bi=e:Bi=Bi.next=e,Bi}function Xi(){if(null===Hi){var e=Wi.alternate;e=null!==e?e.memoizedState:null}else e=Hi.next;var t=null===Bi?Wi.memoizedState:Bi.next;if(null!==t)Bi=t,Hi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Hi=e).memoizedState,baseState:Hi.baseState,baseQueue:Hi.baseQueue,queue:Hi.queue,next:null},null===Bi?Wi.memoizedState=Bi=e:Bi=Bi.next=e}return Bi}function Gi(e,t){return"function"==typeof t?t(e):t}function Ji(e){var t=Xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Hi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=i=null,c=o;do{var s=c.expirationTime;if(s<$i){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,i=r):l=l.next=f,s>Wi.expirationTime&&(Wi.expirationTime=s,al(s))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),il(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==o);null===l?i=r:l.next=u,Dr(r,t.memoizedState)||(ja=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zi(e){var t=Xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);Dr(i,t.memoizedState)||(ja=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Gi,lastRenderedState:e}).dispatch=ma.bind(null,Wi,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Wi.updateQueue)?(t={lastEffect:null},Wi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Xi().memoizedState}function ra(e,t,n,r){var o=Yi();Wi.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Xi();r=void 0===r?null:r;var i=void 0;if(null!==Hi){var a=Hi.memoizedState;if(i=a.destroy,null!==r&&qi(r,a.deps))return void ta(t,n,i,r)}Wi.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function ua(e,t){return oa(4,2,e,t)}function la(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ca(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,la.bind(null,t,e),n)}function sa(){}function fa(e,t){return Yi().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ha(e,t,n){var r=$o();Ho(98>r?98:r,(function(){e(!0)})),Ho(97<r?97:r,(function(){var r=Ui.suspense;Ui.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ui.suspense=r}}))}function ma(e,t,n){var r=Qu(),o=pi.suspense;o={expirationTime:r=qu(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Wi||null!==i&&i===Wi)Vi=!0,o.expirationTime=$i,Wi.expirationTime=$i;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=i(a,n);if(o.eagerReducer=i,o.eagerState=u,Dr(u,a))return}catch(e){}Ku(e,r)}}var va={readContext:oi,useCallback:Qi,useContext:Qi,useEffect:Qi,useImperativeHandle:Qi,useLayoutEffect:Qi,useMemo:Qi,useReducer:Qi,useRef:Qi,useState:Qi,useDebugValue:Qi,useResponder:Qi,useDeferredValue:Qi,useTransition:Qi},ya={readContext:oi,useCallback:fa,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,la.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ma.bind(null,Wi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Yi().memoizedState=e},useState:ea,useDebugValue:sa,useResponder:Li,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},ga={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Ji,useRef:na,useState:function(){return Ji(Gi)},useDebugValue:sa,useResponder:Li,useDeferredValue:function(e,t){var n=Ji(Gi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ji(Gi),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},ba={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Zi,useRef:na,useState:function(){return Zi(Gi)},useDebugValue:sa,useResponder:Li,useDeferredValue:function(e,t){var n=Zi(Gi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Gi),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},wa=null,xa=null,ka=!1;function Ea(e,t){var n=Tl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ta(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Sa(e){if(ka){var t=xa;if(t){var n=t;if(!Ta(e,t)){if(!(t=xn(n.nextSibling))||!Ta(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(wa=e);Ea(wa,n)}wa=e,xa=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,wa=e}}function Oa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Pa(e){if(e!==wa)return!1;if(!ka)return Oa(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=xa;t;)Ea(e,t),t=xn(t.nextSibling);if(Oa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xa=xn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}xa=null}}else xa=wa?xn(e.stateNode.nextSibling):null;return!0}function Ca(){xa=wa=null,ka=!1}var _a=X.ReactCurrentOwner,ja=!1;function Na(e,t,n,r){t.child=null===e?Oi(t,null,n,r):Si(t,e.child,n,r)}function Ra(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Ki(e,t,n,r,i,o),null===e||ja?(t.effectTag|=1,Na(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ka(e,t,o))}function Ma(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Sl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pl(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ia(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(o,r)&&e.ref===t.ref)?Ka(e,t,i):(t.effectTag|=1,(e=Ol(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ia(e,t,n,r,o,i){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(ja=!1,o<i)?(t.expirationTime=e.expirationTime,Ka(e,t,i)):Aa(e,t,n,r,i)}function za(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Aa(e,t,n,r,o){var i=vo(n)?ho:fo.current;return i=mo(t,i),ri(t,o),n=Ki(e,t,n,r,i,o),null===e||ja?(t.effectTag|=1,Na(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ka(e,t,o))}function Da(e,t,n,r,o){if(vo(n)){var i=!0;wo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),gi(t,n,r),wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=oi(c):c=mo(t,c=vo(n)?ho:fo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&bi(t,a,r,c),ii=!1;var d=t.memoizedState;a.state=d,fi(t,r,a,o),l=t.memoizedState,u!==r||d!==l||po.current||ii?("function"==typeof s&&(mi(t,n,s,r),l=t.memoizedState),(u=ii||yi(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ui(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Yo(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=oi(c):c=mo(t,c=vo(n)?ho:fo.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&bi(t,a,r,c),ii=!1,l=t.memoizedState,a.state=l,fi(t,r,a,o),d=t.memoizedState,u!==r||l!==d||po.current||ii?("function"==typeof s&&(mi(t,n,s,r),d=t.memoizedState),(s=ii||yi(t,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return La(e,t,n,r,i,o)}function La(e,t,n,r,o,i){za(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&xo(t,n,!1),Ka(e,t,i);r=t.stateNode,_a.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,u,i)):Na(e,t,u,i),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function Fa(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),Ri(e,t.containerInfo)}var Ua,$a,Wa,Ha={dehydrated:null,retryTime:0};function Ba(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Ai.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),co(Ai,1&a),null===e){if(void 0!==i.fallback&&Sa(t),u){if(u=i.fallback,(i=Cl(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Cl(u,o,n,null)).return=t,i.sibling=n,t.memoizedState=Ha,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Oi(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,u){if(i=i.fallback,(n=Ol(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(o=Ol(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Ha,t.child=n,o}return n=Si(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=i.fallback,(i=Cl(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Cl(u,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Ha,t.child=i,n}return t.memoizedState=null,t.child=Si(t,e,i.children,n)}function Va(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function Qa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function qa(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Na(e,t,r.children,n),0!=(2&(r=Ai.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Va(e,n);else if(19===e.tag)Va(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Ai,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Di(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Qa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Di(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Qa(t,!0,n,null,i,t.lastEffect);break;case"together":Qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ka(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&al(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ol(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ol(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ya(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Xa(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&yo(),null;case 3:return Mi(),lo(po),lo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Pa(t)||(t.effectTag|=4),null;case 5:zi(t),n=Ni(ji.current);var i=t.type;if(null!==e&&null!=t.stateNode)$a(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ni(Ci.current),Pa(t)){r=t.stateNode,i=t.type;var u=t.memoizedProps;switch(r[Tn]=t,r[Sn]=u,i){case"iframe":case"object":case"embed":qt("load",r);break;case"video":case"audio":for(e=0;e<Xe.length;e++)qt(Xe[e],r);break;case"source":qt("error",r);break;case"img":case"image":case"link":qt("error",r),qt("load",r);break;case"form":qt("reset",r),qt("submit",r);break;case"details":qt("toggle",r);break;case"input":Ee(r,u),qt("invalid",r),ln(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},qt("invalid",r),ln(n,"onChange");break;case"textarea":Ne(r,u),qt("invalid",r),ln(n,"onChange")}for(var l in on(i,u),e=null,u)if(u.hasOwnProperty(l)){var c=u[l];"children"===l?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):T.hasOwnProperty(l)&&null!=c&&ln(n,l)}switch(i){case"input":we(r),Oe(r,u,!0);break;case"textarea":we(r),Me(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===un&&(e=Ae(i)),e===un?"script"===i?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(i,{is:r.is}):(e=l.createElement(i),"select"===i&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,i),e[Tn]=t,e[Sn]=r,Ua(e,t),t.stateNode=e,l=an(i,r),i){case"iframe":case"object":case"embed":qt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Xe.length;c++)qt(Xe[c],e);c=r;break;case"source":qt("error",e),c=r;break;case"img":case"image":case"link":qt("error",e),qt("load",e),c=r;break;case"form":qt("reset",e),qt("submit",e),c=r;break;case"details":qt("toggle",e),c=r;break;case"input":Ee(e,r),c=ke(e,r),qt("invalid",e),ln(n,"onChange");break;case"option":c=Ce(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=o({},r,{value:void 0}),qt("invalid",e),ln(n,"onChange");break;case"textarea":Ne(e,r),c=je(e,r),qt("invalid",e),ln(n,"onChange");break;default:c=r}on(i,c);var s=c;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?nn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Fe(e,f):"children"===u?"string"==typeof f?("textarea"!==i||""!==f)&&Ue(e,f):"number"==typeof f&&Ue(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(T.hasOwnProperty(u)?null!=f&&ln(n,u):null!=f&&G(e,u,f,l))}switch(i){case"input":we(e),Oe(e,r,!1);break;case"textarea":we(e),Me(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?_e(e,!!r.multiple,n,!1):null!=r.defaultValue&&_e(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}yn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Wa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ni(ji.current),Ni(Ci.current),Pa(t)?(n=t.stateNode,r=t.memoizedProps,n[Tn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Tn]=t,t.stateNode=n)}return null;case 13:return lo(Ai),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Pa(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=i,i.nextEffect=u):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ai.current)?Pu===wu&&(Pu=xu):(Pu!==wu&&Pu!==xu||(Pu=ku),0!==Ru&&null!==Tu&&(Ml(Tu,Ou),Il(Tu,Ru)))),(n||r)&&(t.effectTag|=4),null);case 4:return Mi(),null;case 10:return ti(t),null;case 17:return vo(t.type)&&yo(),null;case 19:if(lo(Ai),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(u=r.rendering)){if(i)Ya(r,!1);else if(Pu!==wu||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Di(u))){for(t.effectTag|=64,Ya(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=u,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,u=e.dependencies,i.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return co(Ai,1&Ai.current|2),t.child}u=u.sibling}}else{if(!i)if(null!==(e=Di(u))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ya(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Ya(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Uo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=Ai.current,co(Ai,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Ga(e){switch(e.tag){case 1:vo(e.type)&&yo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Mi(),lo(po),lo(fo),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return zi(e),null;case 13:return lo(Ai),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return lo(Ai),null;case 4:return Mi(),null;case 10:return ti(e),null;default:return null}}function Ja(e,t){return{value:e,source:t,stack:ye(t)}}Ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$a=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u,l,c=t.stateNode;switch(Ni(Ci.current),e=null,n){case"input":a=ke(c,a),r=ke(c,r),e=[];break;case"option":a=Ce(c,a),r=Ce(c,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=je(c,a),r=je(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(u in on(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(T.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(T.hasOwnProperty(u)?(null!=s&&ln(i,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Wa=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Za="function"==typeof WeakSet?WeakSet:Set;function eu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gl(e,t)}else t.current=null}function nu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function iu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ou(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&At(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function au(e,t,n){switch("function"==typeof kl&&kl(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ho(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){gl(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gl(e,t)}}(t,n);break;case 5:tu(t);break;case 4:su(e,t,n)}}function uu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&uu(t)}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function cu(e){e:{for(var t=e.return;null!==t;){if(lu(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Ue(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||lu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function su(e,t,n){for(var r,o,i=t,u=!1;;){if(!u){u=i.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}u=u.return}u=!0}if(5===i.tag||6===i.tag){e:for(var l=e,c=i,s=n,f=c;;)if(au(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(l=r,c=i.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(au(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(u=!1)}i.sibling.return=i.return,i=i.sibling}}function fu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ru(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Sn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Te(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?nn(n,l):"dangerouslySetInnerHTML"===u?Fe(n,l):"children"===u?Ue(n,l):G(n,u,l,t)}switch(e){case"input":Se(n,r);break;case"textarea":Re(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?_e(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?_e(n,!!r.multiple,r.defaultValue,!0):_e(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,At(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Iu=Uo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void du(t);case 19:return void du(t);case 17:return}throw Error(a(163))}function du(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Za),t.forEach((function(t){var r=wl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,n){(n=li(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Au||(Au=!0,Du=r),eu(e,t)},n}function mu(e,t,n){(n=li(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return eu(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Lu?Lu=new Set([this]):Lu.add(this),eu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vu,yu=Math.ceil,gu=X.ReactCurrentDispatcher,bu=X.ReactCurrentOwner,wu=0,xu=3,ku=4,Eu=0,Tu=null,Su=null,Ou=0,Pu=wu,Cu=null,_u=1073741823,ju=1073741823,Nu=null,Ru=0,Mu=!1,Iu=0,zu=null,Au=!1,Du=null,Lu=null,Fu=!1,Uu=null,$u=90,Wu=null,Hu=0,Bu=null,Vu=0;function Qu(){return 0!=(48&Eu)?1073741821-(Uo()/10|0):0!==Vu?Vu:Vu=1073741821-(Uo()/10|0)}function qu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=$o();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Eu))return Ou;if(null!==n)e=Ko(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Ko(e,150,100);break;case 97:case 96:e=Ko(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Tu&&e===Ou&&--e,e}function Ku(e,t){if(50<Hu)throw Hu=0,Bu=null,Error(a(185));if(null!==(e=Yu(e,t))){var n=$o();1073741823===t?0!=(8&Eu)&&0==(48&Eu)?Zu(e):(Gu(e),0===Eu&&Qo()):Gu(e),0==(4&Eu)||98!==n&&99!==n||(null===Wu?Wu=new Map([[e,t]]):(void 0===(n=Wu.get(e))||n>t)&&Wu.set(e,t))}}function Yu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Tu===o&&(al(t),Pu===ku&&Ml(o,Ou)),Il(o,t)),o}function Xu(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Rl(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Gu(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Vo(Zu.bind(null,e));else{var t=Xu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Qu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Mo&&To(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Vo(Zu.bind(null,e)):Bo(r,Ju.bind(null,e),{timeout:10*(1073741821-t)-Uo()}),e.callbackNode=t}}}function Ju(e,t){if(Vu=0,t)return zl(e,t=Qu()),Gu(e),null;var n=Xu(e);if(0!==n){if(t=e.callbackNode,0!=(48&Eu))throw Error(a(327));if(ml(),e===Tu&&n===Ou||nl(e,n),null!==Su){var r=Eu;Eu|=16;for(var o=ol();;)try{ll();break}catch(t){rl(e,t)}if(ei(),Eu=r,gu.current=o,1===Pu)throw t=Cu,nl(e,n),Ml(e,n),Gu(e),t;if(null===Su)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Pu,Tu=null,r){case wu:case 1:throw Error(a(345));case 2:zl(e,2<n?2:n);break;case xu:if(Ml(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(o)),1073741823===_u&&10<(o=Iu+500-Uo())){if(Mu){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nl(e,n);break}}if(0!==(i=Xu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(dl.bind(null,e),o);break}dl(e);break;case ku:if(Ml(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(o)),Mu&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nl(e,n);break}if(0!==(o=Xu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==ju?r=10*(1073741821-ju)-Uo():1073741823===_u?r=0:(r=10*(1073741821-_u)-5e3,0>(r=(o=Uo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*yu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(dl.bind(null,e),r);break}dl(e);break;case 5:if(1073741823!==_u&&null!==Nu){i=_u;var u=Nu;if(0>=(r=0|u.busyMinDurationMs)?r=0:(o=0|u.busyDelayMs,r=(i=Uo()-(10*(1073741821-i)-(0|u.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Ml(e,n),e.timeoutHandle=bn(dl.bind(null,e),r);break}}dl(e);break;default:throw Error(a(329))}if(Gu(e),e.callbackNode===t)return Ju.bind(null,e)}}return null}function Zu(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Eu))throw Error(a(327));if(ml(),e===Tu&&t===Ou||nl(e,t),null!==Su){var n=Eu;Eu|=16;for(var r=ol();;)try{ul();break}catch(t){rl(e,t)}if(ei(),Eu=n,gu.current=r,1===Pu)throw n=Cu,nl(e,t),Ml(e,t),Gu(e),n;if(null!==Su)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Tu=null,dl(e),Gu(e)}return null}function el(e,t){var n=Eu;Eu|=1;try{return e(t)}finally{0===(Eu=n)&&Qo()}}function tl(e,t){var n=Eu;Eu&=-2,Eu|=8;try{return e(t)}finally{0===(Eu=n)&&Qo()}}function nl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Su)for(n=Su.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Mi(),lo(po),lo(fo);break;case 5:zi(r);break;case 4:Mi();break;case 13:case 19:lo(Ai);break;case 10:ti(r)}n=n.return}Tu=e,Su=Ol(e.current,null),Ou=t,Pu=wu,Cu=null,ju=_u=1073741823,Nu=null,Ru=0,Mu=!1}function rl(e,t){for(;;){try{if(ei(),Fi.current=va,Vi)for(var n=Wi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if($i=0,Bi=Hi=Wi=null,Vi=!1,null===Su||null===Su.return)return Pu=1,Cu=t,Su=null;e:{var o=e,i=Su.return,a=Su,u=t;if(t=Ou,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&Ai.current),f=i;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(d){var m=f.updateQueue;if(null===m){var v=new Set;v.add(l),f.updateQueue=v}else m.add(l);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var y=li(1073741823,null);y.tag=2,ci(a,y)}a.expirationTime=1073741823;break e}u=void 0,a=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new pu,u=new Set,g.set(l,u)):void 0===(u=g.get(l))&&(u=new Set,g.set(l,u)),!u.has(a)){u.add(a);var b=bl.bind(null,o,l,a);l.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((ve(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(a))}5!==Pu&&(Pu=2),u=Ja(u,a),f=i;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,si(f,hu(f,l,t));break e;case 1:l=u;var w=f.type,x=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Lu||!Lu.has(x)))){f.effectTag|=4096,f.expirationTime=t,si(f,mu(f,l,t));break e}}f=f.return}while(null!==f)}Su=sl(Su)}catch(e){t=e;continue}break}}function ol(){var e=gu.current;return gu.current=va,null===e?va:e}function il(e,t){e<_u&&2<e&&(_u=e),null!==t&&e<ju&&2<e&&(ju=e,Nu=t)}function al(e){e>Ru&&(Ru=e)}function ul(){for(;null!==Su;)Su=cl(Su)}function ll(){for(;null!==Su&&!Io();)Su=cl(Su)}function cl(e){var t=vu(e.alternate,e,Ou);return e.memoizedProps=e.pendingProps,null===t&&(t=sl(e)),bu.current=null,t}function sl(e){Su=e;do{var t=Su.alternate;if(e=Su.return,0==(2048&Su.effectTag)){if(t=Xa(t,Su,Ou),1===Ou||1!==Su.childExpirationTime){for(var n=0,r=Su.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Su.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Su.firstEffect),null!==Su.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Su.firstEffect),e.lastEffect=Su.lastEffect),1<Su.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Su:e.firstEffect=Su,e.lastEffect=Su))}else{if(null!==(t=Ga(Su)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Su.sibling))return t;Su=e}while(null!==Su);return Pu===wu&&(Pu=5),null}function fl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dl(e){var t=$o();return Ho(99,pl.bind(null,e,t)),null}function pl(e,t){do{ml()}while(null!==Uu);if(0!=(48&Eu))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fl(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Tu&&(Su=Tu=null,Ou=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Eu;Eu|=32,bu.current=null,mn=Qt;var u=pn();if(hn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,m=0,v=0,y=u,g=null;t:for(;;){for(var b;y!==l||0!==s&&3!==y.nodeType||(p=d+s),y!==f||0!==c&&3!==y.nodeType||(h=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===u)break t;if(g===l&&++m===s&&(p=d),g===f&&++v===c&&(h=d),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;vn={activeElementDetached:null,focusedElem:u,selectionRange:l},Qt=!1,zu=o;do{try{hl()}catch(e){if(null===zu)throw Error(a(330));gl(zu,e),zu=zu.nextEffect}}while(null!==zu);zu=o;do{try{for(u=e,l=t;null!==zu;){var w=zu.effectTag;if(16&w&&Ue(zu.stateNode,""),128&w){var x=zu.alternate;if(null!==x){var k=x.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&w){case 2:cu(zu),zu.effectTag&=-3;break;case 6:cu(zu),zu.effectTag&=-3,fu(zu.alternate,zu);break;case 1024:zu.effectTag&=-1025;break;case 1028:zu.effectTag&=-1025,fu(zu.alternate,zu);break;case 4:fu(zu.alternate,zu);break;case 8:su(u,s=zu,l),uu(s)}zu=zu.nextEffect}}catch(e){if(null===zu)throw Error(a(330));gl(zu,e),zu=zu.nextEffect}}while(null!==zu);if(k=vn,x=pn(),w=k.focusedElem,l=k.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==l&&hn(w)&&(x=l.start,void 0===(k=l.end)&&(k=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(k,w.value.length)):(k=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(k=k.getSelection(),s=w.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!k.extend&&u>l&&(s=l,l=u,u=s),s=dn(w,u),f=dn(w,l),s&&f&&(1!==k.rangeCount||k.anchorNode!==s.node||k.anchorOffset!==s.offset||k.focusNode!==f.node||k.focusOffset!==f.offset)&&((x=x.createRange()).setStart(s.node,s.offset),k.removeAllRanges(),u>l?(k.addRange(x),k.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),k.addRange(x))))),x=[];for(k=w;k=k.parentNode;)1===k.nodeType&&x.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(k=x[w]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Qt=!!mn,vn=mn=null,e.current=n,zu=o;do{try{for(w=e;null!==zu;){var E=zu.effectTag;if(36&E&&iu(w,zu.alternate,zu),128&E){x=void 0;var T=zu.ref;if(null!==T){var S=zu.stateNode;switch(zu.tag){case 5:x=S;break;default:x=S}"function"==typeof T?T(x):T.current=x}}zu=zu.nextEffect}}catch(e){if(null===zu)throw Error(a(330));gl(zu,e),zu=zu.nextEffect}}while(null!==zu);zu=null,zo(),Eu=i}else e.current=n;if(Fu)Fu=!1,Uu=e,$u=t;else for(zu=o;null!==zu;)t=zu.nextEffect,zu.nextEffect=null,zu=t;if(0===(t=e.firstPendingTime)&&(Lu=null),1073741823===t?e===Bu?Hu++:(Hu=0,Bu=e):Hu=0,"function"==typeof xl&&xl(n.stateNode,r),Gu(e),Au)throw Au=!1,e=Du,Du=null,e;return 0!=(8&Eu)||Qo(),null}function hl(){for(;null!==zu;){var e=zu.effectTag;0!=(256&e)&&nu(zu.alternate,zu),0==(512&e)||Fu||(Fu=!0,Bo(97,(function(){return ml(),null}))),zu=zu.nextEffect}}function ml(){if(90!==$u){var e=97<$u?97:$u;return $u=90,Ho(e,vl)}}function vl(){if(null===Uu)return!1;var e=Uu;if(Uu=null,0!=(48&Eu))throw Error(a(331));var t=Eu;for(Eu|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ru(5,n),ou(5,n)}}catch(t){if(null===e)throw Error(a(330));gl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Eu=t,Qo(),!0}function yl(e,t,n){ci(e,t=hu(e,t=Ja(n,t),1073741823)),null!==(e=Yu(e,1073741823))&&Gu(e)}function gl(e,t){if(3===e.tag)yl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Lu||!Lu.has(r))){ci(n,e=mu(n,e=Ja(t,e),1073741823)),null!==(n=Yu(n,1073741823))&&Gu(n);break}}n=n.return}}function bl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Tu===e&&Ou===n?Pu===ku||Pu===xu&&1073741823===_u&&Uo()-Iu<500?nl(e,Ou):Mu=!0:Rl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Gu(e)))}function wl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=qu(t=Qu(),e,null)),null!==(e=Yu(e,t))&&Gu(e)}vu=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)ja=!0;else{if(r<n){switch(ja=!1,t.tag){case 3:Fa(t),Ca();break;case 5:if(Ii(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&wo(t);break;case 4:Ri(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,co(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ba(e,t,n):(co(Ai,1&Ai.current),null!==(t=Ka(e,t,n))?t.sibling:null);co(Ai,1&Ai.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return qa(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),co(Ai,Ai.current),!r)return null}return Ka(e,t,n)}ja=!1}}else ja=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=mo(t,fo.current),ri(t,n),o=Ki(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var i=!0;wo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&mi(t,r,u,e),o.updater=vi,t.stateNode=o,o._reactInternalFiber=t,wi(t,r,e,n),t=La(null,t,r,!0,i,n)}else t.tag=0,Na(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Sl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(o),e=Yo(o,e),i){case 0:t=Aa(null,t,o,e,n);break e;case 1:t=Da(null,t,o,e,n);break e;case 11:t=Ra(null,t,o,e,n);break e;case 14:t=Ma(null,t,o,Yo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Aa(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Da(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Fa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ui(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)Ca(),t=Ka(e,t,n);else{if((o=t.stateNode.hydrate)&&(xa=xn(t.stateNode.containerInfo.firstChild),wa=t,o=ka=!0),o)for(n=Oi(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Na(e,t,r,n),Ca();t=t.child}return t;case 5:return Ii(t),null===e&&Sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,gn(r,o)?u=null:null!==i&&gn(r,i)&&(t.effectTag|=16),za(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Na(e,t,u,n),t=t.child),t;case 6:return null===e&&Sa(t),null;case 13:return Ba(e,t,n);case 4:return Ri(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):Na(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ra(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return Na(e,t,t.pendingProps,n),t.child;case 8:case 12:return Na(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var l=t.type._context;if(co(Xo,l._currentValue),l._currentValue=i,null!==u)if(l=u.value,0===(i=Dr(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!po.current){t=Ka(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=li(n,null)).tag=2,ci(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ni(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Na(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,Na(e,t,r,n),t.child;case 14:return i=Yo(o=t.type,t.pendingProps),Ma(e,t,o,i=Yo(o.type,i),r,n);case 15:return Ia(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,wo(t)):e=!1,ri(t,n),gi(t,r,o),wi(t,r,o,n),La(null,t,r,!0,e,n);case 19:return qa(e,t,n)}throw Error(a(156,t.tag))};var xl=null,kl=null;function El(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Tl(e,t,n,r){return new El(e,t,n,r)}function Sl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ol(e,t){var n=e.alternate;return null===n?((n=Tl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pl(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Sl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Cl(n.children,o,i,t);case ue:u=8,o|=7;break;case re:u=8,o|=1;break;case oe:return(e=Tl(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case ce:return(e=Tl(13,n,t,o)).type=ce,e.elementType=ce,e.expirationTime=i,e;case se:return(e=Tl(19,n,t,o)).elementType=se,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:u=10;break e;case ae:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case de:u=16,r=null;break e;case pe:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Tl(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Cl(e,t,n,r){return(e=Tl(7,e,r,t)).expirationTime=n,e}function _l(e,t,n){return(e=Tl(6,e,null,t)).expirationTime=n,e}function jl(e,t,n){return(t=Tl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Nl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Rl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Ml(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Il(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function zl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Al(e,t,n,r){var o=t.current,i=Qu(),u=pi.suspense;i=qu(i,o,u);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(vo(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(vo(c)){n=bo(n,c,l);break e}}n=l}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=li(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ci(o,t),Ku(o,i),i}function Dl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Ll(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fl(e,t){Ll(e,t),(e=e.alternate)&&Ll(e,t)}function Ul(e,t,n){var r=new Nl(e,t,n=null!=n&&!0===n.hydrate),o=Tl(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[On]=r.current,n&&0!==t&&function(e,t){var n=Je(t);Ot.forEach((function(e){ht(e,t,n)})),Pt.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function $l(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Wl(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Dl(a);u.call(e)}}Al(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ul(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Dl(a);l.call(e)}}tl((function(){Al(t,a,e,o)}))}return Dl(a)}function Hl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!$l(t))throw Error(a(200));return Hl(e,t,null,n)}Ul.prototype.render=function(e){Al(e,this._internalRoot,null,null)},Ul.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Al(null,e,null,(function(){t[On]=null}))},mt=function(e){if(13===e.tag){var t=Ko(Qu(),150,100);Ku(e,t),Fl(e,t)}},vt=function(e){13===e.tag&&(Ku(e,3),Fl(e,3))},yt=function(e){if(13===e.tag){var t=Qu();Ku(e,t=qu(t,e,null)),Fl(e,t)}},C=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=jn(r);if(!o)throw Error(a(90));xe(r),Se(r,o)}}}break;case"textarea":Re(e,n);break;case"select":null!=(t=n.value)&&_e(e,!!n.multiple,t,!1)}},I=el,z=function(e,t,n,r,o){var i=Eu;Eu|=4;try{return Ho(98,e.bind(null,t,n,r,o))}finally{0===(Eu=i)&&Qo()}},A=function(){0==(49&Eu)&&(function(){if(null!==Wu){var e=Wu;Wu=null,e.forEach((function(e,t){zl(t,e),Gu(t)})),Qo()}}(),ml())},D=function(e,t){var n=Eu;Eu|=2;try{return e(t)}finally{0===(Eu=n)&&Qo()}};var Vl,Ql,ql={Events:[Cn,_n,jn,O,E,Dn,function(e){ot(e,An)},R,M,Gt,ut,ml,{current:!1}]};Ql=(Vl={findFiberByHostInstance:Pn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},kl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Vl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:X.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Ql?Ql(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ql,t.createPortal=Bl,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Eu))throw Error(a(187));var n=Eu;Eu|=1;try{return Ho(99,e.bind(null,t))}finally{Eu=n,Qo()}},t.hydrate=function(e,t,n){if(!$l(t))throw Error(a(200));return Wl(null,e,t,!0,n)},t.render=function(e,t,n){if(!$l(t))throw Error(a(200));return Wl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!$l(e))throw Error(a(40));return!!e._reactRootContainer&&(tl((function(){Wl(null,null,e,!1,(function(){e._reactRootContainer=null,e[On]=null}))})),!0)},t.unstable_batchedUpdates=el,t.unstable_createPortal=function(e,t){return Bl(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!$l(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Wl(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(27)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,u;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},o=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var g=!1,b=null,w=-1,x=5,k=0;a=function(){return t.unstable_now()>=k},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,T=E.port2;E.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();k=e+x;try{b(!0,e)?T.postMessage(null):(g=!1,b=null)}catch(e){throw T.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,T.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},i=function(){m(w),w=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function O(e){return void 0===(e=e[0])?null:e}function P(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,l=e[u];if(void 0!==a&&0>C(a,n))void 0!==l&&0>C(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>C(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var _=[],j=[],N=1,R=null,M=3,I=!1,z=!1,A=!1;function D(e){for(var t=O(j);null!==t;){if(null===t.callback)P(j);else{if(!(t.startTime<=e))break;P(j),t.sortIndex=t.expirationTime,S(_,t)}t=O(j)}}function L(e){if(A=!1,D(e),!z)if(null!==O(_))z=!0,r(F);else{var t=O(j);null!==t&&o(L,t.startTime-e)}}function F(e,n){z=!1,A&&(A=!1,i()),I=!0;var r=M;try{for(D(n),R=O(_);null!==R&&(!(R.expirationTime>n)||e&&!a());){var u=R.callback;if(null!==u){R.callback=null,M=R.priorityLevel;var l=u(R.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?R.callback=l:R===O(_)&&P(_),D(n)}else P(_);R=O(_)}if(null!==R)var c=!0;else{var s=O(j);null!==s&&o(L,s.startTime-n),c=!1}return c}finally{R=null,M=r,I=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){z||I||(z=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return O(_)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=$,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),l=u;return e={id:N++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,S(j,e),null===O(_)&&e===O(j)&&(A?i():A=!0,o(L,l-u))):(e.sortIndex=a,S(_,e),z||I||(z=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();D(e);var n=O(_);return n!==R&&null!==R&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<R.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},function(e,t,n){"use strict";var r=n(29);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case v:case c:return e;default:return t}}case i:return t}}}function E(e){return k(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||k(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return k(e)===p},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===y},t.isMemo=function(e){return k(e)===v},t.isPortal=function(e){return k(e)===i},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===u},t.isSuspense=function(e){return k(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===x||e.$$typeof===g)},t.typeOf=k},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},,,,,,function(e,t,n){n(0),n(11),n(9),n(12),n(21),n(7),e.exports=n(23)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2VzbS92YWx1ZS1lcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vc2VsZWN0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9Db25uZWN0ZWRSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvZXNtL3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvZXNtL3N0cnVjdHVyZS9wbGFpbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vc3RydWN0dXJlL3BsYWluL2dldEluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsInRoaXMiLCJMT0NBVElPTl9DSEFOR0UiLCJvbkxvY2F0aW9uQ2hhbmdlZCIsImxvY2F0aW9uIiwiYWN0aW9uIiwiaXNGaXJzdFJlbmRlcmluZyIsInVuZGVmaW5lZCIsInR5cGUiLCJwYXlsb2FkIiwiQ0FMTF9ISVNUT1JZX01FVEhPRCIsInVwZGF0ZUxvY2F0aW9uIiwibWV0aG9kIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJwdXNoIiwicmVwbGFjZSIsImdvIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwicm91dGVyQWN0aW9ucyIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJFcnJvciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwia2V5cyIsImluZGV4T2YiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwic3BsaXQiLCJqb2luIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsIm9iaiIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJzbGljZSIsImdldFN0YXRlIiwic3Vic2NyaWJlIiwibGlzdGVuZXIiLCJpc1N1YnNjcmliZWQiLCJpbmRleCIsInNwbGljZSIsImRpc3BhdGNoIiwibGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm9ic2VydmFibGUiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIlR5cGVFcnJvciIsIm9ic2VydmVTdGF0ZSIsIm5leHQiLCJ1bnN1YnNjcmliZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsIlN0cmluZyIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJmb3JFYWNoIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiZSIsInN0YXRlIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsIl9pIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsIl9kZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImNvbXBvc2UiLCJmdW5jcyIsImFyZyIsInJlZHVjZSIsImEiLCJiIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJzdG9yZSIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1hcCIsIm1pZGRsZXdhcmUiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJjaGFyQXQiLCJzcGxpY2VPbmUiLCJsaXN0IiwiayIsInBvcCIsInRvIiwiZnJvbSIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJjb25jYXQiLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsInJlc3VsdCIsInN1YnN0ciIsInZhbHVlT2YiLCJ2YWx1ZUVxdWFsIiwiaXNBcnJheSIsImV2ZXJ5IiwiaXRlbSIsImFWYWx1ZSIsImJWYWx1ZSIsImFkZExlYWRpbmdTbGFzaCIsInBhdGgiLCJzdHJpcEJhc2VuYW1lIiwicHJlZml4IiwidG9Mb3dlckNhc2UiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJzZWFyY2giLCJoYXNoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJmbiIsImlzQWN0aXZlIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsInByb3BzIiwidWEiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImV2ZW50IiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwiaHJlZiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwibWluIiwibWF4IiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsImVudHJpZXMiLCJlbnRyeSIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwiY2FuR28iLCJSZWFjdFJlZHV4Q29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiYmF0Y2giLCJmaXJzdCIsImNsZWFyIiwicHJldiIsIlN1YnNjcmlwdGlvbiIsInBhcmVudFN1YiIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJfcHJvdG8iLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsIkJvb2xlYW4iLCJ0cnlVbnN1YnNjcmliZSIsImNvbnRleHQiLCJjaGlsZHJlbiIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJDb250ZXh0IiwiUHJvdmlkZXIiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyIsImVmZmVjdEZ1bmMiLCJlZmZlY3RBcmdzIiwiZGVwZW5kZW5jaWVzIiwiY2FwdHVyZVdyYXBwZXJQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJsYXN0Q2hpbGRQcm9wcyIsInJlbmRlcklzU2NoZWR1bGVkIiwid3JhcHBlclByb3BzIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJjdXJyZW50Iiwic3Vic2NyaWJlVXBkYXRlcyIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsImNoaWxkUHJvcHNTZWxlY3RvciIsImZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2giLCJkaWRVbnN1YnNjcmliZSIsImxhc3RUaHJvd25FcnJvciIsImNoZWNrRm9yVXBkYXRlcyIsIm5ld0NoaWxkUHJvcHMiLCJlcnJvciIsImxhdGVzdFN0b3JlU3RhdGUiLCJpbml0U3RhdGVVcGRhdGVzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJGZvcndhcmRSZWYiLCJ3aXRoUmVmIiwiZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJ1c2VQdXJlT25seU1lbW8iLCJDb25uZWN0RnVuY3Rpb24iLCJfdXNlTWVtbyIsImZvcndhcmRlZFJlZiIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsIkNvbnN1bWVyIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJyZWYiLCJDb25uZWN0IiwibWVtbyIsImZvcndhcmRlZCIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJvcHRpb25zIiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm1lcmdlUHJvcHMiLCJtZXJnZWRQcm9wcyIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJtYXRjaCIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiY3JlYXRlQ29ubmVjdCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzIiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY3JlYXRlU3RvcmVIb29rIiwidXNlUmVkdXhDb250ZXh0IiwiY3JlYXRlRGlzcGF0Y2hIb29rIiwidXNlU3RvcmUiLCJ1c2VEaXNwYXRjaCIsInJlZkVxdWFsaXR5IiwiY3JlYXRlU2VsZWN0b3JIb29rIiwic2VsZWN0b3IiLCJlcXVhbGl0eUZuIiwiX3VzZVJlZHV4Q29udGV4dCIsImNvbnRleHRTdWIiLCJzZWxlY3RlZFN0YXRlIiwiZm9yY2VSZW5kZXIiLCJsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yIiwibGF0ZXN0U2VsZWN0b3IiLCJsYXRlc3RTZWxlY3RlZFN0YXRlIiwiZXJyIiwic3RhY2siLCJuZXdTZWxlY3RlZFN0YXRlIiwidXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24iLCJuZXdCYXRjaCIsInVzZVNlbGVjdG9yIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImdldE93blByb3BlcnR5TmFtZXMiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0JDEiLCJSb3V0ZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3RoaXMiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwidXJsIiwicGFyYW1zIiwiaXNFeGFjdCIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJDb21wb25lbnQiLCJNZW1vcnlSb3V0ZXIiLCJMaWZlY3ljbGUiLCJvbk1vdW50IiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwib25VcGRhdGUiLCJvblVubW91bnQiLCJQcm9tcHQiLCJfcmVmJHdoZW4iLCJ3aGVuIiwic2VsZiIsInJlbGVhc2UiLCJjYWNoZSIsImNhY2hlQ291bnQiLCJnZW5lcmF0ZVBhdGgiLCJnZW5lcmF0b3IiLCJjb21waWxlIiwiY29tcGlsZVBhdGgiLCJwcmV0dHkiLCJSZWRpcmVjdCIsImNvbXB1dGVkTWF0Y2giLCJfcmVmJHB1c2giLCJwcmV2TG9jYXRpb24iLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsImV4YWN0IiwiX29wdGlvbnMkc3RyaWN0Iiwic3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwic2Vuc2l0aXZlIiwibWF0Y2hlZCIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwiZW5kIiwicGF0aENhY2hlIiwicmVnZXhwIiwiY29tcGlsZVBhdGgkMSIsImV4ZWMiLCJ2YWx1ZXMiLCJSb3V0ZSIsImNvbnRleHQkMSIsIl90aGlzJHByb3BzIiwiYmFzZSIsImNyZWF0ZVVSTCIsInN0YXRpY0hhbmRsZXIiLCJub29wIiwiU3RhdGljUm91dGVyIiwiaGFuZGxlUHVzaCIsIm5hdmlnYXRlVG8iLCJoYW5kbGVSZXBsYWNlIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJfdGhpcyRwcm9wcyRiYXNlbmFtZSIsIl90aGlzJHByb3BzJGNvbnRleHQiLCJhZGRCYXNlbmFtZSIsIl90aGlzJHByb3BzMiIsIl90aGlzJHByb3BzMiRiYXNlbmFtZSIsIl90aGlzJHByb3BzMiRjb250ZXh0IiwiX3RoaXMkcHJvcHMyJGxvY2F0aW9uIiwicmVzdCIsIlN3aXRjaCIsImVsZW1lbnQiLCJDaGlsZHJlbiIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJ3aXRoUm91dGVyIiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsInVzZUNvbnRleHQiLCJ1c2VIaXN0b3J5IiwidXNlTG9jYXRpb24iLCJ1c2VQYXJhbXMiLCJ1c2VSb3V0ZU1hdGNoIiwicm9vdCIsImdsb2JhbCIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXJzIiwib24iLCJoYW5kbGVyIiwib2ZmIiwiaCIsInNldCIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsImVtaXR0ZXIiLCJnZXRDaGlsZENvbnRleHQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJpc1JlcXVpcmVkIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJnZXRWYWx1ZSIsIm9ic2VydmVkQml0cyIsIl9wcm90bzIiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGFyc2UiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJlc2NhcGVkIiwib2Zmc2V0IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsIm1hdGNoZXMiLCJmbGFncyIsIm9wdHMiLCJkYXRhIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9rZW4iLCJzZWdtZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImoiLCJ0ZXN0IiwiYXR0YWNoS2V5cyIsInJlIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJnIiwiRnVuY3Rpb24iLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJhcnIyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsIml0ZXJhdG9yIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIl9hY3Rpb24kcGF5bG9hZCIsIl90eXBlb2YiLCJzdHJ1Y3R1cmUiLCJnZXRJbiIsInRvSlMiLCJnZXRSb3V0ZXIiLCJyb3V0ZXIiLCJnZXRMb2NhdGlvbiIsImdldEFjdGlvbiIsImdldFNlYXJjaCIsImdldEhhc2giLCJjcmVhdGVNYXRjaFNlbGVjdG9yIiwibGFzdFBhdGhuYW1lIiwibGFzdE1hdGNoIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX3NldFByb3RvdHlwZU9mIiwiQ29ubmVjdGVkUm91dGVyIiwiX1B1cmVDb21wb25lbnQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5UaW1lVHJhdmVsbGluZyIsIl9nZXRMb2NhdGlvbiIsInBhdGhuYW1lSW5TdG9yZSIsInNlYXJjaEluU3RvcmUiLCJoYXNoSW5TdG9yZSIsInN0YXRlSW5TdG9yZSIsIl9oaXN0b3J5JGxvY2F0aW9uIiwicGF0aG5hbWVJbkhpc3RvcnkiLCJzZWFyY2hJbkhpc3RvcnkiLCJoYXNoSW5IaXN0b3J5Iiwic3RhdGVJbkhpc3RvcnkiLCJoYW5kbGVMb2NhdGlvbkNoYW5nZSIsIm5vSW5pdGlhbFBvcCIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9pbmhlcml0cyIsInNoYXBlIiwiZnVuYyIsInN0cmluZyIsIm9uZU9mVHlwZSIsIm5vZGUiLCJib29sIiwiQ29ubmVjdGVkUm91dGVyV2l0aENvbnRleHQiLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsImRvbmUiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfbm9uSXRlcmFibGVSZXN0IiwiX29iamVjdFNwcmVhZCIsImluamVjdFF1ZXJ5IiwicXVlcnkiLCJzZWFyY2hRdWVyeSIsImFjYyIsImN1cnJlbnRRdWVyeSIsIl9jdXJyZW50UXVlcnkkc3BsaXQyIiwiZnJvbUpTIiwibWVyZ2UiLCJpbml0aWFsUm91dGVyU3RhdGUiLCJwbGFpbiIsImNvbm5lY3RSb3V0ZXIiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImZvciIsInEiLCJ1IiwidiIsInciLCJ6IiwiQSIsIkIiLCJEIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkUiLCJGIiwicmVmcyIsInVwZGF0ZXIiLCJHIiwiSCIsImlzUmVhY3RDb21wb25lbnQiLCJmb3JjZVVwZGF0ZSIsIkkiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkoiLCJLIiwiTCIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsImYiLCIkJHR5cGVvZiIsIl9vd25lciIsIk8iLCJQIiwiUSIsIlIiLCJrZXlQcmVmaXgiLCJjb3VudCIsIlMiLCJWIiwiVCIsIlUiLCJlc2NhcGUiLCJXIiwiYWEiLCJYIiwiTiIsIlkiLCJaIiwiYmEiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJ0b0FycmF5Iiwib25seSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInVzZUNhbGxiYWNrIiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidmVyc2lvbiIsIm9uRXJyb3IiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImN1cnJlbnRUYXJnZXQiLCJrYSIsInBhIiwicWEiLCJyYSIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwiVWEiLCJWYSIsInhsaW5rSHJlZiIsIldhIiwiWGEiLCJTYSIsImlzTmFOIiwiVGEiLCJSYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsInBiIiwicWIiLCJ0YWciLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsInJiIiwic2IiLCJub2RlTmFtZSIsInhiIiwiX3ZhbHVlVHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwidGIiLCJ5YiIsImNoZWNrZWQiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJJYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiSmIiLCJLYiIsIkxiIiwidGV4dENvbnRlbnQiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiUmIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsIlNiIiwiVGIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYiIsIlZiIiwiV2IiLCJzdHlsZSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJXZWFrTWFwIiwiTWFwIiwiY2MiLCJkYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImVjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJmYyIsImhjIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsIm1jIiwibmMiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwib2MiLCJwYyIsInFjIiwidG9wTGV2ZWxUeXBlIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwicmMiLCJldmVudFN5c3RlbUZsYWdzIiwic2MiLCJjb250YWluZXJJbmZvIiwidGMiLCJ1YyIsImhhcyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJLYyIsImJsb2NrZWRPbiIsImNvbnRhaW5lciIsIkxjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiTWMiLCJOYyIsIlBjIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJzaGlmdCIsIlVjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiVmMiLCJXYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsImJkIiwiY2QiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJpZCIsIk9jIiwiamQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImtkIiwibGQiLCJ0cmltIiwibWQiLCJzZXRQcm9wZXJ0eSIsIm5kIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJvZCIsInBkIiwicWQiLCJyZCIsInNkIiwidGQiLCJib2R5IiwidWQiLCJ2ZCIsIm5leHRTaWJsaW5nIiwieGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJ5ZCIsImNvbnRlbnRFZGl0YWJsZSIsIkRkIiwiRWQiLCJGZCIsImF1dG9Gb2N1cyIsIkdkIiwiX19odG1sIiwiSGQiLCJzZXRUaW1lb3V0IiwiSWQiLCJjbGVhclRpbWVvdXQiLCJKZCIsIktkIiwicHJldmlvdXNTaWJsaW5nIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwiZGlzcGF0Y2hDb25maWciLCJVZCIsIl90YXJnZXRJbnN0IiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJnZSIsImhlIiwiaWUiLCJqZSIsImtlIiwiZG9jdW1lbnRNb2RlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwicGUiLCJxZSIsImtleUNvZGUiLCJkZXRhaWwiLCJzZSIsInZlIiwibG9jYWxlIiwid2hpY2giLCJ0ZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsInVlIiwid2UiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwieGUiLCJ5ZSIsImNoYW5nZSIsInplIiwiQWUiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJkZXRhY2hFdmVudCIsIkhlIiwiSWUiLCJhdHRhY2hFdmVudCIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIk5lIiwidmlldyIsIk9lIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBlIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiV2UiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJYZSIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiWWUiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsIm9mIiwiY2hhckNvZGUiLCJwZiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJxZiIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInFnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJyZyIsInNnIiwicmVzcG9uZGVycyIsInRnIiwidWciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwidmciLCJ3ZyIsInN1c3BlbnNlQ29uZmlnIiwieGciLCJ5ZyIsInpnIiwiY2EiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJKZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZyIsIkhnIiwiSWciLCJLZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIkxnIiwiTWciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiT2ciLCJQZyIsIl9zdHJpbmdSZWYiLCJRZyIsIlJnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlNnIiwiVGciLCJlbGVtZW50VHlwZSIsIlVnIiwiaW1wbGVtZW50YXRpb24iLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJlaCIsImZoIiwiZ2giLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInF1ZXVlIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsInhoIiwieWgiLCJ6aCIsIkFoIiwiZGVzdHJveSIsImRlcHMiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJwZW5kaW5nUHJvcHMiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImdpIiwiaGkiLCJwZW5kaW5nQ29udGV4dCIsIm5pIiwicGkiLCJxaSIsImlpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJtaSIsInJpIiwic2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJXZWFrU2V0IiwiU2V0IiwiQ2kiLCJGaSIsIkVpIiwiR2kiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIkhpIiwiSWkiLCJKaSIsImZvY3VzIiwiS2kiLCJMaSIsIkRpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJSaSIsIlNpIiwiVGkiLCJkaXNwbGF5IiwiVWkiLCJWaSIsImFkZCIsInRoZW4iLCJXaSIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJhaiIsImNvbXBvbmVudFN0YWNrIiwiUmoiLCJiaiIsImNlaWwiLCJjaiIsImRqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwidGltZW91dE1zIiwieGoiLCJ5aiIsInpqIiwibGFzdEV4cGlyZWRUaW1lIiwiQWoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIkJqIiwidGltZW91dCIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwidmIiLCJVaiIsIlZqIiwiV2oiLCJoaWRkZW4iLCJkZWZhdWx0Iiwib2IiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIlBvcnRhbCIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixF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R0FBR2xpQixJQUFJcXBCLEdBQUdycEIsSUFBSWpJLEdBQUdpSSxJQUFJeW5CLEdBQUcsaUJBQWtCem5CLEdBQUcsT0FBT0EsSUFBSUEsRUFBRXNwQixXQUFXbnlCLEdBQUc2SSxFQUFFc3BCLFdBQVd2eUIsR0FBR2lKLEVBQUVzcEIsV0FBV3JNLEdBQUdqZCxFQUFFc3BCLFdBQVd2b0IsR0FBR2YsRUFBRXNwQixXQUFXNXhCLEdBQUdzSSxFQUFFc3BCLFdBQVcxQixHQUFHNW5CLEVBQUVzcEIsV0FBVzFhLEdBQUc1TyxFQUFFc3BCLFdBQVd6YSxHQUFHN08sRUFBRXNwQixXQUFXM0IsSUFBSTV4QixFQUFRNjRELE9BQU8vbUMsRyxjQ2RuVTd4QixFQUFPRCxRQUFVLFNBQVM4NEQsR0FDekIsSUFBS0EsRUFBZUMsZ0JBQWlCLENBQ3BDLElBQUk5NEQsRUFBU1csT0FBT1ksT0FBT3MzRCxHQUV0Qjc0RCxFQUFPa1UsV0FBVWxVLEVBQU9rVSxTQUFXLElBQ3hDdlQsT0FBT0MsZUFBZVosRUFBUSxTQUFVLENBQ3ZDYSxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZCxFQUFPRSxLQUdoQlMsT0FBT0MsZUFBZVosRUFBUSxLQUFNLENBQ25DYSxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZCxFQUFPQyxLQUdoQlUsT0FBT0MsZUFBZVosRUFBUSxVQUFXLENBQ3hDYSxZQUFZLElBRWJiLEVBQU84NEQsZ0JBQWtCLEVBRTFCLE9BQU85NEQsSSxjQ3RCUkEsRUFBT0QsUUFBVXVELE1BQU00SSxTQUFXLFNBQVVtZ0IsR0FDMUMsTUFBOEMsa0JBQXZDMXJCLE9BQU9rQixVQUFVaUQsU0FBUzFFLEtBQUtpc0IsSyIsImZpbGUiOiJ2ZW5kb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogVGhpcyBhY3Rpb24gdHlwZSB3aWxsIGJlIGRpc3BhdGNoZWQgd2hlbiB5b3VyIGhpc3RvcnlcbiAqIHJlY2VpdmVzIGEgbG9jYXRpb24gY2hhbmdlLlxuICovXG5leHBvcnQgdmFyIExPQ0FUSU9OX0NIQU5HRSA9ICdAQHJvdXRlci9MT0NBVElPTl9DSEFOR0UnO1xuZXhwb3J0IHZhciBvbkxvY2F0aW9uQ2hhbmdlZCA9IGZ1bmN0aW9uIG9uTG9jYXRpb25DaGFuZ2VkKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgdmFyIGlzRmlyc3RSZW5kZXJpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IExPQ0FUSU9OX0NIQU5HRSxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGlzRmlyc3RSZW5kZXJpbmc6IGlzRmlyc3RSZW5kZXJpbmdcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBUaGlzIGFjdGlvbiB0eXBlIHdpbGwgYmUgZGlzcGF0Y2hlZCBieSB0aGUgaGlzdG9yeSBhY3Rpb25zIGJlbG93LlxuICogSWYgeW91J3JlIHdyaXRpbmcgYSBtaWRkbGV3YXJlIHRvIHdhdGNoIGZvciBuYXZpZ2F0aW9uIGV2ZW50cywgYmUgc3VyZSB0b1xuICogbG9vayBmb3IgYWN0aW9ucyBvZiB0aGlzIHR5cGUuXG4gKi9cblxuZXhwb3J0IHZhciBDQUxMX0hJU1RPUllfTUVUSE9EID0gJ0BAcm91dGVyL0NBTExfSElTVE9SWV9NRVRIT0QnO1xuXG52YXIgdXBkYXRlTG9jYXRpb24gPSBmdW5jdGlvbiB1cGRhdGVMb2NhdGlvbihtZXRob2QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IENBTExfSElTVE9SWV9NRVRIT0QsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBhcmdzOiBhcmdzXG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn07XG4vKipcbiAqIFRoZXNlIGFjdGlvbnMgY29ycmVzcG9uZCB0byB0aGUgaGlzdG9yeSBBUEkuXG4gKiBUaGUgYXNzb2NpYXRlZCByb3V0ZXJNaWRkbGV3YXJlIHdpbGwgY2FwdHVyZSB0aGVzZSBldmVudHMgYmVmb3JlIHRoZXkgZ2V0IHRvXG4gKiB5b3VyIHJlZHVjZXIgYW5kIHJlaXNzdWUgdGhlbSBhcyB0aGUgbWF0Y2hpbmcgZnVuY3Rpb24gb24geW91ciBoaXN0b3J5LlxuICovXG5cblxuZXhwb3J0IHZhciBwdXNoID0gdXBkYXRlTG9jYXRpb24oJ3B1c2gnKTtcbmV4cG9ydCB2YXIgcmVwbGFjZSA9IHVwZGF0ZUxvY2F0aW9uKCdyZXBsYWNlJyk7XG5leHBvcnQgdmFyIGdvID0gdXBkYXRlTG9jYXRpb24oJ2dvJyk7XG5leHBvcnQgdmFyIGdvQmFjayA9IHVwZGF0ZUxvY2F0aW9uKCdnb0JhY2snKTtcbmV4cG9ydCB2YXIgZ29Gb3J3YXJkID0gdXBkYXRlTG9jYXRpb24oJ2dvRm9yd2FyZCcpO1xuZXhwb3J0IHZhciByb3V0ZXJBY3Rpb25zID0ge1xuICBwdXNoOiBwdXNoLFxuICByZXBsYWNlOiByZXBsYWNlLFxuICBnbzogZ28sXG4gIGdvQmFjazogZ29CYWNrLFxuICBnb0ZvcndhcmQ6IGdvRm9yd2FyZFxufTsiLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgUmVhY3RSZWR1eENvbnRleHQgPVxuLyojX19QVVJFX18qL1xuUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RSZWR1eENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge31cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgdmFyIGJhdGNoID0gZ2V0QmF0Y2goKTtcbiAgdmFyIGZpcnN0ID0gbnVsbDtcbiAgdmFyIGxhc3QgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIGZpcnN0ID0gbnVsbDtcbiAgICAgIGxhc3QgPSBudWxsO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICBiYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICAgIGxpc3RlbmVyLmNhbGxiYWNrKCk7XG4gICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxhc3QgPSB7XG4gICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcHJldjogbGFzdFxuICAgICAgfTtcblxuICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJzdCA9IGxpc3RlbmVyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGZpcnN0ID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lci5uZXh0KSB7XG4gICAgICAgICAgbGlzdGVuZXIubmV4dC5wcmV2ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlciA9IHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN1YnNjcmlwdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZE5lc3RlZFN1YiA9IGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAodGhpcy5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBfcHJvdG8udHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcikgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcblxuZnVuY3Rpb24gUHJvdmlkZXIoX3JlZikge1xuICB2YXIgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzO1xuICAgIHJldHVybiB7XG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgIH07XG4gIH0sIFtzdG9yZV0pO1xuICB2YXIgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdG9yZS5nZXRTdGF0ZSgpO1xuICB9LCBbc3RvcmVdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGVmZmVjdEZ1bmMsIGVmZmVjdEFyZ3MsIGRlcGVuZGVuY2llcykge1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZWZmZWN0RnVuYy5hcHBseSh2b2lkIDAsIGVmZmVjdEFyZ3MpO1xuICB9LCBkZXBlbmRlbmNpZXMpO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlV3JhcHBlclByb3BzKGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBhY3R1YWxDaGlsZFByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzKSB7XG4gIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IGZhbHNlOyAvLyBJZiB0aGUgcmVuZGVyIHdhcyBmcm9tIGEgc3RvcmUgdXBkYXRlLCBjbGVhciBvdXQgdGhhdCByZWZlcmVuY2UgYW5kIGNhc2NhZGUgdGhlIHN1YnNjcmliZXIgdXBkYXRlXG5cbiAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCkge1xuICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG51bGw7XG4gICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZVVwZGF0ZXMoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCkge1xuICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICB2YXIgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICB2YXIgY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgdmFyIG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJvciA9IGU7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgIH1cblxuICAgIGlmICghZXJyb3IpIHtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgX2RpZF8gY2hhbmdlIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IpLCB0aGlzIHdyYXBwZXIgY29tcG9uZW50IG5lZWRzIHRvIHJlLXJlbmRlclxuXG4gICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NUT1JFX1VQREFURUQnLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcblxuICAgIGlmIChsYXN0VGhyb3duRXJyb3IpIHtcbiAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBjYXVnaHQgYW4gZXJyb3IgZHVlIHRvIGEgYmFkIG1hcFN0YXRlIGZ1bmN0aW9uLCBidXQgdGhlXG4gICAgICAvLyBwYXJlbnQgcmUtcmVuZGVyZWQgd2l0aG91dCB0aGlzIGNvbXBvbmVudCBhbmQgd2UncmUgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBhcyBsb25nIGFzIHdlIGRvIHRvcC1kb3duIHN1YnNjcmlwdGlvbnMgY29ycmVjdGx5LCBidXRcbiAgICAgIC8vIGlmIHdlIGV2ZXIgZG8gdGhvc2Ugd3JvbmcsIHRoaXMgdGhyb3cgd2lsbCBzdXJmYWNlIHRoZSBlcnJvciBpbiBvdXIgdGVzdHMuXG4gICAgICAvLyBJbiB0aGF0IGNhc2UsIHRocm93IHRoZSBlcnJvciBmcm9tIGhlcmUgc28gaXQgZG9lc24ndCBnZXQgbG9zdC5cbiAgICAgIHRocm93IGxhc3RUaHJvd25FcnJvcjtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlcjtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcclxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xyXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxyXG4gICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xyXG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxyXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXHJcbiAgICB9KSkoWW91ckNvbXBvbmVudClcclxuICAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xyXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xyXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXHJcbiAgICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxyXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cclxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocmVuZGVyQ291bnRQcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh3aXRoUmVmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dpdGhSZWYgaXMgcmVtb3ZlZC4gVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB1c2UgYSByZWYgb24gdGhlIGNvbm5lY3RlZCBjb21wb25lbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG5cbiAgICBpZiAoc3RvcmVLZXkgIT09ICdzdG9yZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIHN0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBwdXJlID0gY29ubmVjdE9wdGlvbnMucHVyZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgIH0gLy8gSWYgd2UgYXJlbid0IHJ1bm5pbmcgaW4gXCJwdXJlXCIgbW9kZSwgd2UgZG9uJ3Qgd2FudCB0byBtZW1vaXplIHZhbHVlcy5cbiAgICAvLyBUbyBhdm9pZCBjb25kaXRpb25hbGx5IGNhbGxpbmcgaG9va3MsIHdlIGZhbGwgYmFjayB0byBhIHRpbnkgd3JhcHBlclxuICAgIC8vIHRoYXQganVzdCBleGVjdXRlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaW1tZWRpYXRlbHkuXG5cblxuICAgIHZhciB1c2VQdXJlT25seU1lbW8gPSBwdXJlID8gdXNlTWVtbyA6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgdmFyIF91c2VNZW1vID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgdmFyIGZvcndhcmRlZFJlZiA9IHByb3BzLmZvcndhcmRlZFJlZixcbiAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJmb3J3YXJkZWRSZWZcIl0pO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgZm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgZm9yd2FyZGVkUmVmID0gX3VzZU1lbW9bMV0sXG4gICAgICAgICAgd3JhcHBlclByb3BzID0gX3VzZU1lbW9bMl07XG5cbiAgICAgIHZhciBDb250ZXh0VG9Vc2UgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVXNlcnMgbWF5IG9wdGlvbmFsbHkgcGFzcyBpbiBhIGN1c3RvbSBjb250ZXh0IGluc3RhbmNlIHRvIHVzZSBpbnN0ZWFkIG9mIG91ciBSZWFjdFJlZHV4Q29udGV4dC5cbiAgICAgICAgLy8gTWVtb2l6ZSB0aGUgY2hlY2sgdGhhdCBkZXRlcm1pbmVzIHdoaWNoIGNvbnRleHQgaW5zdGFuY2Ugd2Ugc2hvdWxkIHVzZS5cbiAgICAgICAgcmV0dXJuIHByb3BzQ29udGV4dCAmJiBwcm9wc0NvbnRleHQuQ29uc3VtZXIgJiYgaXNDb250ZXh0Q29uc3VtZXIoUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFkaWRTdG9yZUNvbWVGcm9tUHJvcHMgJiYgIWRpZFN0b3JlQ29tZUZyb21Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIH0gLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG5cblxuICAgICAgdmFyIHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IG51bGwgOiBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gVGhpcyBjYW5cbiAgICAgICAgLy8gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24ncyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZSAgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cblxuICAgICAgICB2YXIgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF91c2VNZW1vMlswXSxcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzID0gX3VzZU1lbW8yWzFdOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuXG4gICAgICB2YXIgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0sIFtkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZSwgc3Vic2NyaXB0aW9uXSk7IC8vIFdlIG5lZWQgdG8gZm9yY2UgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCB0byByZS1yZW5kZXIgd2hlbmV2ZXIgYSBSZWR1eCBzdG9yZSB1cGRhdGVcbiAgICAgIC8vIGNhdXNlcyBhIGNoYW5nZSB0byB0aGUgY2FsY3VsYXRlZCBjaGlsZCBjb21wb25lbnQgcHJvcHMgKG9yIHdlIGNhdWdodCBhbiBlcnJvciBpbiBtYXBTdGF0ZSlcblxuICAgICAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIsIEVNUFRZX0FSUkFZLCBpbml0U3RhdGVVcGRhdGVzKSxcbiAgICAgICAgICBfdXNlUmVkdWNlciQgPSBfdXNlUmVkdWNlclswXSxcbiAgICAgICAgICBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ID0gX3VzZVJlZHVjZXIkWzBdLFxuICAgICAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2ggPSBfdXNlUmVkdWNlclsxXTsgLy8gUHJvcGFnYXRlIGFueSBtYXBTdGF0ZS9tYXBEaXNwYXRjaCBlcnJvcnMgdXB3YXJkc1xuXG5cbiAgICAgIGlmIChwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ICYmIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcjtcbiAgICAgIH0gLy8gU2V0IHVwIHJlZnMgdG8gY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0aGUgc3Vic2NyaXB0aW9uIGVmZmVjdCBhbmQgdGhlIHJlbmRlciBsb2dpY1xuXG5cbiAgICAgIHZhciBsYXN0Q2hpbGRQcm9wcyA9IHVzZVJlZigpO1xuICAgICAgdmFyIGxhc3RXcmFwcGVyUHJvcHMgPSB1c2VSZWYod3JhcHBlclByb3BzKTtcbiAgICAgIHZhciBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICB2YXIgcmVuZGVySXNTY2hlZHVsZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgdmFyIGFjdHVhbENoaWxkUHJvcHMgPSB1c2VQdXJlT25seU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUcmlja3kgbG9naWMgaGVyZTpcbiAgICAgICAgLy8gLSBUaGlzIHJlbmRlciBtYXkgaGF2ZSBiZWVuIHRyaWdnZXJlZCBieSBhIFJlZHV4IHN0b3JlIHVwZGF0ZSB0aGF0IHByb2R1Y2VkIG5ldyBjaGlsZCBwcm9wc1xuICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbmV3IGNoaWxkIHByb3BzLCBhbmQgdGhlIHNhbWUgd3JhcHBlciBwcm9wcywgd2Uga25vdyB3ZSBzaG91bGQgdXNlIHRoZSBuZXcgY2hpbGQgcHJvcHMgYXMtaXMuXG4gICAgICAgIC8vIEJ1dCwgaWYgd2UgaGF2ZSBuZXcgd3JhcHBlciBwcm9wcywgdGhvc2UgbWlnaHQgY2hhbmdlIHRoZSBjaGlsZCBwcm9wcywgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGluZ3MuXG4gICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQ7XG4gICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgLy8gVGhpcyB3aWxsIGxpa2VseSBjYXVzZSBCYWQgVGhpbmdzIChUTSkgdG8gaGFwcGVuIGluIENvbmN1cnJlbnQgTW9kZS5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvIHRoaXMgYmVjYXVzZSBvbiByZW5kZXJzIF9ub3RfIGNhdXNlZCBieSBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRoZSBsYXRlc3Qgc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3BzU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgd3JhcHBlclByb3BzKTtcbiAgICAgIH0sIFtzdG9yZSwgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoY2FwdHVyZVdyYXBwZXJQcm9wcywgW2xhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBhY3R1YWxDaGlsZFByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzXSk7IC8vIE91ciByZS1zdWJzY3JpYmUgbG9naWMgb25seSBydW5zIHdoZW4gdGhlIHN0b3JlL3N1YnNjcmlwdGlvbiBzZXR1cCBjaGFuZ2VzXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhzdWJzY3JpYmVVcGRhdGVzLCBbc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaF0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3JdKTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIHZhciByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbZm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIGZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cblxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn0gLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vL1xuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vL1xuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCB7fSwgc3RhdGVQcm9wcywge30sIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxyXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXHJcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcclxuXHJcbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcclxuICBcclxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xyXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxyXG5cclxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcclxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxyXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXHJcblxyXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cclxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHRcbi8qI19fUFVSRV9fKi9cbmNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgLiBUaGlzIGlzIGEgbG93LWxldmVsXHJcbiAqIGhvb2sgdGhhdCB5b3Ugc2hvdWxkIHVzdWFsbHkgbm90IG5lZWQgdG8gY2FsbCBkaXJlY3RseS5cclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xyXG4gKiAgIGNvbnN0IHsgc3RvcmUgfSA9IHVzZVJlZHV4Q29udGV4dCgpXHJcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1eENvbnRleHQoKSB7XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KFJlYWN0UmVkdXhDb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29udGV4dFZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgZmluZCByZWFjdC1yZWR1eCBjb250ZXh0IHZhbHVlOyBwbGVhc2UgZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgd3JhcHBlZCBpbiBhIDxQcm92aWRlcj4nKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0VmFsdWU7XG59IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVN0b3JlKCkge1xuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZTtcblxuICAgIHJldHVybiBzdG9yZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZS5cclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHJlZHV4IHN0b3JlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IEV4YW1wbGVDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXHJcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlU3RvcmUgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VTdG9yZSA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgdmFyIHN0b3JlID0gdXNlU3RvcmUoKTtcbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcclxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXHJcbiAqICAgcmV0dXJuIChcclxuICogICAgIDxkaXY+XHJcbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XHJcbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XHJcbiAqICAgICA8L2Rpdj5cclxuICogICApXHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlRGlzcGF0Y2ggPVxuLyojX19QVVJFX18qL1xuY3JlYXRlRGlzcGF0Y2hIb29rKCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnIubWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcblwiO1xuICAgIH1cblxuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChzdG9yZS5nZXRTdGF0ZSgpKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcih7fSk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcnNcIik7XG4gICAgfVxuXG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgICByZXR1cm4gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBhcyBhbiBhcmd1bWVudC4gVGhlIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBzdG9yZSBzdGF0ZS5cclxuICpcclxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcclxuICogdGhhdCBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgd2F5IHRoZSBzZWxlY3RlZCBzdGF0ZSBpcyBjb21wYXJlZCB0byBkZXRlcm1pbmVcclxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgc2VsZWN0ZWQgc3RhdGVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcclxuICogICByZXR1cm4gPGRpdj57Y291bnRlcn08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VTZWxlY3RvciA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTZWxlY3Rvckhvb2soKTsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQkMSA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQkMShcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoaGlzdG9yeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5oaXN0b3J5XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGhpc3RvcnlDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG4gIHJldHVybiBjb21tb25qc0dsb2JhbFtrZXldID0gKGNvbW1vbmpzR2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufVxuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBnZXRVbmlxdWVJZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxuXG5pbXBvcnQgeyBDQUxMX0hJU1RPUllfTUVUSE9EIH0gZnJvbSAnLi9hY3Rpb25zJztcbi8qKlxuICogVGhpcyBtaWRkbGV3YXJlIGNhcHR1cmVzIENBTExfSElTVE9SWV9NRVRIT0QgYWN0aW9ucyB0byByZWRpcmVjdCB0byB0aGVcbiAqIHByb3ZpZGVkIGhpc3Rvcnkgb2JqZWN0LiBUaGlzIHdpbGwgcHJldmVudCB0aGVzZSBhY3Rpb25zIGZyb20gcmVhY2hpbmcgeW91clxuICogcmVkdWNlciBvciBhbnkgbWlkZGxld2FyZSB0aGF0IGNvbWVzIGFmdGVyIHRoaXMgb25lLlxuICovXG5cbnZhciByb3V0ZXJNaWRkbGV3YXJlID0gZnVuY3Rpb24gcm91dGVyTWlkZGxld2FyZShoaXN0b3J5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSBDQUxMX0hJU1RPUllfTUVUSE9EKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfYWN0aW9uJHBheWxvYWQgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgICAgIG1ldGhvZCA9IF9hY3Rpb24kcGF5bG9hZC5tZXRob2QsXG4gICAgICAgICAgICBhcmdzID0gX2FjdGlvbiRwYXlsb2FkLmFyZ3M7XG4gICAgICAgIGhpc3RvcnlbbWV0aG9kXS5hcHBseShoaXN0b3J5LCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyTWlkZGxld2FyZTsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCB7IG1hdGNoUGF0aCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcblxudmFyIGNyZWF0ZVNlbGVjdG9ycyA9IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ycyhzdHJ1Y3R1cmUpIHtcbiAgdmFyIGdldEluID0gc3RydWN0dXJlLmdldEluLFxuICAgICAgdG9KUyA9IHN0cnVjdHVyZS50b0pTO1xuXG4gIHZhciBpc1JvdXRlciA9IGZ1bmN0aW9uIGlzUm91dGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIGdldEluKHZhbHVlLCBbJ2xvY2F0aW9uJ10pICYmIGdldEluKHZhbHVlLCBbJ2FjdGlvbiddKTtcbiAgfTtcblxuICB2YXIgZ2V0Um91dGVyID0gZnVuY3Rpb24gZ2V0Um91dGVyKHN0YXRlKSB7XG4gICAgdmFyIHJvdXRlciA9IHRvSlMoZ2V0SW4oc3RhdGUsIFsncm91dGVyJ10pKTtcblxuICAgIGlmICghaXNSb3V0ZXIocm91dGVyKSkge1xuICAgICAgdGhyb3cgJ0NvdWxkIG5vdCBmaW5kIHJvdXRlciByZWR1Y2VyIGluIHN0YXRlIHRyZWUsIGl0IG11c3QgYmUgbW91bnRlZCB1bmRlciBcInJvdXRlclwiJztcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9O1xuXG4gIHZhciBnZXRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldExvY2F0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRvSlMoZ2V0SW4oZ2V0Um91dGVyKHN0YXRlKSwgWydsb2NhdGlvbiddKSk7XG4gIH07XG5cbiAgdmFyIGdldEFjdGlvbiA9IGZ1bmN0aW9uIGdldEFjdGlvbihzdGF0ZSkge1xuICAgIHJldHVybiB0b0pTKGdldEluKGdldFJvdXRlcihzdGF0ZSksIFsnYWN0aW9uJ10pKTtcbiAgfTtcblxuICB2YXIgZ2V0U2VhcmNoID0gZnVuY3Rpb24gZ2V0U2VhcmNoKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRvSlMoZ2V0SW4oZ2V0Um91dGVyKHN0YXRlKSwgWydsb2NhdGlvbicsICdzZWFyY2gnXSkpO1xuICB9O1xuXG4gIHZhciBnZXRIYXNoID0gZnVuY3Rpb24gZ2V0SGFzaChzdGF0ZSkge1xuICAgIHJldHVybiB0b0pTKGdldEluKGdldFJvdXRlcihzdGF0ZSksIFsnbG9jYXRpb24nLCAnaGFzaCddKSk7XG4gIH07IC8vIEl0IG9ubHkgbWFrZXMgc2Vuc2UgdG8gcmVjYWxjdWxhdGUgdGhlIGBtYXRjaFBhdGhgIHdoZW5ldmVyIHRoZSBwYXRobmFtZVxuICAvLyBvZiB0aGUgbG9jYXRpb24gY2hhbmdlcy4gVGhhdCdzIHdoeSBgY3JlYXRlTWF0Y2hTZWxlY3RvcmAgbWVtb2l6ZXNcbiAgLy8gdGhlIGxhdGVzdCByZXN1bHQgYmFzZWQgb24gdGhlIGxvY2F0aW9uJ3MgcGF0aG5hbWUuXG5cblxuICB2YXIgY3JlYXRlTWF0Y2hTZWxlY3RvciA9IGZ1bmN0aW9uIGNyZWF0ZU1hdGNoU2VsZWN0b3IocGF0aCkge1xuICAgIHZhciBsYXN0UGF0aG5hbWUgPSBudWxsO1xuICAgIHZhciBsYXN0TWF0Y2ggPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIHZhciBfcmVmID0gZ2V0TG9jYXRpb24oc3RhdGUpIHx8IHt9LFxuICAgICAgICAgIHBhdGhuYW1lID0gX3JlZi5wYXRobmFtZTtcblxuICAgICAgaWYgKHBhdGhuYW1lID09PSBsYXN0UGF0aG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGxhc3RNYXRjaDtcbiAgICAgIH1cblxuICAgICAgbGFzdFBhdGhuYW1lID0gcGF0aG5hbWU7XG4gICAgICB2YXIgbWF0Y2ggPSBtYXRjaFBhdGgocGF0aG5hbWUsIHBhdGgpO1xuXG4gICAgICBpZiAoIW1hdGNoIHx8ICFsYXN0TWF0Y2ggfHwgbWF0Y2gudXJsICE9PSBsYXN0TWF0Y2gudXJsIC8vIFdoZW4gVVJMIG1hdGNoZWQgZm9yIG5lc3RlZCByb3V0ZXMsIFVSTCBpcyB0aGUgc2FtZSBidXQgaXNFeGFjdCBpcyBub3QuXG4gICAgICB8fCBtYXRjaC5pc0V4YWN0ICE9PSBsYXN0TWF0Y2guaXNFeGFjdCkge1xuICAgICAgICBsYXN0TWF0Y2ggPSBtYXRjaDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxhc3RNYXRjaDtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgZ2V0TG9jYXRpb246IGdldExvY2F0aW9uLFxuICAgIGdldEFjdGlvbjogZ2V0QWN0aW9uLFxuICAgIGdldFJvdXRlcjogZ2V0Um91dGVyLFxuICAgIGdldFNlYXJjaDogZ2V0U2VhcmNoLFxuICAgIGdldEhhc2g6IGdldEhhc2gsXG4gICAgY3JlYXRlTWF0Y2hTZWxlY3RvcjogY3JlYXRlTWF0Y2hTZWxlY3RvclxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2VsZWN0b3JzOyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QsIFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IG9uTG9jYXRpb25DaGFuZ2VkIGFzIF9vbkxvY2F0aW9uQ2hhbmdlZCB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgY3JlYXRlU2VsZWN0b3JzIGZyb20gJy4vc2VsZWN0b3JzJztcblxudmFyIGNyZWF0ZUNvbm5lY3RlZFJvdXRlciA9IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3RlZFJvdXRlcihzdHJ1Y3R1cmUpIHtcbiAgdmFyIF9jcmVhdGVTZWxlY3RvcnMgPSBjcmVhdGVTZWxlY3RvcnMoc3RydWN0dXJlKSxcbiAgICAgIGdldExvY2F0aW9uID0gX2NyZWF0ZVNlbGVjdG9ycy5nZXRMb2NhdGlvbjtcbiAgLypcbiAgICogQ29ubmVjdGVkUm91dGVyIGxpc3RlbnMgdG8gYSBoaXN0b3J5IG9iamVjdCBwYXNzZWQgZnJvbSBwcm9wcy5cbiAgICogV2hlbiBoaXN0b3J5IGlzIGNoYW5nZWQsIGl0IGRpc3BhdGNoZXMgYWN0aW9uIHRvIHJlZHV4IHN0b3JlLlxuICAgKiBUaGVuLCBzdG9yZSB3aWxsIHBhc3MgcHJvcHMgdG8gY29tcG9uZW50IHRvIHJlbmRlci5cbiAgICogVGhpcyBjcmVhdGVzIHVuaS1kaXJlY3Rpb25hbCBmbG93IGZyb20gaGlzdG9yeS0+c3RvcmUtPnJvdXRlci0+Y29tcG9uZW50cy5cbiAgICovXG5cblxuICB2YXIgQ29ubmVjdGVkUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhDb25uZWN0ZWRSb3V0ZXIsIF9QdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RlZFJvdXRlcihwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdGVkUm91dGVyKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ29ubmVjdGVkUm91dGVyKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gICAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZSxcbiAgICAgICAgICBoaXN0b3J5ID0gcHJvcHMuaGlzdG9yeSxcbiAgICAgICAgICBvbkxvY2F0aW9uQ2hhbmdlZCA9IHByb3BzLm9uTG9jYXRpb25DaGFuZ2VkO1xuICAgICAgX3RoaXMuaW5UaW1lVHJhdmVsbGluZyA9IGZhbHNlOyAvLyBTdWJzY3JpYmUgdG8gc3RvcmUgY2hhbmdlcyB0byBjaGVjayBpZiB3ZSBhcmUgaW4gdGltZSB0cmF2ZWxsaW5nXG5cbiAgICAgIF90aGlzLnVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRXh0cmFjdCBzdG9yZSdzIGxvY2F0aW9uXG4gICAgICAgIHZhciBfZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbihzdG9yZS5nZXRTdGF0ZSgpKSxcbiAgICAgICAgICAgIHBhdGhuYW1lSW5TdG9yZSA9IF9nZXRMb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICAgIHNlYXJjaEluU3RvcmUgPSBfZ2V0TG9jYXRpb24uc2VhcmNoLFxuICAgICAgICAgICAgaGFzaEluU3RvcmUgPSBfZ2V0TG9jYXRpb24uaGFzaCxcbiAgICAgICAgICAgIHN0YXRlSW5TdG9yZSA9IF9nZXRMb2NhdGlvbi5zdGF0ZTsgLy8gRXh0cmFjdCBoaXN0b3J5J3MgbG9jYXRpb25cblxuXG4gICAgICAgIHZhciBfaGlzdG9yeSRsb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgICBwYXRobmFtZUluSGlzdG9yeSA9IF9oaXN0b3J5JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgICAgc2VhcmNoSW5IaXN0b3J5ID0gX2hpc3RvcnkkbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICAgICAgaGFzaEluSGlzdG9yeSA9IF9oaXN0b3J5JGxvY2F0aW9uLmhhc2gsXG4gICAgICAgICAgICBzdGF0ZUluSGlzdG9yeSA9IF9oaXN0b3J5JGxvY2F0aW9uLnN0YXRlOyAvLyBJZiB3ZSBkbyB0aW1lIHRyYXZlbGxpbmcsIHRoZSBsb2NhdGlvbiBpbiBzdG9yZSBpcyBjaGFuZ2VkIGJ1dCBsb2NhdGlvbiBpbiBoaXN0b3J5IGlzIG5vdCBjaGFuZ2VkXG5cbiAgICAgICAgaWYgKHByb3BzLmhpc3RvcnkuYWN0aW9uID09PSAnUFVTSCcgJiYgKHBhdGhuYW1lSW5IaXN0b3J5ICE9PSBwYXRobmFtZUluU3RvcmUgfHwgc2VhcmNoSW5IaXN0b3J5ICE9PSBzZWFyY2hJblN0b3JlIHx8IGhhc2hJbkhpc3RvcnkgIT09IGhhc2hJblN0b3JlIHx8IHN0YXRlSW5TdG9yZSAhPT0gc3RhdGVJbkhpc3RvcnkpKSB7XG4gICAgICAgICAgX3RoaXMuaW5UaW1lVHJhdmVsbGluZyA9IHRydWU7IC8vIFVwZGF0ZSBoaXN0b3J5J3MgbG9jYXRpb24gdG8gbWF0Y2ggc3RvcmUncyBsb2NhdGlvblxuXG4gICAgICAgICAgaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBwYXRobmFtZUluU3RvcmUsXG4gICAgICAgICAgICBzZWFyY2g6IHNlYXJjaEluU3RvcmUsXG4gICAgICAgICAgICBoYXNoOiBoYXNoSW5TdG9yZSxcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZUluU3RvcmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBoYW5kbGVMb2NhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvY2F0aW9uQ2hhbmdlKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICAgICAgdmFyIGlzRmlyc3RSZW5kZXJpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gICAgICAgIC8vIERpc3BhdGNoIG9uTG9jYXRpb25DaGFuZ2VkIGV4Y2VwdCB3aGVuIHdlJ3JlIGluIHRpbWUgdHJhdmVsbGluZ1xuICAgICAgICBpZiAoIV90aGlzLmluVGltZVRyYXZlbGxpbmcpIHtcbiAgICAgICAgICBvbkxvY2F0aW9uQ2hhbmdlZChsb2NhdGlvbiwgYWN0aW9uLCBpc0ZpcnN0UmVuZGVyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5pblRpbWVUcmF2ZWxsaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIExpc3RlbiB0byBoaXN0b3J5IGNoYW5nZXNcblxuXG4gICAgICBfdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGhhbmRsZUxvY2F0aW9uQ2hhbmdlKTtcblxuICAgICAgaWYgKCFwcm9wcy5ub0luaXRpYWxQb3ApIHtcbiAgICAgICAgLy8gRGlzcGF0Y2ggYSBsb2NhdGlvbiBjaGFuZ2UgYWN0aW9uIGZvciB0aGUgaW5pdGlhbCBsb2NhdGlvbi5cbiAgICAgICAgLy8gVGhpcyBtYWtlcyBpdCBiYWNrd2FyZC1jb21wYXRpYmxlIHdpdGggcmVhY3Qtcm91dGVyLXJlZHV4LlxuICAgICAgICAvLyBCdXQsIHdlIGFkZCBgaXNGaXJzdFJlbmRlcmluZ2AgdG8gYHRydWVgIHRvIHByZXZlbnQgZG91YmxlLXJlbmRlcmluZy5cbiAgICAgICAgaGFuZGxlTG9jYXRpb25DaGFuZ2UoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24sIHRydWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENvbm5lY3RlZFJvdXRlciwgW3tcbiAgICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnVubGlzdGVuKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgaGlzdG9yeSA9IF90aGlzJHByb3BzLmhpc3RvcnksXG4gICAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgICAgICBoaXN0b3J5OiBoaXN0b3J5XG4gICAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29ubmVjdGVkUm91dGVyO1xuICB9KFB1cmVDb21wb25lbnQpO1xuXG4gIENvbm5lY3RlZFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGFjdGlvbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgbGlzdGVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBvbkxvY2F0aW9uQ2hhbmdlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBub0luaXRpYWxQb3A6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkxvY2F0aW9uQ2hhbmdlZDogZnVuY3Rpb24gb25Mb2NhdGlvbkNoYW5nZWQobG9jYXRpb24sIGFjdGlvbiwgaXNGaXJzdFJlbmRlcmluZykge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goX29uTG9jYXRpb25DaGFuZ2VkKGxvY2F0aW9uLCBhY3Rpb24sIGlzRmlyc3RSZW5kZXJpbmcpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBDb25uZWN0ZWRSb3V0ZXJXaXRoQ29udGV4dCA9IGZ1bmN0aW9uIENvbm5lY3RlZFJvdXRlcldpdGhDb250ZXh0KHByb3BzKSB7XG4gICAgdmFyIENvbnRleHQgPSBwcm9wcy5jb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuXG4gICAgaWYgKENvbnRleHQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgJ1BsZWFzZSB1cGdyYWRlIHRvIHJlYWN0LXJlZHV4IHY2JztcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3RlZFJvdXRlciwgX2V4dGVuZHMoe1xuICAgICAgICBzdG9yZTogc3RvcmVcbiAgICAgIH0sIHByb3BzKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQ29ubmVjdGVkUm91dGVyV2l0aENvbnRleHQucHJvcFR5cGVzID0ge1xuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcbiAgcmV0dXJuIGNvbm5lY3QobnVsbCwgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb25uZWN0ZWRSb3V0ZXJXaXRoQ29udGV4dCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0ZWRSb3V0ZXI7IiwiZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpKSB7IHJldHVybjsgfSB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBMT0NBVElPTl9DSEFOR0UgfSBmcm9tICcuL2FjdGlvbnMnO1xuLyoqXG4gKiBBZGRzIHF1ZXJ5IHRvIGxvY2F0aW9uLlxuICogVXRpbGlzZXMgdGhlIHNlYXJjaCBwcm9wIG9mIGxvY2F0aW9uIHRvIGNvbnN0cnVjdCBxdWVyeS5cbiAqL1xuXG52YXIgaW5qZWN0UXVlcnkgPSBmdW5jdGlvbiBpbmplY3RRdWVyeShsb2NhdGlvbikge1xuICBpZiAobG9jYXRpb24gJiYgbG9jYXRpb24ucXVlcnkpIHtcbiAgICAvLyBEb24ndCBpbmplY3QgcXVlcnkgaWYgaXQgYWxyZWFkeSBleGlzdHMgaW4gaGlzdG9yeVxuICAgIHJldHVybiBsb2NhdGlvbjtcbiAgfVxuXG4gIHZhciBzZWFyY2hRdWVyeSA9IGxvY2F0aW9uICYmIGxvY2F0aW9uLnNlYXJjaDtcblxuICBpZiAodHlwZW9mIHNlYXJjaFF1ZXJ5ICE9PSAnc3RyaW5nJyB8fCBzZWFyY2hRdWVyeS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgbG9jYXRpb24sIHtcbiAgICAgIHF1ZXJ5OiB7fVxuICAgIH0pO1xuICB9IC8vIElnbm9yZSB0aGUgYD9gIHBhcnQgb2YgdGhlIHNlYXJjaCBzdHJpbmcgZS5nLiA/dXNlcm5hbWU9Y29kZWpvY2tpZVxuXG5cbiAgdmFyIHNlYXJjaCA9IHNlYXJjaFF1ZXJ5LnN1YnN0cmluZygxKTsgLy8gU3BsaXQgdGhlIHF1ZXJ5IHN0cmluZyBvbiBgJmAgZS5nLiA/dXNlcm5hbWU9Y29kZWpvY2tpZSZuYW1lPUtlbm5lZHlcblxuICB2YXIgcXVlcmllcyA9IHNlYXJjaC5zcGxpdCgnJicpOyAvLyBDb250cnVjdCBxdWVyeVxuXG4gIHZhciBxdWVyeSA9IHF1ZXJpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnJlbnRRdWVyeSkge1xuICAgIC8vIFNwbGl0IG9uIGA9YCwgdG8gZ2V0IGtleSBhbmQgdmFsdWVcbiAgICB2YXIgX2N1cnJlbnRRdWVyeSRzcGxpdCA9IGN1cnJlbnRRdWVyeS5zcGxpdCgnPScpLFxuICAgICAgICBfY3VycmVudFF1ZXJ5JHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9jdXJyZW50UXVlcnkkc3BsaXQsIDIpLFxuICAgICAgICBxdWVyeUtleSA9IF9jdXJyZW50UXVlcnkkc3BsaXQyWzBdLFxuICAgICAgICBxdWVyeVZhbHVlID0gX2N1cnJlbnRRdWVyeSRzcGxpdDJbMV07XG5cbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYWNjLCBfZGVmaW5lUHJvcGVydHkoe30sIHF1ZXJ5S2V5LCBxdWVyeVZhbHVlKSk7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGxvY2F0aW9uLCB7XG4gICAgcXVlcnk6IHF1ZXJ5XG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZUNvbm5lY3RSb3V0ZXIgPSBmdW5jdGlvbiBjcmVhdGVDb25uZWN0Um91dGVyKHN0cnVjdHVyZSkge1xuICB2YXIgZnJvbUpTID0gc3RydWN0dXJlLmZyb21KUyxcbiAgICAgIG1lcmdlID0gc3RydWN0dXJlLm1lcmdlO1xuXG4gIHZhciBjcmVhdGVSb3V0ZXJSZWR1Y2VyID0gZnVuY3Rpb24gY3JlYXRlUm91dGVyUmVkdWNlcihoaXN0b3J5KSB7XG4gICAgdmFyIGluaXRpYWxSb3V0ZXJTdGF0ZSA9IGZyb21KUyh7XG4gICAgICBsb2NhdGlvbjogaW5qZWN0UXVlcnkoaGlzdG9yeS5sb2NhdGlvbiksXG4gICAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uXG4gICAgfSk7XG4gICAgLypcbiAgICAqIFRoaXMgcmVkdWNlciB3aWxsIHVwZGF0ZSB0aGUgc3RhdGUgd2l0aCB0aGUgbW9zdCByZWNlbnQgbG9jYXRpb24gaGlzdG9yeVxuICAgICogaGFzIHRyYW5zaXRpb25lZCB0by5cbiAgICAqL1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogaW5pdGlhbFJvdXRlclN0YXRlO1xuXG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgICAgICBwYXlsb2FkID0gX3JlZi5wYXlsb2FkO1xuXG4gICAgICBpZiAodHlwZSA9PT0gTE9DQVRJT05fQ0hBTkdFKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHBheWxvYWQubG9jYXRpb24sXG4gICAgICAgICAgICBhY3Rpb24gPSBwYXlsb2FkLmFjdGlvbixcbiAgICAgICAgICAgIGlzRmlyc3RSZW5kZXJpbmcgPSBwYXlsb2FkLmlzRmlyc3RSZW5kZXJpbmc7IC8vIERvbid0IHVwZGF0ZSB0aGUgc3RhdGUgcmVmIGZvciB0aGUgZmlyc3QgcmVuZGVyaW5nXG4gICAgICAgIC8vIHRvIHByZXZlbnQgdGhlIGRvdWJsZS1yZW5kZXJpbmcgaXNzdWUgb24gaW5pdGlsaXphdGlvblxuXG4gICAgICAgIHJldHVybiBpc0ZpcnN0UmVuZGVyaW5nID8gc3RhdGUgOiBtZXJnZShzdGF0ZSwge1xuICAgICAgICAgIGxvY2F0aW9uOiBmcm9tSlMoaW5qZWN0UXVlcnkobG9jYXRpb24pKSxcbiAgICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIGNyZWF0ZVJvdXRlclJlZHVjZXI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0Um91dGVyOyIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgZ2V0SW4gZnJvbSAnLi9nZXRJbic7XG52YXIgc3RydWN0dXJlID0ge1xuICBmcm9tSlM6IGZ1bmN0aW9uIGZyb21KUyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgZ2V0SW46IGdldEluLFxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2Uoc3RhdGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHt9LCBwYXlsb2FkKTtcbiAgfSxcbiAgdG9KUzogZnVuY3Rpb24gdG9KUyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHN0cnVjdHVyZTsiLCIvKiBDb2RlIGZyb20gZ2l0aHViLmNvbS9lcmlrcmFzL3JlZHV4LWZvcm0gYnkgRXJpayBSYXNtdXNzZW4gKi9cbnZhciBnZXRJbiA9IGZ1bmN0aW9uIGdldEluKHN0YXRlLCBwYXRoKSB7XG4gIGlmICghc3RhdGUpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHN0YXRlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoICYmICEhcmVzdWx0OyArK2kpIHtcbiAgICByZXN1bHQgPSByZXN1bHRbcGF0aFtpXV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0SW47IiwiaW1wb3J0IGNyZWF0ZUNvbm5lY3RlZFJvdXRlciBmcm9tIFwiLi9Db25uZWN0ZWRSb3V0ZXJcIjtcbmltcG9ydCBjcmVhdGVDb25uZWN0Um91dGVyIGZyb20gXCIuL3JlZHVjZXJcIjtcbmltcG9ydCBjcmVhdGVTZWxlY3RvcnMgZnJvbSBcIi4vc2VsZWN0b3JzXCI7XG5pbXBvcnQgcGxhaW5TdHJ1Y3R1cmUgZnJvbSBcIi4vc3RydWN0dXJlL3BsYWluXCI7XG5leHBvcnQgeyBMT0NBVElPTl9DSEFOR0UsIENBTExfSElTVE9SWV9NRVRIT0QsIG9uTG9jYXRpb25DaGFuZ2VkLCBwdXNoLCByZXBsYWNlLCBnbywgZ29CYWNrLCBnb0ZvcndhcmQsIHJvdXRlckFjdGlvbnMgfSBmcm9tIFwiLi9hY3Rpb25zXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJvdXRlck1pZGRsZXdhcmUgfSBmcm9tIFwiLi9taWRkbGV3YXJlXCI7XG5leHBvcnQgdmFyIENvbm5lY3RlZFJvdXRlciA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb25uZWN0ZWRSb3V0ZXIocGxhaW5TdHJ1Y3R1cmUpO1xuZXhwb3J0IHZhciBjb25uZWN0Um91dGVyID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbm5lY3RSb3V0ZXIocGxhaW5TdHJ1Y3R1cmUpO1xuXG52YXIgX2NyZWF0ZVNlbGVjdG9ycyA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3RvcnMocGxhaW5TdHJ1Y3R1cmUpLFxuICAgIGdldExvY2F0aW9uID0gX2NyZWF0ZVNlbGVjdG9ycy5nZXRMb2NhdGlvbixcbiAgICBnZXRBY3Rpb24gPSBfY3JlYXRlU2VsZWN0b3JzLmdldEFjdGlvbixcbiAgICBnZXRIYXNoID0gX2NyZWF0ZVNlbGVjdG9ycy5nZXRIYXNoLFxuICAgIGdldFNlYXJjaCA9IF9jcmVhdGVTZWxlY3RvcnMuZ2V0U2VhcmNoLFxuICAgIGNyZWF0ZU1hdGNoU2VsZWN0b3IgPSBfY3JlYXRlU2VsZWN0b3JzLmNyZWF0ZU1hdGNoU2VsZWN0b3I7XG5cbmV4cG9ydCB7IGdldExvY2F0aW9uLCBnZXRBY3Rpb24sIGdldEhhc2gsIGdldFNlYXJjaCwgY3JlYXRlTWF0Y2hTZWxlY3RvciB9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTtcbmZ1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxrKXtkYT0hMTtlYT1udWxsO2JhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBsPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO2ZhfHwoZmE9ITAsaGE9bCl9fXZhciBsYT1udWxsLG1hPW51bGwsbmE9bnVsbDtcbmZ1bmN0aW9uIG9hKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1uYShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfXZhciBwYT1udWxsLHFhPXt9O1xuZnVuY3Rpb24gcmEoKXtpZihwYSlmb3IodmFyIGEgaW4gcWEpe3ZhciBiPXFhW2FdLGM9cGEuaW5kZXhPZihhKTtpZighKC0xPGMpKXRocm93IEVycm9yKHUoOTYsYSkpO2lmKCFzYVtjXSl7aWYoIWIuZXh0cmFjdEV2ZW50cyl0aHJvdyBFcnJvcih1KDk3LGEpKTtzYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO2lmKHRhLmhhc093blByb3BlcnR5KGgpKXRocm93IEVycm9yKHUoOTksaCkpO3RhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnVhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh1YShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2lmKCFlKXRocm93IEVycm9yKHUoOTgsZCxhKSk7fX19fVxuZnVuY3Rpb24gdWEoYSxiLGMpe2lmKHZhW2FdKXRocm93IEVycm9yKHUoMTAwLGEpKTt2YVthXT1iO3dhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHNhPVtdLHRhPXt9LHZhPXt9LHdhPXt9O2Z1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFxYS5oYXNPd25Qcm9wZXJ0eShjKXx8cWFbY10hPT1kKXtpZihxYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7cWFbY109ZDtiPSEwfX1iJiZyYSgpfXZhciB5YT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksemE9bnVsbCxBYT1udWxsLEJhPW51bGw7XG5mdW5jdGlvbiBDYShhKXtpZihhPW1hKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgemEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1sYShiKSx6YShhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYShhKXtBYT9CYT9CYS5wdXNoKGEpOkJhPVthXTpBYT1hfWZ1bmN0aW9uIEVhKCl7aWYoQWEpe3ZhciBhPUFhLGI9QmE7QmE9QWE9bnVsbDtDYShhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQ2EoYlthXSl9fWZ1bmN0aW9uIEZhKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2EoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBIYSgpe312YXIgSWE9RmEsSmE9ITEsS2E9ITE7ZnVuY3Rpb24gTGEoKXtpZihudWxsIT09QWF8fG51bGwhPT1CYSlIYSgpLEVhKCl9XG5mdW5jdGlvbiBNYShhLGIsYyl7aWYoS2EpcmV0dXJuIGEoYixjKTtLYT0hMDt0cnl7cmV0dXJuIElhKGEsYixjKX1maW5hbGx5e0thPSExLExhKCl9fXZhciBOYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sT2E9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxQYT17fSxRYT17fTtcbmZ1bmN0aW9uIFJhKGEpe2lmKE9hLmNhbGwoUWEsYSkpcmV0dXJuITA7aWYoT2EuY2FsbChQYSxhKSlyZXR1cm4hMTtpZihOYS50ZXN0KGEpKXJldHVybiBRYVthXT0hMDtQYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBTYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFRhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fFNhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEM9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07Q1tiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIFVhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsXG5WYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5DLnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7dmFyIFdhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWdcIil8fChXYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO1xuZnVuY3Rpb24gWGEoYSxiLGMsZCl7dmFyIGU9Qy5oYXNPd25Qcm9wZXJ0eShiKT9DW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoVGEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP1JhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgWWE9L14oLiopW1xcXFxcXC9dLyxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmE9RT9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2I9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGI9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2I9RT9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLGpiPUU/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsa2I9RT9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixsYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSxtYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbmIoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPW1iJiZhW21iXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIG9iKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gcGIoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2I6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYjpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYjpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYjpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2I6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpiOnJldHVybiBwYihhLnR5cGUpO2Nhc2UgbGI6cmV0dXJuIHBiKGEucmVuZGVyKTtjYXNlIGtiOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gcGIoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcWIoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPXBiKGEudHlwZSk7Yz1udWxsO2QmJihjPXBiKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoWWEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHJiKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBzYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gdGIoYSl7dmFyIGI9c2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHhiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj10YihhKSl9ZnVuY3Rpb24geWIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXNiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gemIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9cmIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlhhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYihhLGIpe0JiKGEsYik7dmFyIGM9cmIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGIoYSxiLnR5cGUscmIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRGIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIEZiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdiKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3JiKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IodSg5MSkpO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHUoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih1KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6cmIoYyl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1yYihiLnZhbHVlKSxkPXJiKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTGIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgTWI9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGIsUWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TWIuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UGI9UGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gUmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBTYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYj17YW5pbWF0aW9uZW5kOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2IoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYj17fSxWYj17fTtcbnlhJiYoVmI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYihhKXtpZihVYlthXSlyZXR1cm4gVWJbYV07aWYoIVRiW2FdKXJldHVybiBhO3ZhciBiPVRiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZiKXJldHVybiBVYlthXT1iW2NdO3JldHVybiBhfVxudmFyIFhiPVdiKFwiYW5pbWF0aW9uZW5kXCIpLFliPVdiKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFpiPVdiKFwiYW5pbWF0aW9uc3RhcnRcIiksJGI9V2IoXCJ0cmFuc2l0aW9uZW5kXCIpLGFjPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYz1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiBjYyhhKXt2YXIgYj1iYy5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IE1hcCxiYy5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBlYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGZjKGEpe2lmKGRjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGdjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWRjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGZjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGZjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGMoYSl7YT1nYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGljKGEsYil7aWYobnVsbD09Yil0aHJvdyBFcnJvcih1KDMwKSk7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIGpjKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBrYz1udWxsO1xuZnVuY3Rpb24gbGMoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKW9hKGEsYltkXSxjW2RdKTtlbHNlIGImJm9hKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBtYyhhKXtudWxsIT09YSYmKGtjPWljKGtjLGEpKTthPWtjO2tjPW51bGw7aWYoYSl7amMoYSxsYyk7aWYoa2MpdGhyb3cgRXJyb3IodSg5NSkpO2lmKGZhKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO319XG5mdW5jdGlvbiBuYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gb2MoYSl7aWYoIXlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBwYz1bXTtmdW5jdGlvbiBxYyhhKXthLnRvcExldmVsVHlwZT1udWxsO2EubmF0aXZlRXZlbnQ9bnVsbDthLnRhcmdldEluc3Q9bnVsbDthLmFuY2VzdG9ycy5sZW5ndGg9MDsxMD5wYy5sZW5ndGgmJnBjLnB1c2goYSl9XG5mdW5jdGlvbiByYyhhLGIsYyxkKXtpZihwYy5sZW5ndGgpe3ZhciBlPXBjLnBvcCgpO2UudG9wTGV2ZWxUeXBlPWE7ZS5ldmVudFN5c3RlbUZsYWdzPWQ7ZS5uYXRpdmVFdmVudD1iO2UudGFyZ2V0SW5zdD1jO3JldHVybiBlfXJldHVybnt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfX1cbmZ1bmN0aW9uIHNjKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ9YztpZigzPT09ZC50YWcpZD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Vsc2V7Zm9yKDtkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm99aWYoIWQpYnJlYWs7Yj1jLnRhZzs1IT09YiYmNiE9PWJ8fGEuYW5jZXN0b3JzLnB1c2goYyk7Yz10YyhkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1uYyhhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO3ZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3M7MD09PWMmJihnfD02NCk7Zm9yKHZhciBoPW51bGwsaz0wO2s8c2EubGVuZ3RoO2srKyl7dmFyIGw9c2Fba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD1cbmljKGgsbCkpfW1jKGgpfX1mdW5jdGlvbiB1YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOnZjKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjp2YyhiLFwiZm9jdXNcIiwhMCk7dmMoYixcImJsdXJcIiwhMCk7Yy5zZXQoXCJibHVyXCIsbnVsbCk7Yy5zZXQoXCJmb2N1c1wiLG51bGwpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpvYyhhKSYmdmMoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWMuaW5kZXhPZihhKSYmRihhLGIpfWMuc2V0KGEsbnVsbCl9fVxudmFyIHdjLHhjLHljLHpjPSExLEFjPVtdLEJjPW51bGwsQ2M9bnVsbCxEYz1udWxsLEVjPW5ldyBNYXAsRmM9bmV3IE1hcCxHYz1bXSxIYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNsb3NlIGNhbmNlbCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpLEljPVwiZm9jdXMgYmx1ciBkcmFnZW50ZXIgZHJhZ2xlYXZlIG1vdXNlb3ZlciBtb3VzZW91dCBwb2ludGVyb3ZlciBwb2ludGVyb3V0IGdvdHBvaW50ZXJjYXB0dXJlIGxvc3Rwb2ludGVyY2FwdHVyZVwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIEpjKGEsYil7dmFyIGM9Y2MoYik7SGMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KTtJYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pfWZ1bmN0aW9uIEtjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDplLGNvbnRhaW5lcjpkfX1cbmZ1bmN0aW9uIExjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6QmM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOkNjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOkRjPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpFYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpGYy5kZWxldGUoYi5wb2ludGVySWQpfX1mdW5jdGlvbiBNYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPUtjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPU5jKGIpLG51bGwhPT1iJiZ4YyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBPYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNcIjpyZXR1cm4gQmM9TWMoQmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIENjPU1jKENjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBEYz1NYyhEYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO0VjLnNldChmLE1jKEVjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxGYy5zZXQoZixNYyhGYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBQYyhhKXt2YXIgYj10YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWRjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWVjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXt5YyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gUWMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9TmMoYik7bnVsbCE9PWMmJnhjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBTYyhhLGIsYyl7UWMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFRjKCl7Zm9yKHpjPSExOzA8QWMubGVuZ3RoOyl7dmFyIGE9QWNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPU5jKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmd2MoYSk7YnJlYWt9dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6QWMuc2hpZnQoKX1udWxsIT09QmMmJlFjKEJjKSYmKEJjPW51bGwpO251bGwhPT1DYyYmUWMoQ2MpJiYoQ2M9bnVsbCk7bnVsbCE9PURjJiZRYyhEYykmJihEYz1udWxsKTtFYy5mb3JFYWNoKFNjKTtGYy5mb3JFYWNoKFNjKX1mdW5jdGlvbiBVYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsemN8fCh6Yz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxUYykpKX1cbmZ1bmN0aW9uIFZjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIFVjKGIsYSl9aWYoMDxBYy5sZW5ndGgpe1VjKEFjWzBdLGEpO2Zvcih2YXIgYz0xO2M8QWMubGVuZ3RoO2MrKyl7dmFyIGQ9QWNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1CYyYmVWMoQmMsYSk7bnVsbCE9PUNjJiZVYyhDYyxhKTtudWxsIT09RGMmJlVjKERjLGEpO0VjLmZvckVhY2goYik7RmMuZm9yRWFjaChiKTtmb3IoYz0wO2M8R2MubGVuZ3RoO2MrKylkPUdjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxHYy5sZW5ndGgmJihjPUdjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVBjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmR2Muc2hpZnQoKX1cbnZhciBXYz17fSxZYz1uZXcgTWFwLFpjPW5ldyBNYXAsJGM9W1wiYWJvcnRcIixcImFib3J0XCIsWGIsXCJhbmltYXRpb25FbmRcIixZYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiLFpiLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFxuXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsJGIsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIGFkKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdLGY9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7Zj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZixjYXB0dXJlZDpmK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2RdLGV2ZW50UHJpb3JpdHk6Yn07WmMuc2V0KGQsYik7WWMuc2V0KGQsZik7V2NbZV09Zn19XG5hZChcImJsdXIgYmx1ciBjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1cyBmb2N1cyBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLDApO1xuYWQoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7YWQoJGMsMik7Zm9yKHZhciBiZD1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksY2Q9MDtjZDxiZC5sZW5ndGg7Y2QrKylaYy5zZXQoYmRbY2RdLDApO1xudmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gRihhLGIpe3ZjKGIsYSwhMSl9ZnVuY3Rpb24gdmMoYSxiLGMpe3ZhciBkPVpjLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZD8yOmQpe2Nhc2UgMDpkPWdkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7Y2FzZSAxOmQ9aGQuYmluZChudWxsLGIsMSxhKTticmVhaztkZWZhdWx0OmQ9aWQuYmluZChudWxsLGIsMSxhKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIGdkKGEsYixjLGQpe0phfHxIYSgpO3ZhciBlPWlkLGY9SmE7SmE9ITA7dHJ5e0dhKGUsYSxiLGMsZCl9ZmluYWxseXsoSmE9Zil8fExhKCl9fWZ1bmN0aW9uIGhkKGEsYixjLGQpe2VkKGRkLGlkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBpZChhLGIsYyxkKXtpZihmZClpZigwPEFjLmxlbmd0aCYmLTE8SGMuaW5kZXhPZihhKSlhPUtjKG51bGwsYSxiLGMsZCksQWMucHVzaChhKTtlbHNle3ZhciBlPVJjKGEsYixjLGQpO2lmKG51bGw9PT1lKUxjKGEsZCk7ZWxzZSBpZigtMTxIYy5pbmRleE9mKGEpKWE9S2MoZSxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2UgaWYoIU9jKGUsYSxiLGMsZCkpe0xjKGEsZCk7YT1yYyhhLGQsbnVsbCxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX19fX1cbmZ1bmN0aW9uIFJjKGEsYixjLGQpe2M9bmMoZCk7Yz10YyhjKTtpZihudWxsIT09Yyl7dmFyIGU9ZGMoYyk7aWYobnVsbD09PWUpYz1udWxsO2Vsc2V7dmFyIGY9ZS50YWc7aWYoMTM9PT1mKXtjPWVjKGUpO2lmKG51bGwhPT1jKXJldHVybiBjO2M9bnVsbH1lbHNlIGlmKDM9PT1mKXtpZihlLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09ZS50YWc/ZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2M9bnVsbH1lbHNlIGUhPT1jJiYoYz1udWxsKX19YT1yYyhhLGQsYyxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX1yZXR1cm4gbnVsbH1cbnZhciBqZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxrZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoamQpLmZvckVhY2goZnVuY3Rpb24oYSl7a2QuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtqZFtiXT1qZFthXX0pfSk7ZnVuY3Rpb24gbGQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGpkLmhhc093blByb3BlcnR5KGEpJiZqZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBtZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1sZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBuZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gb2QoYSxiKXtpZihiKXtpZihuZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIHBkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgcWQ9TWIuaHRtbDtmdW5jdGlvbiByZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1jYyhhKTtiPXdhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXVjKGJbZF0sYSxjKX1mdW5jdGlvbiBzZCgpe31cbmZ1bmN0aW9uIHRkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiB1ZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gdmQoYSxiKXt2YXIgYz11ZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz11ZChjKX19XG5mdW5jdGlvbiB3ZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP3dkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiB4ZCgpe2Zvcih2YXIgYT13aW5kb3csYj10ZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj10ZChhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIHlkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIHpkPVwiJFwiLEFkPVwiLyRcIixCZD1cIiQ/XCIsQ2Q9XCIkIVwiLERkPW51bGwsRWQ9bnVsbDtmdW5jdGlvbiBGZChhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBHZChhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIEhkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLElkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBKZChhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIEtkKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PXpkfHxjPT09Q2R8fGM9PT1CZCl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PUFkJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTGQ9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksTWQ9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMZCxOZD1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xkLE9kPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrTGQ7XG5mdW5jdGlvbiB0YyhhKXt2YXIgYj1hW01kXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tPZF18fGNbTWRdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9S2QoYSk7bnVsbCE9PWE7KXtpZihjPWFbTWRdKXJldHVybiBjO2E9S2QoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIE5jKGEpe2E9YVtNZF18fGFbT2RdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBQZChhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiBRZChhKXtyZXR1cm4gYVtOZF18fG51bGx9XG5mdW5jdGlvbiBSZChhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gU2QoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1sYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgyMzEsXG5iLHR5cGVvZiBjKSk7cmV0dXJuIGN9ZnVuY3Rpb24gVGQoYSxiLGMpe2lmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBVZChhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPVJkKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylUZChjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKVRkKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gVmQoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBXZChhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlZkKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBYZChhKXtqYyhhLFVkKX12YXIgWWQ9bnVsbCxaZD1udWxsLCRkPW51bGw7XG5mdW5jdGlvbiBhZSgpe2lmKCRkKXJldHVybiAkZDt2YXIgYSxiPVpkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuICRkPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gYmUoKXtyZXR1cm4hMH1mdW5jdGlvbiBjZSgpe3JldHVybiExfVxuZnVuY3Rpb24gRyhhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/YmU6Y2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1jZTtyZXR1cm4gdGhpc31cbm4oRy5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1iZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1iZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1iZX0saXNQZXJzaXN0ZW50OmNlLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWNlO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7Ry5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5HLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2RlKGMpO3JldHVybiBjfTtkZShHKTtmdW5jdGlvbiBlZShhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGZlKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGRlKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWVlO2EucmVsZWFzZT1mZX12YXIgZ2U9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGhlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxpZT1bOSwxMywyNywzMl0samU9eWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGtlPW51bGw7eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGtlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgbGU9eWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFrZSxtZT15YSYmKCFqZXx8a2UmJjg8a2UmJjExPj1rZSksbmU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksb2U9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0scGU9ITE7XG5mdW5jdGlvbiBxZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PWllLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gcmUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgc2U9ITE7ZnVuY3Rpb24gdGUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHJlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtwZT0hMDtyZXR1cm4gbmU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09bmUmJnBlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHVlKGEsYil7aWYoc2UpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWplJiZxZShhLGIpPyhhPWFlKCksJGQ9WmQ9WWQ9bnVsbCxzZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gbWUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHZlPXtldmVudFR5cGVzOm9lLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoamUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGY9b2UuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmY9b2UuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpmPW9lLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBzZT9xZShhLGMpJiYoZj1vZS5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPW9lLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KG1lJiZcImtvXCIhPT1jLmxvY2FsZSYmKHNlfHxmIT09b2UuY29tcG9zaXRpb25TdGFydD9mPT09b2UuY29tcG9zaXRpb25FbmQmJnNlJiYoZT1hZSgpKTooWWQ9ZCxaZD1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxzZT0hMCkpLGY9Z2UuZ2V0UG9vbGVkKGYsXG5iLGMsZCksZT9mLmRhdGE9ZTooZT1yZShjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksWGQoZiksZT1mKTplPW51bGw7KGE9bGU/dGUoYSxjKTp1ZShhLGMpKT8oYj1oZS5nZXRQb29sZWQob2UuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFhkKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1lP2I6bnVsbD09PWI/ZTpbZSxiXX19LHdlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIHhlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhd2VbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxudmFyIHllPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIHplKGEsYixjKXthPUcuZ2V0UG9vbGVkKHllLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RGEoYyk7WGQoYSk7cmV0dXJuIGF9dmFyIEFlPW51bGwsQmU9bnVsbDtmdW5jdGlvbiBDZShhKXttYyhhKX1mdW5jdGlvbiBEZShhKXt2YXIgYj1QZChhKTtpZih5YihiKSlyZXR1cm4gYX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBGZT0hMTt5YSYmKEZlPW9jKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO1xuZnVuY3Rpb24gR2UoKXtBZSYmKEFlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSxCZT1BZT1udWxsKX1mdW5jdGlvbiBIZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmRGUoQmUpKWlmKGE9emUoQmUsYSxuYyhhKSksSmEpbWMoYSk7ZWxzZXtKYT0hMDt0cnl7RmEoQ2UsYSl9ZmluYWxseXtKYT0hMSxMYSgpfX19ZnVuY3Rpb24gSWUoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEdlKCksQWU9YixCZT1jLEFlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSk6XCJibHVyXCI9PT1hJiZHZSgpfWZ1bmN0aW9uIEplKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIERlKEJlKX1mdW5jdGlvbiBLZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIERlKGIpfWZ1bmN0aW9uIExlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIERlKGIpfVxudmFyIE1lPXtldmVudFR5cGVzOnllLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6RmUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1BkKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9RWU7ZWxzZSBpZih4ZShlKSlpZihGZSlnPUxlO2Vsc2V7Zz1KZTt2YXIgaD1JZX1lbHNlKGY9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWYudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGc9S2UpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIHplKGcsYyxkKTtoJiZoKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGIoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sTmU9Ry5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFxuT2U9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBlKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2VbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBRZSgpe3JldHVybiBQZX1cbnZhciBSZT0wLFNlPTAsVGU9ITEsVWU9ITEsVmU9TmUuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVJlO1JlPWEuc2NyZWVuWDtyZXR1cm4gVGU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihUZT0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVNlO1NlPWEuc2NyZWVuWTtyZXR1cm4gVWU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihVZT0hMCwwKX19KSxXZT1WZS5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksWGU9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LFllPXtldmVudFR5cGVzOlhlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxnPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihmJiYwPT09KGUmMzIpJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWcmJiFmKXJldHVybiBudWxsO2Y9ZC53aW5kb3c9PT1kP2Q6KGY9ZC5vd25lckRvY3VtZW50KT9mLmRlZmF1bHRWaWV3fHxmLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/dGMoYik6bnVsbCxudWxsIT09Yil7dmFyIGg9ZGMoYik7aWYoYiE9PWh8fDUhPT1iLnRhZyYmNiE9PWIudGFnKWI9bnVsbH19ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PVxuYSl7dmFyIGs9VmU7dmFyIGw9WGUubW91c2VMZWF2ZTt2YXIgbT1YZS5tb3VzZUVudGVyO3ZhciBwPVwibW91c2VcIn1lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlrPVdlLGw9WGUucG9pbnRlckxlYXZlLG09WGUucG9pbnRlckVudGVyLHA9XCJwb2ludGVyXCI7YT1udWxsPT1nP2Y6UGQoZyk7Zj1udWxsPT1iP2Y6UGQoYik7bD1rLmdldFBvb2xlZChsLGcsYyxkKTtsLnR5cGU9cCtcImxlYXZlXCI7bC50YXJnZXQ9YTtsLnJlbGF0ZWRUYXJnZXQ9ZjtjPWsuZ2V0UG9vbGVkKG0sYixjLGQpO2MudHlwZT1wK1wiZW50ZXJcIjtjLnRhcmdldD1mO2MucmVsYXRlZFRhcmdldD1hO2Q9ZztwPWI7aWYoZCYmcClhOntrPWQ7bT1wO2c9MDtmb3IoYT1rO2E7YT1SZChhKSlnKys7YT0wO2ZvcihiPW07YjtiPVJkKGIpKWErKztmb3IoOzA8Zy1hOylrPVJkKGspLGctLTtmb3IoOzA8YS1nOyltPVJkKG0pLGEtLTtmb3IoO2ctLTspe2lmKGs9PT1tfHxrPT09bS5hbHRlcm5hdGUpYnJlYWsgYTtcbms9UmQoayk7bT1SZChtKX1rPW51bGx9ZWxzZSBrPW51bGw7bT1rO2ZvcihrPVtdO2QmJmQhPT1tOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ay5wdXNoKGQpO2Q9UmQoZCl9Zm9yKGQ9W107cCYmcCE9PW07KXtnPXAuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztkLnB1c2gocCk7cD1SZChwKX1mb3IocD0wO3A8ay5sZW5ndGg7cCsrKVZkKGtbcF0sXCJidWJibGVkXCIsbCk7Zm9yKHA9ZC5sZW5ndGg7MDxwLS07KVZkKGRbcF0sXCJjYXB0dXJlZFwiLGMpO3JldHVybiAwPT09KGUmNjQpP1tsXTpbbCxjXX19O2Z1bmN0aW9uIFplKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgJGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6WmUsYWY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGJmKGEsYil7aWYoJGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFhZi5jYWxsKGIsY1tkXSl8fCEkZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfVxudmFyIGNmPXlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGY9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVmPW51bGwsZmY9bnVsbCxnZj1udWxsLGhmPSExO1xuZnVuY3Rpb24gamYoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZnx8bnVsbD09ZWZ8fGVmIT09dGQoYykpcmV0dXJuIG51bGw7Yz1lZjtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZ5ZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZiYmYmYoZ2YsYyk/bnVsbDooZ2Y9YyxhPUcuZ2V0UG9vbGVkKGRmLnNlbGVjdCxmZixhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVmLFhkKGEpLGEpfVxudmFyIGtmPXtldmVudFR5cGVzOmRmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2U9Znx8KGQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KTtpZighKGY9IWUpKXthOntlPWNjKGUpO2Y9d2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspaWYoIWUuaGFzKGZbZ10pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1BkKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoeGUoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWY9ZSxmZj1iLGdmPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZj1mZj1lZj1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZj0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhmPSExLGpmKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNmKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gamYoYyxkKX1yZXR1cm4gbnVsbH19LGxmPUcuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxtZj1HLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLG5mPU5lLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gb2YoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcGY9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHFmPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxyZj1OZS5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cGZbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2YoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3FmW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZihhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZihhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHNmPVZlLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx0Zj1OZS5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZX0pLHVmPUcuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHZmPVZlLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksd2Y9e2V2ZW50VHlwZXM6V2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1ZYy5nZXQoYSk7aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZihjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9cmY7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPW5mO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9XG5WZTticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPXNmO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dGY7YnJlYWs7Y2FzZSBYYjpjYXNlIFliOmNhc2UgWmI6YT1sZjticmVhaztjYXNlICRiOmE9dWY7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9TmU7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT12ZjticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW1mO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9XG5XZTticmVhaztkZWZhdWx0OmE9R31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1hkKGIpO3JldHVybiBifX07aWYocGEpdGhyb3cgRXJyb3IodSgxMDEpKTtwYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtyYSgpO3ZhciB4Zj1OYztsYT1RZDttYT14ZjtuYT1QZDt4YSh7U2ltcGxlRXZlbnRQbHVnaW46d2YsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOlllLENoYW5nZUV2ZW50UGx1Z2luOk1lLFNlbGVjdEV2ZW50UGx1Z2luOmtmLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46dmV9KTt2YXIgeWY9W10semY9LTE7ZnVuY3Rpb24gSChhKXswPnpmfHwoYS5jdXJyZW50PXlmW3pmXSx5Zlt6Zl09bnVsbCx6Zi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXt6ZisrO3lmW3pmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEFmPXt9LEo9e2N1cnJlbnQ6QWZ9LEs9e2N1cnJlbnQ6ITF9LEJmPUFmO2Z1bmN0aW9uIENmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQWY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRGYoKXtIKEspO0goSil9ZnVuY3Rpb24gRWYoYSxiLGMpe2lmKEouY3VycmVudCE9PUFmKXRocm93IEVycm9yKHUoMTY4KSk7SShKLGIpO0koSyxjKX1mdW5jdGlvbiBGZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LHBiKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBHZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8QWY7QmY9Si5jdXJyZW50O0koSixhKTtJKEssSy5jdXJyZW50KTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEhmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih1KDE2OSkpO2M/KGE9RmYoYSxiLEJmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChLKSxIKEopLEkoSixhKSk6SChLKTtJKEssYyl9XG52YXIgSWY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksSmY9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEtmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssTGY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsTWY9ci51bnN0YWJsZV9ub3csTmY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxPZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFBmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksUWY9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxSZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFNmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFRmPXt9LFVmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsVmY9dm9pZCAwIT09TGY/TGY6ZnVuY3Rpb24oKXt9LFdmPW51bGwsWGY9bnVsbCxZZj0hMSxaZj1NZigpLCRmPTFFND5aZj9NZjpmdW5jdGlvbigpe3JldHVybiBNZigpLVpmfTtcbmZ1bmN0aW9uIGFnKCl7c3dpdGNoKE5mKCkpe2Nhc2UgT2Y6cmV0dXJuIDk5O2Nhc2UgUGY6cmV0dXJuIDk4O2Nhc2UgUWY6cmV0dXJuIDk3O2Nhc2UgUmY6cmV0dXJuIDk2O2Nhc2UgU2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGJnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBPZjtjYXNlIDk4OnJldHVybiBQZjtjYXNlIDk3OnJldHVybiBRZjtjYXNlIDk2OnJldHVybiBSZjtjYXNlIDk1OnJldHVybiBTZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBjZyhhLGIpe2E9YmcoYSk7cmV0dXJuIElmKGEsYil9ZnVuY3Rpb24gZGcoYSxiLGMpe2E9YmcoYSk7cmV0dXJuIEpmKGEsYixjKX1mdW5jdGlvbiBlZyhhKXtudWxsPT09V2Y/KFdmPVthXSxYZj1KZihPZixmZykpOldmLnB1c2goYSk7cmV0dXJuIFRmfWZ1bmN0aW9uIGdnKCl7aWYobnVsbCE9PVhmKXt2YXIgYT1YZjtYZj1udWxsO0tmKGEpfWZnKCl9XG5mdW5jdGlvbiBmZygpe2lmKCFZZiYmbnVsbCE9PVdmKXtZZj0hMDt2YXIgYT0wO3RyeXt2YXIgYj1XZjtjZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7V2Y9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09V2YmJihXZj1XZi5zbGljZShhKzEpKSxKZihPZixnZyksYzt9ZmluYWxseXtZZj0hMX19fWZ1bmN0aW9uIGhnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIGlnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBqZz17Y3VycmVudDpudWxsfSxrZz1udWxsLGxnPW51bGwsbWc9bnVsbDtmdW5jdGlvbiBuZygpe21nPWxnPWtnPW51bGx9XG5mdW5jdGlvbiBvZyhhKXt2YXIgYj1qZy5jdXJyZW50O0goamcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gcWcoYSxiKXtrZz1hO21nPWxnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHJnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7aWYobWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKW1nPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1sZyl7aWYobnVsbD09PWtnKXRocm93IEVycm9yKHUoMzA4KSk7bGc9YjtrZy5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIGxnPWxnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB0Zz0hMTtmdW5jdGlvbiB1ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGJhc2VRdWV1ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gdmcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsYmFzZVF1ZXVlOmEuYmFzZVF1ZXVlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHdnKGEsYil7YT17ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH07cmV0dXJuIGEubmV4dD1hfWZ1bmN0aW9uIHhnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmdmcoYyxhKTthPWEudXBkYXRlUXVldWU7Yz1hLmJhc2VRdWV1ZTtudWxsPT09Yz8oYS5iYXNlUXVldWU9Yi5uZXh0PWIsYi5uZXh0PWIpOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKX1cbmZ1bmN0aW9uIHpnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7dGc9ITE7dmFyIGY9ZS5iYXNlUXVldWUsZz1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1nKXtpZihudWxsIT09Zil7dmFyIGg9Zi5uZXh0O2YubmV4dD1nLm5leHQ7Zy5uZXh0PWh9Zj1nO2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDtoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiYoaD1oLnVwZGF0ZVF1ZXVlLG51bGwhPT1oJiYoaC5iYXNlUXVldWU9ZykpfWlmKG51bGwhPT1mKXtoPWYubmV4dDt2YXIgaz1lLmJhc2VTdGF0ZSxsPTAsbT1udWxsLHA9bnVsbCx4PW51bGw7aWYobnVsbCE9PWgpe3ZhciB6PWg7ZG97Zz16LmV4cGlyYXRpb25UaW1lO2lmKGc8ZCl7dmFyIGNhPXtleHBpcmF0aW9uVGltZTp6LmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09eD8ocD14PVxuY2EsbT1rKTp4PXgubmV4dD1jYTtnPmwmJihsPWcpfWVsc2V7bnVsbCE9PXgmJih4PXgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH0pO0FnKGcsei5zdXNwZW5zZUNvbmZpZyk7YTp7dmFyIEQ9YSx0PXo7Zz1iO2NhPWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6RD10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEQpe2s9RC5jYWxsKGNhLGssZyk7YnJlYWsgYX1rPUQ7YnJlYWsgYTtjYXNlIDM6RC5lZmZlY3RUYWc9RC5lZmZlY3RUYWcmLTQwOTd8NjQ7Y2FzZSAwOkQ9dC5wYXlsb2FkO2c9XCJmdW5jdGlvblwiPT09dHlwZW9mIEQ/RC5jYWxsKGNhLGssZyk6RDtpZihudWxsPT09Z3x8dm9pZCAwPT09ZylicmVhayBhO2s9bih7fSxrLGcpO2JyZWFrIGE7Y2FzZSAyOnRnPSEwfX1udWxsIT09ei5jYWxsYmFjayYmXG4oYS5lZmZlY3RUYWd8PTMyLGc9ZS5lZmZlY3RzLG51bGw9PT1nP2UuZWZmZWN0cz1bel06Zy5wdXNoKHopKX16PXoubmV4dDtpZihudWxsPT09enx8ej09PWgpaWYoZz1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1nKWJyZWFrO2Vsc2Ugej1mLm5leHQ9Zy5uZXh0LGcubmV4dD1oLGUuYmFzZVF1ZXVlPWY9ZyxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSl9bnVsbD09PXg/bT1rOngubmV4dD1wO2UuYmFzZVN0YXRlPW07ZS5iYXNlUXVldWU9eDtCZyhsKTthLmV4cGlyYXRpb25UaW1lPWw7YS5tZW1vaXplZFN0YXRlPWt9fVxuZnVuY3Rpb24gQ2coYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1lO2U9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCl0aHJvdyBFcnJvcih1KDE5MSxkKSk7ZC5jYWxsKGUpfX19dmFyIERnPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEVnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIEZnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEuZXhwaXJhdGlvblRpbWUmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBKZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZGMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPUdnKCksZD1EZy5zdXNwZW5zZTtcbmM9SGcoYyxhLGQpO2Q9d2coYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTt4ZyhhLGQpO0lnKGEsYyl9fTtmdW5jdGlvbiBLZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFiZihjLGQpfHwhYmYoZSxmKTohMH1cbmZ1bmN0aW9uIExnKGEsYixjKXt2YXIgZD0hMSxlPUFmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXNnKGYpOihlPUwoYik/QmY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/Q2YoYSxlKTpBZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUpnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9RWc7dWcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1zZyhmKTooZj1MKGIpP0JmOkouY3VycmVudCxlLmNvbnRleHQ9Q2YoYSxmKSk7emcoYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEZnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHpnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgT2c9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFBnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1FZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUWcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uIFJnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVNnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVBnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1VZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1QZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVZnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1XZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVRnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjPVVnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVBnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYTpyZXR1cm4gYj1WZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoT2coYil8fFxubmIoYikpcmV0dXJuIGI9V2coYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKE9nKGMpfHxuYihjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7UWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKE9nKGQpfHxuYihkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7UWcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBjYShlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsbT1nLHk9Zz0wLEE9bnVsbDtudWxsIT09bSYmeTxoLmxlbmd0aDt5Kyspe20uaW5kZXg+eT8oQT1tLG09bnVsbCk6QT1tLnNpYmxpbmc7dmFyIHE9eChlLG0saFt5XSxrKTtpZihudWxsPT09cSl7bnVsbD09PW0mJihtPUEpO2JyZWFrfWEmJlxubSYmbnVsbD09PXEuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHEsZyx5KTtudWxsPT09dD9sPXE6dC5zaWJsaW5nPXE7dD1xO209QX1pZih5PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxtKSxsO2lmKG51bGw9PT1tKXtmb3IoO3k8aC5sZW5ndGg7eSsrKW09cChlLGhbeV0sayksbnVsbCE9PW0mJihnPWYobSxnLHkpLG51bGw9PT10P2w9bTp0LnNpYmxpbmc9bSx0PW0pO3JldHVybiBsfWZvcihtPWQoZSxtKTt5PGgubGVuZ3RoO3krKylBPXoobSxlLHksaFt5XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PUEua2V5P3k6QS5rZXkpLGc9ZihBLGcseSksbnVsbD09PXQ/bD1BOnQuc2libGluZz1BLHQ9QSk7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBEKGUsZyxoLGwpe3ZhciBrPW5iKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBrKXRocm93IEVycm9yKHUoMTUwKSk7aD1rLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWs9bnVsbCx0PWcseT1nPTAsQT1udWxsLHE9aC5uZXh0KCk7bnVsbCE9PXQmJiFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpe3QuaW5kZXg+eT8oQT10LHQ9bnVsbCk6QT10LnNpYmxpbmc7dmFyIEQ9eChlLHQscS52YWx1ZSxsKTtpZihudWxsPT09RCl7bnVsbD09PXQmJih0PUEpO2JyZWFrfWEmJnQmJm51bGw9PT1ELmFsdGVybmF0ZSYmYihlLHQpO2c9ZihELGcseSk7bnVsbD09PW0/az1EOm0uc2libGluZz1EO209RDt0PUF9aWYocS5kb25lKXJldHVybiBjKGUsdCksaztpZihudWxsPT09dCl7Zm9yKDshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9cChlLHEudmFsdWUsbCksbnVsbCE9PXEmJihnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO3JldHVybiBrfWZvcih0PWQoZSx0KTshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9eih0LGUseSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoYSYmbnVsbCE9PVxucS5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1xLmtleT95OnEua2V5KSxnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO2EmJnQuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGt9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFphOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09YWIpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsXG5rLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMpO2QucmVmPVBnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YWI/KGQ9V2coZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVVnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVBnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1cbmQuc2libGluZ31kPVZnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVRnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKE9nKGYpKXJldHVybiBjYShhLGQsZixoKTtpZihuYihmKSlyZXR1cm4gRChhLGQsZixoKTtsJiZRZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLEVycm9yKHUoMTUyLGEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWGc9UmcoITApLFlnPVJnKCExKSxaZz17fSwkZz17Y3VycmVudDpaZ30sYWg9e2N1cnJlbnQ6Wmd9LGJoPXtjdXJyZW50OlpnfTtcbmZ1bmN0aW9uIGNoKGEpe2lmKGE9PT1aZyl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGRoKGEsYil7SShiaCxiKTtJKGFoLGEpO0koJGcsWmcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6T2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPU9iKGIsYSl9SCgkZyk7SSgkZyxiKX1mdW5jdGlvbiBlaCgpe0goJGcpO0goYWgpO0goYmgpfWZ1bmN0aW9uIGZoKGEpe2NoKGJoLmN1cnJlbnQpO3ZhciBiPWNoKCRnLmN1cnJlbnQpO3ZhciBjPU9iKGIsYS50eXBlKTtiIT09YyYmKEkoYWgsYSksSSgkZyxjKSl9ZnVuY3Rpb24gZ2goYSl7YWguY3VycmVudD09PWEmJihIKCRnKSxIKGFoKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBoaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1CZHx8Yy5kYXRhPT09Q2QpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gaWgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgamg9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixraD1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxsaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLG1oPSExO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcih1KDMyMSkpO31mdW5jdGlvbiBuaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCEkZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYpe2xoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmV4cGlyYXRpb25UaW1lPTA7amguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9waDpxaDthPWMoZCxlKTtpZihiLmV4cGlyYXRpb25UaW1lPT09bGgpe2Y9MDtkb3tiLmV4cGlyYXRpb25UaW1lPTA7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih1KDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2poLmN1cnJlbnQ9cmg7YT1jKGQsZSl9d2hpbGUoYi5leHBpcmF0aW9uVGltZT09PWxoKX1qaC5jdXJyZW50PXNoO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKGIpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIHVoKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiB2aChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHdoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmV4cGlyYXRpb25UaW1lO2lmKGw8bGgpe3ZhciBtPXtleHBpcmF0aW9uVGltZTprLmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bSxmPWQpOmg9aC5uZXh0PW07bD5OLmV4cGlyYXRpb25UaW1lJiZcbihOLmV4cGlyYXRpb25UaW1lPWwsQmcobCkpfWVsc2UgbnVsbCE9PWgmJihoPWgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksQWcobCxrLnN1c3BlbnNlQ29uZmlnKSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZzskZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24geGgoYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpOyRlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiB5aChhKXt2YXIgYj10aCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjp2aCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1mdW5jdGlvbiBBaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBCaCgpe3JldHVybiB1aCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gQ2goYSxiLGMsZCl7dmFyIGU9dGgoKTtOLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBEaChhLGIsYyxkKXt2YXIgZT11aCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJm5oKGQsZy5kZXBzKSl7QWgoYixjLGYsZCk7cmV0dXJufX1OLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsZixkKX1mdW5jdGlvbiBFaChhLGIpe3JldHVybiBDaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEZoKGEsYil7cmV0dXJuIERoKDUxNiw0LGEsYil9ZnVuY3Rpb24gR2goYSxiKXtyZXR1cm4gRGgoNCwyLGEsYil9XG5mdW5jdGlvbiBIaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIEloKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gRGgoNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEpoKCl7fWZ1bmN0aW9uIEtoKGEsYil7dGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBMaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIE1oKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIE5oKGEsYixjKXt2YXIgZD1hZygpO2NnKDk4PmQ/OTg6ZCxmdW5jdGlvbigpe2EoITApfSk7Y2coOTc8ZD85NzpkLGZ1bmN0aW9uKCl7dmFyIGQ9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoITEpLGMoKX1maW5hbGx5e2toLnN1c3BlbnNlPWR9fSl9XG5mdW5jdGlvbiB6aChhLGIsYyl7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9e2V4cGlyYXRpb25UaW1lOmQsc3VzcGVuc2VDb25maWc6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZj1iLnBlbmRpbmc7bnVsbD09PWY/ZS5uZXh0PWU6KGUubmV4dD1mLm5leHQsZi5uZXh0PWUpO2IucGVuZGluZz1lO2Y9YS5hbHRlcm5hdGU7aWYoYT09PU58fG51bGwhPT1mJiZmPT09TiltaD0hMCxlLmV4cGlyYXRpb25UaW1lPWxoLE4uZXhwaXJhdGlvblRpbWU9bGg7ZWxzZXtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1mfHwwPT09Zi5leHBpcmF0aW9uVGltZSkmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5lYWdlclJlZHVjZXI9ZjtlLmVhZ2VyU3RhdGU9aDtpZigkZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9SWcoYSxcbmQpfX1cbnZhciBzaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0scGg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOktoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkVoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBDaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBDaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPXRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsXG5iXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9dGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6eWgsdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXloKGEpLGQ9Y1swXSxlPWNbMV07RWgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPVxuY319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj15aCghMSksYz1iWzBdO2I9YlsxXTtyZXR1cm5bS2goTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scWg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp3aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gd2godmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9d2godmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9XG53aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scmg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp4aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4geGgodmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eGgodmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eGgodmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxcbmIsYSksW2IsYV0pLGNdfX0sT2g9bnVsbCxQaD1udWxsLFFoPSExO2Z1bmN0aW9uIFJoKGEsYil7dmFyIGM9U2goNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIFRoKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBVaChhKXtpZihRaCl7dmFyIGI9UGg7aWYoYil7dmFyIGM9YjtpZighVGgoYSxiKSl7Yj1KZChjLm5leHRTaWJsaW5nKTtpZighYnx8IVRoKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7UWg9ITE7T2g9YTtyZXR1cm59UmgoT2gsYyl9T2g9YTtQaD1KZChiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixRaD0hMSxPaD1hfX1mdW5jdGlvbiBWaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47T2g9YX1cbmZ1bmN0aW9uIFdoKGEpe2lmKGEhPT1PaClyZXR1cm4hMTtpZighUWgpcmV0dXJuIFZoKGEpLFFoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhR2QoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVBoO2I7KVJoKGEsYiksYj1KZChiLm5leHRTaWJsaW5nKTtWaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PUFkKXtpZigwPT09Yil7UGg9SmQoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09emQmJmMhPT1DZCYmYyE9PUJkfHxiKyt9YT1hLm5leHRTaWJsaW5nfVBoPW51bGx9fWVsc2UgUGg9T2g/SmQoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBYaCgpe1BoPU9oPW51bGw7UWg9ITF9dmFyIFloPVdhLlJlYWN0Q3VycmVudE93bmVyLHJnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9ZZyhiLG51bGwsYyxkKTpYZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBaaChhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7cWcoYixlKTtkPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWJpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGNpKGEsYixnLGQsZSxmKTthPVVnKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6YmYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gJGgoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9U2coZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZiZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihyZz0hMSxlPGYpPyhiLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsJGgoYSxiLGYpKTpkaShhLGIsYyxkLGYpfWZ1bmN0aW9uIGVpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gZGkoYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0JmOkouY3VycmVudDtmPUNmKGIsZik7cWcoYixlKTtjPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtxZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksTGcoYixjLGQpLE5nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpO3RnPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXg7emcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHghPT1rfHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD10Z3x8S2coYixjLGgsZCx4LGssbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsdmcoYSxiKSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDppZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpLHRnPSExLGs9Yi5tZW1vaXplZFN0YXRlLGcuc3RhdGU9ayx6ZyhiLGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSxoIT09ZHx8ayE9PXh8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCkseD1iLm1lbW9pemVkU3RhdGUpLChtPXRnfHxLZyhiLGMsaCxkLGsseCxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9bCxkPW0pOlxuKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBnaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBnaShhLGIsYyxkLGUsZil7ZWkoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJkhmKGIsYywhMSksJGgoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WWguY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WGcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1YZyhiLG51bGwsaCxmKSk6UihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZIZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/RWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmRWYoYSxiLmNvbnRleHQsITEpO2RoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBpaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5VGltZTowfTtcbmZ1bmN0aW9uIGppKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPU0uY3VycmVudCxnPSExLGg7KGg9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaD0wIT09KGYmMikmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2g/KGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PTEpO0koTSxmJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZVaChiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1ZZyhiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1TZyhkLGUpO2QucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9YztyZXR1cm4gZH1jPVhnKGIsYS5jaGlsZCxlLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVxuY31hPWEuY2hpbGQ7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWE7bnVsbCE9PWEmJihhLnJldHVybj1lKTtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD0yO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WGcoYixhLGUuY2hpbGRyZW4sYyl9XG5mdW5jdGlvbiBraShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7cGcoYS5yZXR1cm4sYil9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZraShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZylraShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWhoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7bGkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aGgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfWxpKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpsaShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGgoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7MCE9PWQmJkJnKGQpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih1KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9U2coYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgbmksb2kscGkscWk7XG5uaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07b2k9ZnVuY3Rpb24oKXt9O1xucGk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2NoKCRnLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YihnLGYpO2Q9emIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdiKGcsZik7ZD1HYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXNkKX1vZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsbCkpOlwiY2hpbGRyZW5cIj09PWg/Zz09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChoLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/KG51bGwhPWwmJnJkKGUsaCksYXx8Zz09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goaCxsKSl9YyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGMpO2U9YTtpZihiLnVwZGF0ZVF1ZXVlPWUpYi5lZmZlY3RUYWd8PTR9fTtcbnFpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5lZmZlY3RUYWd8PTQpfTtmdW5jdGlvbiByaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBzaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMzpyZXR1cm4gZWgoKSxIKEspLEgoSiksYz1iLnN0YXRlTm9kZSxjLnBlbmRpbmdDb250ZXh0JiYoYy5jb250ZXh0PWMucGVuZGluZ0NvbnRleHQsYy5wZW5kaW5nQ29udGV4dD1udWxsKSxudWxsIT09YSYmbnVsbCE9PWEuY2hpbGR8fCFXaChiKXx8KGIuZWZmZWN0VGFnfD00KSxvaShiKSxudWxsO2Nhc2UgNTpnaChiKTtjPWNoKGJoLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcGkoYSxiLGUsZCxjKSxhLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5yZXR1cm4gbnVsbH1hPWNoKCRnLmN1cnJlbnQpO2lmKFdoKGIpKXtkPWIuc3RhdGVOb2RlO2U9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW01kXT1iO2RbTmRdPWY7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8YWMubGVuZ3RoO2ErKylGKGFjW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixkKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsZCk7RihcInN1Ym1pdFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGQsZik7RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGQsZiksRihcImludmFsaWRcIixkKSxyZChjLFwib25DaGFuZ2VcIil9b2QoZSxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKGE9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOnZhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZyZChjLGcpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihkKTtFYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGQpO0xiKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiZcbihkLm9uY2xpY2s9c2QpfWM9YTtiLnVwZGF0ZVF1ZXVlPWM7bnVsbCE9PWMmJihiLmVmZmVjdFRhZ3w9NCl9ZWxzZXtnPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2E9PT1xZCYmKGE9TmIoZSkpO2E9PT1xZD9cInNjcmlwdFwiPT09ZT8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGUse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGUpO2FbTWRdPWI7YVtOZF09ZDtuaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz1wZChlLGQpO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5hKTtoPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFjLmxlbmd0aDtoKyspRihhY1toXSxhKTtoPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixhKTtGKFwibG9hZFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGEpO0YoXCJzdWJtaXRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGEsZCk7aD16YihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPUdiKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtoPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoYSxcbmQpO2g9SWIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9ZH1vZChlLGgpO3ZhciBrPWg7Zm9yKGYgaW4gaylpZihrLmhhc093blByb3BlcnR5KGYpKXt2YXIgbD1rW2ZdO1wic3R5bGVcIj09PWY/bWQoYSxsKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJlFiKGEsbCkpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsPyhcInRleHRhcmVhXCIhPT1lfHxcIlwiIT09bCkmJlJiKGEsbCk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZSYihhLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKHZhLmhhc093blByb3BlcnR5KGYpP251bGwhPWwmJnJkKGMsZik6bnVsbCE9bCYmWGEoYSxmLGwsZykpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihhKTtFYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoYSk7TGIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3JiKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Yz1kLnZhbHVlO251bGwhPWM/SGIoYSwhIWQubXVsdGlwbGUsYywhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJkhiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihhLm9uY2xpY2s9c2QpfUZkKGUsZCkmJihiLmVmZmVjdFRhZ3w9NCl9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXFpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xuYz1jaChiaC5jdXJyZW50KTtjaCgkZy5jdXJyZW50KTtXaChiKT8oYz1iLnN0YXRlTm9kZSxkPWIubWVtb2l6ZWRQcm9wcyxjW01kXT1iLGMubm9kZVZhbHVlIT09ZCYmKGIuZWZmZWN0VGFnfD00KSk6KGM9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxjW01kXT1iLGIuc3RhdGVOb2RlPWMpfXJldHVybiBudWxsO2Nhc2UgMTM6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1jLGI7Yz1udWxsIT09ZDtkPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmV2goYik6KGU9YS5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWUsY3x8bnVsbD09PWV8fChlPWEuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGY9Yi5maXJzdEVmZmVjdCxudWxsIT09Zj8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1mKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9XG5lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSkpO2lmKGMmJiFkJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oTS5jdXJyZW50JjEpKVM9PT10aSYmKFM9dWkpO2Vsc2V7aWYoUz09PXRpfHxTPT09dWkpUz12aTswIT09d2kmJm51bGwhPT1UJiYoeGkoVCxVKSx5aShULHdpKSl9aWYoY3x8ZCliLmVmZmVjdFRhZ3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksb2koYiksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMTk6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtlPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2Y9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWYpaWYoZSlyaShkLCExKTtlbHNle2lmKFMhPT10aXx8bnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmXG42NCkpZm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2E9aGgoZik7aWYobnVsbCE9PWEpe2IuZWZmZWN0VGFnfD02NDtyaShkLCExKTtlPWEudXBkYXRlUXVldWU7bnVsbCE9PWUmJihiLnVwZGF0ZVF1ZXVlPWUsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7Zm9yKGQ9Yi5jaGlsZDtudWxsIT09ZDspZT1kLGY9YyxlLmVmZmVjdFRhZyY9MixlLm5leHRFZmZlY3Q9bnVsbCxlLmZpcnN0RWZmZWN0PW51bGwsZS5sYXN0RWZmZWN0PW51bGwsYT1lLmFsdGVybmF0ZSxudWxsPT09YT8oZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsZS5leHBpcmF0aW9uVGltZT1mLGUuY2hpbGQ9bnVsbCxlLm1lbW9pemVkUHJvcHM9bnVsbCxlLm1lbW9pemVkU3RhdGU9bnVsbCxlLnVwZGF0ZVF1ZXVlPW51bGwsZS5kZXBlbmRlbmNpZXM9bnVsbCk6KGUuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWUsXG5lLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsZS5jaGlsZD1hLmNoaWxkLGUubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHMsZS5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxlLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsZj1hLmRlcGVuZGVuY2llcyxlLmRlcGVuZGVuY2llcz1udWxsPT09Zj9udWxsOntleHBpcmF0aW9uVGltZTpmLmV4cGlyYXRpb25UaW1lLGZpcnN0Q29udGV4dDpmLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmYucmVzcG9uZGVyc30pLGQ9ZC5zaWJsaW5nO0koTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1mPWYuc2libGluZ319ZWxzZXtpZighZSlpZihhPWhoKGYpLG51bGwhPT1hKXtpZihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5lZmZlY3RUYWd8PTQpLHJpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZi5hbHRlcm5hdGUpcmV0dXJuIGI9XG5iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKiRmKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+ZC50YWlsRXhwaXJhdGlvbiYmMTxjJiYoYi5lZmZlY3RUYWd8PTY0LGU9ITAscmkoZCwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9Yy0xKTtkLmlzQmFja3dhcmRzPyhmLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWYpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZjpiLmNoaWxkPWYsZC5sYXN0PWYpfXJldHVybiBudWxsIT09ZC50YWlsPygwPT09ZC50YWlsRXhwaXJhdGlvbiYmKGQudGFpbEV4cGlyYXRpb249JGYoKSs1MDApLGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPSRmKCksYy5zaWJsaW5nPW51bGwsYj1NLmN1cnJlbnQsSShNLGU/YiYxfDI6YiYxKSxjKTpudWxsfXRocm93IEVycm9yKHUoMTU2LFxuYi50YWcpKTt9ZnVuY3Rpb24gemkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TChhLnR5cGUpJiZEZigpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZWgoKTtIKEspO0goSik7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGdoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChNKSxiPWEuZWZmZWN0VGFnLGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIEFpKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6cWIoYil9fVxudmFyIEJpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIENpKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9cWIoYykpO251bGwhPT1jJiZwYihjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZwYihhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBEaShhLGIpe3RyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7RWkoYSxjKX19ZnVuY3Rpb24gRmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7RWkoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gR2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6aWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gSGkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5kZXN0cm95O2MuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZCYmZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gSWkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fVxuZnVuY3Rpb24gSmkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOklpKDMsYyk7cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6aWcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyk7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZDZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUNnKGMsYixhKX1yZXR1cm47XG5jYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmNCYmRmQoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZWYyhjKSkpKTtyZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBLaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIExpJiZMaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2NnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtFaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6RmkoYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmRGkoYixjKTticmVhaztjYXNlIDU6RmkoYik7YnJlYWs7Y2FzZSA0Ok1pKGEsYixjKX19XG5mdW5jdGlvbiBOaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7bnVsbCE9PWImJk5pKGIpfWZ1bmN0aW9uIE9pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gUGkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoT2koYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IEVycm9yKHUoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKFJiKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxPaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/UWkoYSxjLGIpOlJpKGEsYyxiKX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1zZCkpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihRaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVFpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFJpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUmkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylSaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBNaShhLGIsYyl7Zm9yKHZhciBkPWIsZT0hMSxmLGc7Oyl7aWYoIWUpe2U9ZC5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1lKXRocm93IEVycm9yKHUoMTYwKSk7Zj1lLnN0YXRlTm9kZTtzd2l0Y2goZS50YWcpe2Nhc2UgNTpnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhfWU9ZS5yZXR1cm59ZT0hMH1pZig1PT09ZC50YWd8fDY9PT1kLnRhZyl7YTpmb3IodmFyIGg9YSxrPWQsbD1jLG09azs7KWlmKEtpKGgsbSxsKSxudWxsIT09bS5jaGlsZCYmNCE9PW0udGFnKW0uY2hpbGQucmV0dXJuPW0sbT1tLmNoaWxkO2Vsc2V7aWYobT09PWspYnJlYWsgYTtmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKEtpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBTaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6SGkoMyxiKTtyZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbTmRdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkJiKGMsZCk7cGQoYSxlKTtiPXBkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9tZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/UWIoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1JiKGMsaCk6WGEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkNiKGMsZCk7YnJlYWs7XG5jYXNlIFwidGV4dGFyZWFcIjpLYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0hiKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9IYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SGIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpiPWIuc3RhdGVOb2RlO2IuaHlkcmF0ZSYmKGIuaHlkcmF0ZT0hMSxWYyhiLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9cbmQ9ITE6KGQ9ITAsYz1iLmNoaWxkLFRpPSRmKCkpO2lmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1sZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1cbmY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWs7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWMpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9VWkoYik7cmV0dXJuO2Nhc2UgMTk6VWkoYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fWZ1bmN0aW9uIFVpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEJpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9VmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG52YXIgV2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gWGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtZaXx8KFlpPSEwLFppPWQpO0NpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gJGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7Q2koYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWFqP2FqPW5ldyBTZXQoW3RoaXNdKTphai5hZGQodGhpcyksQ2koYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgYmo9TWF0aC5jZWlsLGNqPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZGo9V2EuUmVhY3RDdXJyZW50T3duZXIsVj0wLGVqPTgsZmo9MTYsZ2o9MzIsdGk9MCxoaj0xLGlqPTIsdWk9Myx2aT00LGpqPTUsVz1WLFQ9bnVsbCxYPW51bGwsVT0wLFM9dGksa2o9bnVsbCxsaj0xMDczNzQxODIzLG1qPTEwNzM3NDE4MjMsbmo9bnVsbCx3aT0wLG9qPSExLFRpPTAscGo9NTAwLFk9bnVsbCxZaT0hMSxaaT1udWxsLGFqPW51bGwscWo9ITEscmo9bnVsbCxzaj05MCx0aj1udWxsLHVqPTAsdmo9bnVsbCx3aj0wO2Z1bmN0aW9uIEdnKCl7cmV0dXJuKFcmKGZqfGdqKSkhPT1WPzEwNzM3NDE4MjEtKCRmKCkvMTB8MCk6MCE9PXdqP3dqOndqPTEwNzM3NDE4MjEtKCRmKCkvMTB8MCl9XG5mdW5jdGlvbiBIZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWFnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChXJmZqKSE9PVYpcmV0dXJuIFU7aWYobnVsbCE9PWMpYT1oZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1oZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWhnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VCYmYT09PVUmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIElnKGEsYil7aWYoNTA8dWopdGhyb3cgdWo9MCx2aj1udWxsLEVycm9yKHUoMTg1KSk7YT14aihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1hZygpOzEwNzM3NDE4MjM9PT1iPyhXJmVqKSE9PVYmJihXJihmanxnaikpPT09Vj95aihhKTooWihhKSxXPT09ViYmZ2coKSk6WihhKTsoVyY0KT09PVZ8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PXRqP3RqPW5ldyBNYXAoW1thLGJdXSk6KGM9dGouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZ0ai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIHhqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihUPT09ZSYmKEJnKGIpLFM9PT12aSYmeGkoZSxVKSkseWkoZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiB6aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighQWooYSxiKSlyZXR1cm4gYjt2YXIgYz1hLmxhc3RQaW5nZWRUaW1lO2E9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw7YT1jPmE/YzphO3JldHVybiAyPj1hJiZiIT09YT8wOmF9XG5mdW5jdGlvbiBaKGEpe2lmKDAhPT1hLmxhc3RFeHBpcmVkVGltZSlhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxhLmNhbGxiYWNrUHJpb3JpdHk9OTksYS5jYWxsYmFja05vZGU9ZWcoeWouYmluZChudWxsLGEpKTtlbHNle3ZhciBiPXpqKGEpLGM9YS5jYWxsYmFja05vZGU7aWYoMD09PWIpbnVsbCE9PWMmJihhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wLGEuY2FsbGJhY2tQcmlvcml0eT05MCk7ZWxzZXt2YXIgZD1HZygpOzEwNzM3NDE4MjM9PT1iP2Q9OTk6MT09PWJ8fDI9PT1iP2Q9OTU6KGQ9MTAqKDEwNzM3NDE4MjEtYiktMTAqKDEwNzM3NDE4MjEtZCksZD0wPj1kPzk5OjI1MD49ZD85ODo1MjUwPj1kPzk3Ojk1KTtpZihudWxsIT09Yyl7dmFyIGU9YS5jYWxsYmFja1ByaW9yaXR5O2lmKGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT09PWImJmU+PWQpcmV0dXJuO2MhPT1UZiYmS2YoYyl9YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPVxuYjthLmNhbGxiYWNrUHJpb3JpdHk9ZDtiPTEwNzM3NDE4MjM9PT1iP2VnKHlqLmJpbmQobnVsbCxhKSk6ZGcoZCxCai5iaW5kKG51bGwsYSkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjEtYiktJGYoKX0pO2EuY2FsbGJhY2tOb2RlPWJ9fX1cbmZ1bmN0aW9uIEJqKGEsYil7d2o9MDtpZihiKXJldHVybiBiPUdnKCksQ2ooYSxiKSxaKGEpLG51bGw7dmFyIGM9emooYSk7aWYoMCE9PWMpe2I9YS5jYWxsYmFja05vZGU7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYz09PVV8fEVqKGEsYyk7aWYobnVsbCE9PVgpe3ZhciBkPVc7V3w9Zmo7dmFyIGU9RmooKTtkbyB0cnl7R2ooKTticmVha31jYXRjaChoKXtIaihhLGgpfXdoaWxlKDEpO25nKCk7Vz1kO2NqLmN1cnJlbnQ9ZTtpZihTPT09aGopdGhyb3cgYj1raixFaihhLGMpLHhpKGEsYyksWihhKSxiO2lmKG51bGw9PT1YKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1TLFQ9bnVsbCxkKXtjYXNlIHRpOmNhc2UgaGo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIGlqOkNqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB1aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKDEwNzM3NDE4MjM9PT1saiYmKGU9VGkrcGotJGYoKSwxMDxlKSl7aWYob2ope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfX1mPXpqKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGUpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugdmk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYob2omJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha31lPXpqKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT1taj9kPTEwKigxMDczNzQxODIxLW1qKS0kZigpOjEwNzM3NDE4MjM9PT1saj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEtbGopLTVFMyxlPSRmKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpiaihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSBqajppZigxMDczNzQxODIzIT09bGomJm51bGwhPT1uail7Zj1sajt2YXIgZz1uajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj0kZigpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe3hpKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxuSGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfX1KaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBCai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24geWooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYj09PVV8fEVqKGEsYik7aWYobnVsbCE9PVgpe3ZhciBjPVc7V3w9Zmo7dmFyIGQ9RmooKTtkbyB0cnl7S2ooKTticmVha31jYXRjaChlKXtIaihhLGUpfXdoaWxlKDEpO25nKCk7Vz1jO2NqLmN1cnJlbnQ9ZDtpZihTPT09aGopdGhyb3cgYz1raixFaihhLGIpLHhpKGEsYiksWihhKSxjO2lmKG51bGwhPT1YKXRocm93IEVycm9yKHUoMjYxKSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YjtUPW51bGw7SmooYSk7WihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBMaigpe2lmKG51bGwhPT10ail7dmFyIGE9dGo7dGo9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXtDaihjLGEpO1ooYyl9KTtnZygpfX1cbmZ1bmN0aW9uIE1qKGEsYil7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19ZnVuY3Rpb24gTmooYSxiKXt2YXIgYz1XO1cmPS0yO1d8PWVqO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19XG5mdW5jdGlvbiBFaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxJZChjKSk7aWYobnVsbCE9PVgpZm9yKGM9WC5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZEZigpO2JyZWFrO2Nhc2UgMzplaCgpO0goSyk7SChKKTticmVhaztjYXNlIDU6Z2goZCk7YnJlYWs7Y2FzZSA0OmVoKCk7YnJlYWs7Y2FzZSAxMzpIKE0pO2JyZWFrO2Nhc2UgMTk6SChNKTticmVhaztjYXNlIDEwOm9nKGQpfWM9Yy5yZXR1cm59VD1hO1g9U2coYS5jdXJyZW50LG51bGwpO1U9YjtTPXRpO2tqPW51bGw7bWo9bGo9MTA3Mzc0MTgyMztuaj1udWxsO3dpPTA7b2o9ITF9XG5mdW5jdGlvbiBIaihhLGIpe2Rve3RyeXtuZygpO2poLmN1cnJlbnQ9c2g7aWYobWgpZm9yKHZhciBjPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09Yzspe3ZhciBkPWMucXVldWU7bnVsbCE9PWQmJihkLnBlbmRpbmc9bnVsbCk7Yz1jLm5leHR9bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKG51bGw9PT1YfHxudWxsPT09WC5yZXR1cm4pcmV0dXJuIFM9aGosa2o9YixYPW51bGw7YTp7dmFyIGU9YSxmPVgucmV0dXJuLGc9WCxoPWI7Yj1VO2cuZWZmZWN0VGFnfD0yMDQ4O2cuZmlyc3RFZmZlY3Q9Zy5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWgmJlwib2JqZWN0XCI9PT10eXBlb2YgaCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGgudGhlbil7dmFyIGs9aDtpZigwPT09KGcubW9kZSYyKSl7dmFyIGw9Zy5hbHRlcm5hdGU7bD8oZy51cGRhdGVRdWV1ZT1sLnVwZGF0ZVF1ZXVlLGcubWVtb2l6ZWRTdGF0ZT1sLm1lbW9pemVkU3RhdGUsZy5leHBpcmF0aW9uVGltZT1sLmV4cGlyYXRpb25UaW1lKTooZy51cGRhdGVRdWV1ZT1cbm51bGwsZy5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBtPTAhPT0oTS5jdXJyZW50JjEpLHA9Zjtkb3t2YXIgeDtpZih4PTEzPT09cC50YWcpe3ZhciB6PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eil4PW51bGwhPT16LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgY2E9cC5tZW1vaXplZFByb3BzO3g9dm9pZCAwPT09Y2EuZmFsbGJhY2s/ITE6ITAhPT1jYS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDptPyExOiEwfX1pZih4KXt2YXIgRD1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1EKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO3AudXBkYXRlUXVldWU9dH1lbHNlIEQuYWRkKGspO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmVmZmVjdFRhZ3w9NjQ7Zy5lZmZlY3RUYWcmPS0yOTgxO2lmKDE9PT1nLnRhZylpZihudWxsPT09Zy5hbHRlcm5hdGUpZy50YWc9MTc7ZWxzZXt2YXIgeT13ZygxMDczNzQxODIzLG51bGwpO3kudGFnPTI7eGcoZyx5KX1nLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7XG5icmVhayBhfWg9dm9pZCAwO2c9Yjt2YXIgQT1lLnBpbmdDYWNoZTtudWxsPT09QT8oQT1lLnBpbmdDYWNoZT1uZXcgV2ksaD1uZXcgU2V0LEEuc2V0KGssaCkpOihoPUEuZ2V0KGspLHZvaWQgMD09PWgmJihoPW5ldyBTZXQsQS5zZXQoayxoKSkpO2lmKCFoLmhhcyhnKSl7aC5hZGQoZyk7dmFyIHE9T2ouYmluZChudWxsLGUsayxnKTtrLnRoZW4ocSxxKX1wLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtoPUVycm9yKChwYihnLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrcWIoZykpfVMhPT1cbmpqJiYoUz1paik7aD1BaShoLGcpO3A9Zjtkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzprPWg7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciBCPVhpKHAsayxiKTt5ZyhwLEIpO2JyZWFrIGE7Y2FzZSAxOms9aDt2YXIgdz1wLnR5cGUsdWI9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11YiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHViLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKHViKSkpKXtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIHZiPSRpKHAsayxiKTt5ZyhwLHZiKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1YPVBqKFgpfWNhdGNoKFhjKXtiPVhjO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gRmooKXt2YXIgYT1jai5jdXJyZW50O2NqLmN1cnJlbnQ9c2g7cmV0dXJuIG51bGw9PT1hP3NoOmF9ZnVuY3Rpb24gQWcoYSxiKXthPGxqJiYyPGEmJihsaj1hKTtudWxsIT09YiYmYTxtaiYmMjxhJiYobWo9YSxuaj1iKX1mdW5jdGlvbiBCZyhhKXthPndpJiYod2k9YSl9ZnVuY3Rpb24gS2ooKXtmb3IoO251bGwhPT1YOylYPVFqKFgpfWZ1bmN0aW9uIEdqKCl7Zm9yKDtudWxsIT09WCYmIVVmKCk7KVg9UWooWCl9ZnVuY3Rpb24gUWooYSl7dmFyIGI9UmooYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPVBqKGEpKTtkai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQaihhKXtYPWE7ZG97dmFyIGI9WC5hbHRlcm5hdGU7YT1YLnJldHVybjtpZigwPT09KFguZWZmZWN0VGFnJjIwNDgpKXtiPXNpKGIsWCxVKTtpZigxPT09VXx8MSE9PVguY2hpbGRFeHBpcmF0aW9uVGltZSl7Zm9yKHZhciBjPTAsZD1YLmNoaWxkO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZSxmPWQuY2hpbGRFeHBpcmF0aW9uVGltZTtlPmMmJihjPWUpO2Y+YyYmKGM9Zik7ZD1kLnNpYmxpbmd9WC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9WC5maXJzdEVmZmVjdCksbnVsbCE9PVgubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9WC5sYXN0RWZmZWN0KSwxPFguZWZmZWN0VGFnJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVg6YS5maXJzdEVmZmVjdD1YLGEubGFzdEVmZmVjdD1YKSl9ZWxzZXtiPXppKFgpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1YLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7WD1hfXdoaWxlKG51bGwhPT1YKTtTPT09dGkmJihTPWpqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIEpqKGEpe3ZhciBiPWFnKCk7Y2coOTksU2ouYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gU2ooYSxiKXtkbyBEaigpO3doaWxlKG51bGwhPT1yaik7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1JaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1UJiYoWD1UPW51bGwsVT0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1XO1d8PWdqO2RqLmN1cnJlbnQ9bnVsbDtEZD1mZDt2YXIgZz14ZCgpO2lmKHlkKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2god2Ipe2g9bnVsbDticmVhayBhfXZhciBwPTAseD0tMSx6PS0xLGNhPTAsRD0wLHQ9Zyx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXt0IT09aHx8MCE9PWwmJjMhPT10Lm5vZGVUeXBlfHwoeD1wK2wpO3QhPT1tfHwwIT09ayYmMyE9PXQubm9kZVR5cGV8fCh6PXArayk7Mz09PXQubm9kZVR5cGUmJihwKz10Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT10LmZpcnN0Q2hpbGQpKWJyZWFrO3k9dDt0PUF9Zm9yKDs7KXtpZih0PT09ZylicmVhayBiO3k9PT1oJiYrK2NhPT09bCYmKHg9cCk7eT09PW0mJisrRD09PWsmJih6PXApO2lmKG51bGwhPT0oQT10Lm5leHRTaWJsaW5nKSlicmVhazt0PXk7eT10LnBhcmVudE5vZGV9dD1BfWg9LTE9PT14fHwtMT09PXo/bnVsbDp7c3RhcnQ6eCxlbmQ6en19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDtFZD17YWN0aXZlRWxlbWVudERldGFjaGVkOm51bGwsZm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtZPWU7ZG8gdHJ5e1RqKCl9Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcT1ZLmVmZmVjdFRhZztxJjE2JiZSYihZLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIEI9WS5hbHRlcm5hdGU7aWYobnVsbCE9PUIpe3ZhciB3PUIucmVmO251bGwhPT13JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHc/dyhudWxsKTp3LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjEwMzgpe2Nhc2UgMjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OlBpKFkpO1kuZWZmZWN0VGFnJj0tMztTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9XG4tMTAyNTtTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxNaShnLGwsaCksTmkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt3PUVkO0I9eGQoKTtxPXcuZm9jdXNlZEVsZW07aD13LnNlbGVjdGlvblJhbmdlO2lmKEIhPT1xJiZxJiZxLm93bmVyRG9jdW1lbnQmJndkKHEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe251bGwhPT1oJiZ5ZChxKSYmKEI9aC5zdGFydCx3PWguZW5kLHZvaWQgMD09PXcmJih3PUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9QixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih3LHEudmFsdWUubGVuZ3RoKSk6KHc9KEI9cS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyx3LmdldFNlbGVjdGlvbiYmXG4odz13LmdldFNlbGVjdGlvbigpLGw9cS50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdy5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPXZkKHEsZyksbT12ZChxLGgpLGwmJm0mJigxIT09dy5yYW5nZUNvdW50fHx3LmFuY2hvck5vZGUhPT1sLm5vZGV8fHcuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHcuZm9jdXNOb2RlIT09bS5ub2RlfHx3LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYoQj1CLmNyZWF0ZVJhbmdlKCksQi5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHcucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh3LmFkZFJhbmdlKEIpLHcuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOihCLnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHcuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2Zvcih3PXE7dz13LnBhcmVudE5vZGU7KTE9PT13Lm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6dyxsZWZ0Oncuc2Nyb2xsTGVmdCxcbnRvcDp3LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPEIubGVuZ3RoO3ErKyl3PUJbcV0sdy5lbGVtZW50LnNjcm9sbExlZnQ9dy5sZWZ0LHcuZWxlbWVudC5zY3JvbGxUb3A9dy50b3B9ZmQ9ISFEZDtFZD1EZD1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHE9YTtudWxsIT09WTspe3ZhciB1Yj1ZLmVmZmVjdFRhZzt1YiYzNiYmSmkocSxZLmFsdGVybmF0ZSxZKTtpZih1YiYxMjgpe0I9dm9pZCAwO3ZhciB2Yj1ZLnJlZjtpZihudWxsIT09dmIpe3ZhciBYYz1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTpCPVhjO2JyZWFrO2RlZmF1bHQ6Qj1YY31cImZ1bmN0aW9uXCI9PT10eXBlb2YgdmI/dmIoQik6dmIuY3VycmVudD1CfX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9XG5udWxsO1ZmKCk7Vz1mfWVsc2UgYS5jdXJyZW50PWM7aWYocWopcWo9ITEscmo9YSxzaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiYoYWo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PXZqP3VqKys6KHVqPTAsdmo9YSk6dWo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVWomJlVqKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoWWkpdGhyb3cgWWk9ITEsYT1aaSxaaT1udWxsLGE7aWYoKFcmZWopIT09VilyZXR1cm4gbnVsbDtnZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIFRqKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZHaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8cWp8fChxaj0hMCxkZyg5NyxmdW5jdGlvbigpe0RqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gRGooKXtpZig5MCE9PXNqKXt2YXIgYT05Nzxzaj85Nzpzajtzaj05MDtyZXR1cm4gY2coYSxWail9fWZ1bmN0aW9uIFZqKCl7aWYobnVsbD09PXJqKXJldHVybiExO3ZhciBhPXJqO3JqPW51bGw7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VztXfD1najtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SGkoNSxjKSxJaSg1LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVc9YjtnZygpO3JldHVybiEwfVxuZnVuY3Rpb24gV2ooYSxiLGMpe2I9QWkoYyxiKTtiPVhpKGEsYiwxMDczNzQxODIzKTt4ZyhhLGIpO2E9eGooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1mdW5jdGlvbiBFaShhLGIpe2lmKDM9PT1hLnRhZylXaihhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe1dqKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKGQpKSl7YT1BaShiLGEpO2E9JGkoYyxhLDEwNzM3NDE4MjMpO3hnKGMsYSk7Yz14aihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIE9qKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VD09PWEmJlU9PT1jP1M9PT12aXx8Uz09PXVpJiYxMDczNzQxODIzPT09bGomJiRmKCktVGk8cGo/RWooYSxVKTpvaj0hMDpBaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsWihhKSkpfWZ1bmN0aW9uIFZpKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9R2coKSxiPUhnKGIsYSxudWxsKSk7YT14aihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBSajtcblJqPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpcmc9ITA7ZWxzZXtpZihkPGMpe3JnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOmhpKGIpO1hoKCk7YnJlYWs7Y2FzZSA1OmZoKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZHZihiKTticmVhaztjYXNlIDQ6ZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO2U9Yi50eXBlLl9jb250ZXh0O0koamcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuaWYoMCE9PWQmJmQ+PWMpcmV0dXJuIGppKGEsYixjKTtJKE0sTS5jdXJyZW50JjEpO2I9JGgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIG1pKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50KTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gJGgoYSxiLGMpfXJnPSExfX1lbHNlIHJnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUNmKGIsSi5jdXJyZW50KTtxZyhiLGMpO2U9b2gobnVsbCxcbmIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihMKGQpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt1ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmRmcoYixkLGcsYSk7ZS51cGRhdGVyPUpnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7TmcoYixkLGEsYyk7Yj1naShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmE6e2U9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPVxubnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO29iKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O2U9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9WGooZSk7YT1pZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1kaShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9ZmkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaChudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFpKG51bGwsYixlLGlnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxkaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxmaShhLGIsZCxlLGMpO1xuY2FzZSAzOmhpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtkPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7dmcoYSxiKTt6ZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVhoKCksYj0kaChhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpUGg9SmQoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxPaD1iLGU9UWg9ITA7aWYoZSlmb3IoYz1ZZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksWGgoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBmaChiKSxudWxsPT09YSYmVWgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpcbm51bGwsZz1lLmNoaWxkcmVuLEdkKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZHZChkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxlaShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmVWgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBqaShhLGIsYyk7Y2FzZSA0OnJldHVybiBkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1YZyhiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxaaChhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0koamcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj0kZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPSRoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1cbmspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXdnKGMsbnVsbCksbC50YWc9Mix4ZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7cGcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1cbmd9UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixxZyhiLGMpLGU9c2coZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWlnKGUsYi5wZW5kaW5nUHJvcHMpLGY9aWcoZS50eXBlLGYpLGFpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBjaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEdmKGIpKTphPSExLHFnKGIsYyksTGcoYixkLGUpLE5nKGIsZCxlLGMpLGdpKG51bGwsXG5iLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBVaj1udWxsLExpPW51bGw7ZnVuY3Rpb24gWWooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VWo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07TGk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaaihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIFNoKGEsYixjLGQpe3JldHVybiBuZXcgWmooYSxiLGMsZCl9XG5mdW5jdGlvbiBiaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFhqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2IpcmV0dXJuIDExO2lmKGE9PT1qYilyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBTZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPVNoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVWcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFiOnJldHVybiBXZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZiOmc9ODtlfD03O2JyZWFrO2Nhc2UgYmI6Zz04O2V8PTE7YnJlYWs7Y2FzZSBjYjpyZXR1cm4gYT1TaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNiLGEudHlwZT1jYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhiOnJldHVybiBhPVNoKDEzLGMsYixlKSxhLnR5cGU9aGIsYS5lbGVtZW50VHlwZT1oYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGliOnJldHVybiBhPVNoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWliLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYjpnPVxuMTA7YnJlYWsgYTtjYXNlIGViOmc9OTticmVhayBhO2Nhc2UgZ2I6Zz0xMTticmVhayBhO2Nhc2UgamI6Zz0xNDticmVhayBhO2Nhc2Uga2I6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIGxiOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPVNoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gV2coYSxiLGMsZCl7YT1TaCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVGcoYSxiLGMpe2E9U2goNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gVmcoYSxiLGMpe2I9U2goNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gQWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIHhpKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiB5aShhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIENqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gYmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2coKSxnPURnLnN1c3BlbnNlO2Y9SGcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZGMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1GZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1BZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXdnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7eGcoZSxiKTtJZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIGNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIGVrKGEsYil7ZGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmRrKGEsYil9XG5mdW5jdGlvbiBmayhhLGIsYyl7Yz1udWxsIT1jJiYhMD09PWMuaHlkcmF0ZTt2YXIgZD1uZXcgYWsoYSxiLGMpLGU9U2goMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2QuY3VycmVudD1lO2Uuc3RhdGVOb2RlPWQ7dWcoZSk7YVtPZF09ZC5jdXJyZW50O2MmJjAhPT1iJiZKYyhhLDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH1may5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2JrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O2ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2JrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltPZF09bnVsbH0pfTtcbmZ1bmN0aW9uIGdrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBoayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGZrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gaWsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtoLmNhbGwoYSl9fWJrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9aGsoYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7ay5jYWxsKGEpfX1OaihmdW5jdGlvbigpe2JrKGIsZyxhLGUpfSl9cmV0dXJuIGNrKGcpfWZ1bmN0aW9uIGprKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG53Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1oZyhHZygpLDE1MCwxMDApO0lnKGEsYik7ZWsoYSxiKX19O3hjPWZ1bmN0aW9uKGEpezEzPT09YS50YWcmJihJZyhhLDMpLGVrKGEsMykpfTt5Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1HZygpO2I9SGcoYixhLG51bGwpO0lnKGEsYik7ZWsoYSxiKX19O1xuemE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UWQoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3liKGQpO0NiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpLYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYT1NajtcbkdhPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9VztXfD00O3RyeXtyZXR1cm4gY2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7Vz1mLFc9PT1WJiZnZygpfX07SGE9ZnVuY3Rpb24oKXsoVyYoMXxmanxnaikpPT09ViYmKExqKCksRGooKSl9O0lhPWZ1bmN0aW9uKGEsYil7dmFyIGM9VztXfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19O2Z1bmN0aW9uIGtrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGprKGEsYixudWxsLGMpfXZhciBsaz17RXZlbnRzOltOYyxQZCxRZCx4YSx0YSxYZCxmdW5jdGlvbihhKXtqYyhhLFdkKX0sRGEsRWEsaWQsbWMsRGose2N1cnJlbnQ6ITF9XX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWoobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOldhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTMuMVwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1saztleHBvcnRzLmNyZWF0ZVBvcnRhbD1raztleHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aGMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtcbmV4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gY2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7Vz1jLGdnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMCxjKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMSxjKX07XG5leHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIWdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhOaihmdW5jdGlvbigpe2lrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtPZF09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPU1qO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGtrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighZ2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiBpayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOS4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==