!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=33)}([function(e,t,n){"use strict";e.exports=n(24)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(28)()},function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"f",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"g",(function(){return l})),n.d(t,"h",(function(){return u})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return s})),n.d(t,"e",(function(){return f})),n.d(t,"i",(function(){return d}));var r="@@router/LOCATION_CHANGE",o=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return{type:r,payload:{location:e,action:t,isFirstRendering:n}}},i="@@router/CALL_HISTORY_METHOD",a=function(e){return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return{type:i,payload:{method:e,args:n}}}},l=a("push"),u=a("replace"),c=a("go"),s=a("goBack"),f=a("goForward"),d={push:l,replace:u,go:c,goBack:s,goForward:f}},function(e,t,n){"use strict";t.a=function(e,t){if(!e)throw new Error("Invariant failed")}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return i})),n.d(t,"applyMiddleware",(function(){return h})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return c})),n.d(t,"compose",(function(){return g})),n.d(t,"createStore",(function(){return l}));var r=n(14),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var u=e,c=t,s=[],f=s,d=!1;function p(){f===s&&(f=s.slice())}function m(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function g(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),s=null}}}function h(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,c=u(c,e)}finally{d=!1}for(var t=s=f,n=0;n<t.length;n++){(0,t[n])()}return e}function v(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");u=e,h({type:i.REPLACE})}function b(){var e,t=g;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(m())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return h({type:i.INIT}),(o={dispatch:h,subscribe:g,getState:m,replaceReducer:v})[r.a]=b,o}function u(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,l=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<l.length;i++){var c=l[i],s=n[c],f=e[c],d=s(f,t);if(void 0===d){var p=u(c,t);throw new Error(p)}o[c]=d,r=r||d!==f}return(r=r||l.length!==Object.keys(e).length)?o:e}}function s(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=s(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return m({},n,{dispatch:r=g.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return w})),n.d(t,"c",(function(){return E})),n.d(t,"b",(function(){return m})),n.d(t,"e",(function(){return g})),n.d(t,"d",(function(){return p}));var r=n(1);function o(e){return"/"===e.charAt(0)}function i(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var a=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],l=e&&o(e),u=t&&o(t),c=l||u;if(e&&o(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var s=a[a.length-1];n="."===s||".."===s||""===s}else n=!1;for(var f=0,d=a.length;d>=0;d--){var p=a[d];"."===p?i(a,d):".."===p?(i(a,d),f++):f&&(i(a,d),f--)}if(!c)for(;f--;f)a.unshift("..");!c||""===a[0]||a[0]&&o(a[0])||a.unshift("");var m=a.join("/");return n&&"/"!==m.substr(-1)&&(m+="/"),m};function l(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var u=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=l(t),o=l(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},c=n(4);function s(e){return"/"===e.charAt(0)?e:"/"+e}function f(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function d(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function p(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function m(e,t,n,o){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=Object(r.a)({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),o?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=a(i.pathname,o.pathname)):i.pathname=o.pathname:i.pathname||(i.pathname="/"),i}function g(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&u(e.state,t.state)}function h(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var v=!("undefined"==typeof window||!window.document||!window.document.createElement);function b(e,t){t(window.confirm(e))}function y(){try{return window.history.state||{}}catch(e){return{}}}function w(e){void 0===e&&(e={}),v||Object(c.a)(!1);var t,n=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,l=a.forceRefresh,u=void 0!==l&&l,g=a.getUserConfirmation,w=void 0===g?b:g,x=a.keyLength,E=void 0===x?6:x,S=e.basename?d(s(e.basename)):"";function T(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return S&&(i=f(i,S)),m(i,r,n)}function O(){return Math.random().toString(36).substr(2,E)}var C=h();function k(e){Object(r.a)(F,e),F.length=n.length,C.notifyListeners(F.location,F.action)}function P(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||N(T(e.state))}function I(){N(T(y()))}var D=!1;function N(e){if(D)D=!1,k();else{C.confirmTransitionTo(e,"POP",w,(function(t){t?k({action:"POP",location:e}):function(e){var t=F.location,n=A.indexOf(t.key);-1===n&&(n=0);var r=A.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(D=!0,j(o))}(e)}))}}var _=T(y()),A=[_.key];function R(e){return S+p(e)}function j(e){n.go(e)}var M=0;function L(e){1===(M+=e)&&1===e?(window.addEventListener("popstate",P),i&&window.addEventListener("hashchange",I)):0===M&&(window.removeEventListener("popstate",P),i&&window.removeEventListener("hashchange",I))}var B=!1;var F={length:n.length,action:"POP",location:_,createHref:R,push:function(e,t){var r=m(e,t,O(),F.location);C.confirmTransitionTo(r,"PUSH",w,(function(e){if(e){var t=R(r),i=r.key,a=r.state;if(o)if(n.pushState({key:i,state:a},null,t),u)window.location.href=t;else{var l=A.indexOf(F.location.key),c=A.slice(0,l+1);c.push(r.key),A=c,k({action:"PUSH",location:r})}else window.location.href=t}}))},replace:function(e,t){var r=m(e,t,O(),F.location);C.confirmTransitionTo(r,"REPLACE",w,(function(e){if(e){var t=R(r),i=r.key,a=r.state;if(o)if(n.replaceState({key:i,state:a},null,t),u)window.location.replace(t);else{var l=A.indexOf(F.location.key);-1!==l&&(A[l]=r.key),k({action:"REPLACE",location:r})}else window.location.replace(t)}}))},go:j,goBack:function(){j(-1)},goForward:function(){j(1)},block:function(e){void 0===e&&(e=!1);var t=C.setPrompt(e);return B||(L(1),B=!0),function(){return B&&(B=!1,L(-1)),t()}},listen:function(e){var t=C.appendListener(e);return L(1),function(){L(-1),t()}}};return F}function x(e,t,n){return Math.min(Math.max(e,t),n)}function E(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,o=t.initialEntries,i=void 0===o?["/"]:o,a=t.initialIndex,l=void 0===a?0:a,u=t.keyLength,c=void 0===u?6:u,s=h();function f(e){Object(r.a)(w,e),w.length=w.entries.length,s.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,c)}var g=x(l,0,i.length-1),v=i.map((function(e){return m(e,void 0,"string"==typeof e?d():e.key||d())})),b=p;function y(e){var t=x(w.index+e,0,w.entries.length-1),r=w.entries[t];s.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:v.length,action:"POP",location:v[g],index:g,entries:v,createHref:b,push:function(e,t){var r=m(e,t,d(),w.location);s.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=m(e,t,d(),w.location);s.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:y,goBack:function(){y(-1)},goForward:function(){y(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return w}},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return s})),n.d(t,"connectAdvanced",(function(){return T})),n.d(t,"ReactReduxContext",(function(){return i})),n.d(t,"connect",(function(){return z})),n.d(t,"batch",(function(){return X.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return q})),n.d(t,"createDispatchHook",(function(){return V})),n.d(t,"useSelector",(function(){return K})),n.d(t,"createSelectorHook",(function(){return Q})),n.d(t,"useStore",(function(){return H})),n.d(t,"createStoreHook",(function(){return W})),n.d(t,"shallowEqual",(function(){return C}));var r=n(0),o=n.n(r),i=(n(2),o.a.createContext(null));var a=function(e){e()},l={notify:function(){}};function u(){var e=a,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var c=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=l,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=u())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=l)},e}();var s=function(e){var t=e.store,n=e.context,a=e.children,l=Object(r.useMemo)((function(){var e=new c(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),u=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=l.subscription;return e.trySubscribe(),u!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[l,u]);var s=n||i;return o.a.createElement(s.Provider,{value:l},a)},f=n(1),d=n(5),p=n(10),m=n.n(p),g=n(13),h="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,v=[],b=[null,null];function y(e,t){var n=e[1];return[t.payload,n+1]}function w(e,t,n){h((function(){return e.apply(void 0,t)}),n)}function x(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function E(e,t,n,r,o,i,a,l,u,c){if(e){var s=!1,f=null,d=function(){if(!s){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||u():(i.current=e,l.current=e,a.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var S=function(){return[null,0]};function T(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,l=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,u=n.methodName,s=void 0===u?"connectAdvanced":u,p=n.renderCountProp,h=void 0===p?void 0:p,T=n.shouldHandleStateChanges,O=void 0===T||T,C=n.storeKey,k=void 0===C?"store":C,P=(n.withRef,n.forwardRef),I=void 0!==P&&P,D=n.context,N=void 0===D?i:D,_=Object(d.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),A=N;return function(t){var n=t.displayName||t.name||"Component",i=l(n),a=Object(f.a)({},_,{getDisplayName:l,methodName:s,renderCountProp:h,shouldHandleStateChanges:O,storeKey:k,displayName:i,wrappedComponentName:n,WrappedComponent:t}),u=_.pure;var p=u?r.useMemo:function(e){return e()};function T(n){var i=Object(r.useMemo)((function(){var e=n.forwardedRef,t=Object(d.a)(n,["forwardedRef"]);return[n.context,e,t]}),[n]),l=i[0],u=i[1],s=i[2],m=Object(r.useMemo)((function(){return l&&l.Consumer&&Object(g.isContextConsumer)(o.a.createElement(l.Consumer,null))?l:A}),[l,A]),h=Object(r.useContext)(m),T=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(h)&&Boolean(h.store);var C=T?n.store:h.store,k=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(C)}),[C]),P=Object(r.useMemo)((function(){if(!O)return b;var e=new c(C,T?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[C,T,h]),I=P[0],D=P[1],N=Object(r.useMemo)((function(){return T?h:Object(f.a)({},h,{subscription:I})}),[T,h,I]),_=Object(r.useReducer)(y,v,S),R=_[0][0],j=_[1];if(R&&R.error)throw R.error;var M=Object(r.useRef)(),L=Object(r.useRef)(s),B=Object(r.useRef)(),F=Object(r.useRef)(!1),U=p((function(){return B.current&&s===L.current?B.current:k(C.getState(),s)}),[C,R,s]);w(x,[L,M,F,s,U,B,D]),w(E,[O,C,I,k,L,M,F,B,D,j],[C,I,k]);var z=Object(r.useMemo)((function(){return o.a.createElement(t,Object(f.a)({},U,{ref:u}))}),[u,t,U]);return Object(r.useMemo)((function(){return O?o.a.createElement(m.Provider,{value:N},z):z}),[m,z,N])}var C=u?o.a.memo(T):T;if(C.WrappedComponent=t,C.displayName=i,I){var P=o.a.forwardRef((function(e,t){return o.a.createElement(C,Object(f.a)({},e,{forwardedRef:t}))}));return P.displayName=i,P.WrappedComponent=t,m()(P,t)}return m()(C,t)}}function O(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function C(e,t){if(O(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!O(e[n[o]],t[n[o]]))return!1;return!0}var k=n(7);function P(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function I(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function D(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=I(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=I(o),o=r(t,n)),o},r}}var N=[function(e){return"function"==typeof e?D(e):void 0},function(e){return e?void 0:P((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?P((function(t){return Object(k.bindActionCreators)(e,t)})):void 0}];var _=[function(e){return"function"==typeof e?D(e):void 0},function(e){return e?void 0:P((function(){return{}}))}];function A(e,t,n){return Object(f.a)({},n,{},e,{},t)}var R=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,l){var u=e(t,n,l);return a?o&&i(u,r)||(r=u):(a=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return A}}];function j(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function M(e,t,n,r,o){var i,a,l,u,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function m(o,p){var m,g,h=!f(p,a),v=!s(o,i);return i=o,a=p,h&&v?(l=e(i,a),t.dependsOnOwnProps&&(u=t(r,a)),c=n(l,u,a)):h?(e.dependsOnOwnProps&&(l=e(i,a)),t.dependsOnOwnProps&&(u=t(r,a)),c=n(l,u,a)):v?(m=e(i,a),g=!d(m,l),l=m,g&&(c=n(l,u,a)),c):c}return function(o,s){return p?m(o,s):(l=e(i=o,a=s),u=t(r,a),c=n(l,u,a),p=!0,c)}}function L(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Object(d.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),l=r(e,i),u=o(e,i);return(i.pure?M:j)(a,l,u,e,i)}function B(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function F(e,t){return e===t}function U(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?T:n,o=t.mapStateToPropsFactories,i=void 0===o?_:o,a=t.mapDispatchToPropsFactories,l=void 0===a?N:a,u=t.mergePropsFactories,c=void 0===u?R:u,s=t.selectorFactory,p=void 0===s?L:s;return function(e,t,n,o){void 0===o&&(o={});var a=o,u=a.pure,s=void 0===u||u,m=a.areStatesEqual,g=void 0===m?F:m,h=a.areOwnPropsEqual,v=void 0===h?C:h,b=a.areStatePropsEqual,y=void 0===b?C:b,w=a.areMergedPropsEqual,x=void 0===w?C:w,E=Object(d.a)(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),S=B(e,i,"mapStateToProps"),T=B(t,l,"mapDispatchToProps"),O=B(n,c,"mergeProps");return r(p,Object(f.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:S,initMapDispatchToProps:T,initMergeProps:O,pure:s,areStatesEqual:g,areOwnPropsEqual:v,areStatePropsEqual:y,areMergedPropsEqual:x},E))}}var z=U();function G(){return Object(r.useContext)(i)}function W(e){void 0===e&&(e=i);var t=e===i?G:function(){return Object(r.useContext)(e)};return function(){return t().store}}var H=W();function V(e){void 0===e&&(e=i);var t=e===i?H:W(e);return function(){return t().dispatch}}var q=V(),$=function(e,t){return e===t};function Q(e){void 0===e&&(e=i);var t=e===i?G:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=$);var o=t();return function(e,t,n,o){var i,a=Object(r.useReducer)((function(e){return e+1}),0)[1],l=Object(r.useMemo)((function(){return new c(n,o)}),[n,o]),u=Object(r.useRef)(),s=Object(r.useRef)(),f=Object(r.useRef)();try{i=e!==s.current||u.current?e(n.getState()):f.current}catch(e){throw u.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+u.current.stack+"\n\n"),e}return h((function(){s.current=e,f.current=i,u.current=void 0})),h((function(){function e(){try{var e=s.current(n.getState());if(t(e,f.current))return;f.current=e}catch(e){u.current=e}a({})}return l.onStateChange=e,l.trySubscribe(),e(),function(){return l.tryUnsubscribe()}}),[n,l]),i}(e,n,o.store,o.subscription)}}var Y,K=Q(),X=n(11);Y=X.unstable_batchedUpdates,a=Y},function(e,t,n){"use strict";var r=n(13),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var l=u(t),g=u(n),h=0;h<a.length;++h){var v=a[h];if(!(i[v]||r&&r[v]||g&&g[v]||l&&l[v])){var b=d(n,v);try{c(t,v,b)}catch(e){}}}}return t}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(25)},function(e,t,n){"use strict";n.r(t),n.d(t,"MemoryRouter",(function(){return b})),n.d(t,"Prompt",(function(){return w})),n.d(t,"Redirect",(function(){return T})),n.d(t,"Route",(function(){return P})),n.d(t,"Router",(function(){return v})),n.d(t,"StaticRouter",(function(){return R})),n.d(t,"Switch",(function(){return j})),n.d(t,"__HistoryContext",(function(){return g})),n.d(t,"__RouterContext",(function(){return h})),n.d(t,"generatePath",(function(){return S})),n.d(t,"matchPath",(function(){return k})),n.d(t,"useHistory",(function(){return B})),n.d(t,"useLocation",(function(){return F})),n.d(t,"useParams",(function(){return U})),n.d(t,"useRouteMatch",(function(){return z})),n.d(t,"withRouter",(function(){return M}));var r=n(6),o=n(0),i=n.n(o),a=(n(2),n(8)),l=n(15),u=n(4),c=n(1),s=n(16),f=n.n(s),d=(n(13),n(5)),p=n(10),m=n.n(p),g=function(e){var t=Object(l.a)();return t.displayName=e,t}("Router-History"),h=function(e){var t=Object(l.a)();return t.displayName=e,t}("Router"),v=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(r.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return i.a.createElement(h.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.a.createElement(g.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.a.Component);var b=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=Object(a.c)(t.props),t}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(v,{history:this.history,children:this.props.children})},t}(i.a.Component);var y=function(e){function t(){return e.apply(this,arguments)||this}Object(r.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(i.a.Component);function w(e){var t=e.message,n=e.when,r=void 0===n||n;return i.a.createElement(h.Consumer,null,(function(e){if(e||Object(u.a)(!1),!r||e.staticContext)return null;var n=e.history.block;return i.a.createElement(y,{onMount:function(e){e.release=n(t)},onUpdate:function(e,r){r.message!==t&&(e.release(),e.release=n(t))},onUnmount:function(e){e.release()},message:t})}))}var x={},E=0;function S(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(x[e])return x[e];var t=f.a.compile(e);return E<1e4&&(x[e]=t,E++),t}(e)(t,{pretty:!0})}function T(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return i.a.createElement(h.Consumer,null,(function(e){e||Object(u.a)(!1);var r=e.history,l=e.staticContext,s=o?r.push:r.replace,f=Object(a.b)(t?"string"==typeof n?S(n,t.params):Object(c.a)({},n,{pathname:S(n.pathname,t.params)}):n);return l?(s(f),null):i.a.createElement(y,{onMount:function(){s(f)},onUpdate:function(e,t){var n=Object(a.b)(t.to);Object(a.e)(n,Object(c.a)({},f,{key:n.key}))||s(f)},to:n})}))}var O={},C=0;function k(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,l=void 0!==a&&a,u=n.sensitive,c=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=O[n]||(O[n]={});if(r[e])return r[e];var o=[],i={regexp:f()(e,o,t),keys:o};return C<1e4&&(r[e]=i,C++),i}(n,{end:i,strict:l,sensitive:c}),o=r.regexp,a=r.keys,u=o.exec(e);if(!u)return null;var s=u[0],d=u.slice(1),p=e===s;return i&&!p?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=d[n],e}),{})}}),null)}var P=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(h.Consumer,null,(function(t){t||Object(u.a)(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?k(n.pathname,e.props):t.match,o=Object(c.a)({},t,{location:n,match:r}),a=e.props,l=a.children,s=a.component,f=a.render;return Array.isArray(l)&&0===l.length&&(l=null),i.a.createElement(h.Provider,{value:o},o.match?l?"function"==typeof l?l(o):l:s?i.a.createElement(s,o):f?f(o):null:"function"==typeof l?l(o):null)}))},t}(i.a.Component);function I(e){return"/"===e.charAt(0)?e:"/"+e}function D(e,t){if(!e)return t;var n=I(e);return 0!==t.pathname.indexOf(n)?t:Object(c.a)({},t,{pathname:t.pathname.substr(n.length)})}function N(e){return"string"==typeof e?e:Object(a.d)(e)}function _(e){return function(){Object(u.a)(!1)}}function A(){}var R=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handlePush=function(e){return t.navigateTo(e,"PUSH")},t.handleReplace=function(e){return t.navigateTo(e,"REPLACE")},t.handleListen=function(){return A},t.handleBlock=function(){return A},t}Object(r.a)(t,e);var n=t.prototype;return n.navigateTo=function(e,t){var n=this.props,r=n.basename,o=void 0===r?"":r,i=n.context,l=void 0===i?{}:i;l.action=t,l.location=function(e,t){return e?Object(c.a)({},t,{pathname:I(e)+t.pathname}):t}(o,Object(a.b)(e)),l.url=N(l.location)},n.render=function(){var e=this.props,t=e.basename,n=void 0===t?"":t,r=e.context,o=void 0===r?{}:r,l=e.location,u=void 0===l?"/":l,s=Object(d.a)(e,["basename","context","location"]),f={createHref:function(e){return I(n+N(e))},action:"POP",location:D(n,Object(a.b)(u)),push:this.handlePush,replace:this.handleReplace,go:_(),goBack:_(),goForward:_(),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(v,Object(c.a)({},s,{history:f,staticContext:o}))},t}(i.a.Component);var j=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(h.Consumer,null,(function(t){t||Object(u.a)(!1);var n,r,o=e.props.location||t.location;return i.a.Children.forEach(e.props.children,(function(e){if(null==r&&i.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?k(o.pathname,Object(c.a)({},e.props,{path:a})):t.match}})),r?i.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(i.a.Component);function M(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(d.a)(t,["wrappedComponentRef"]);return i.a.createElement(h.Consumer,null,(function(t){return t||Object(u.a)(!1),i.a.createElement(e,Object(c.a)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,m()(n,e)}var L=i.a.useContext;function B(){return L(g)}function F(){return L(h).location}function U(){var e=L(h).match;return e?e.params:{}}function z(e){var t=F(),n=L(h).match;return e?k(t.pathname,e):n}},function(e,t,n){"use strict";e.exports=n(30)},function(e,t,n){"use strict";(function(e,r){var o,i=n(22);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(19),n(31)(e))},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),i=n(6),a=n(2),l=n.n(a),u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,a,s="__create-react-context-"+((u[a="__global_unique_id__"]=(u[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(i.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=l.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(i.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[s]=l.a.object,o),{Provider:f,Consumer:d}};t.a=s}).call(this,n(19))},function(e,t,n){var r=n(32);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,l="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(a,p),a=p+f.length,d)l+=d[1];else{var m=e[a],g=n[2],h=n[3],v=n[4],b=n[5],y=n[6],w=n[7];l&&(r.push(l),l="");var x=null!=g&&null!=m&&m!==g,E="+"===y||"*"===y,S="?"===y||"*"===y,T=n[2]||s,O=v||b;r.push({name:h||i++,prefix:g||"",delimiter:T,optional:S,repeat:E,partial:x,asterisk:!!w,pattern:O?c(O):w?".*":"[^"+u(T)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&r.push(l),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",l=t||{},u=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=l[s.name];if(null==d){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var c=e[l];if("string"==typeof c)a+=u(c);else{var d=u(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var m=u(n.delimiter||"/"),g=a.slice(-m.length)===m;return o||(a=(g?a.slice(0,-m.length):a)+"(?:"+m+"(?=$))?"),a+=i?"$":o&&g?"":"(?="+m+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(u[s]=n[s]);if(r){l=r(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(3);function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}t.a=function(e){return function(t){return function(t){return function(n){if(n.type!==r.a)return t(n);var i=n.payload,a=i.method,l=i.args;e[a].apply(e,o(l))}}}}},function(e,t,n){"use strict";n.r(t),n.d(t,"LOCATION_CHANGE",(function(){return c.b})),n.d(t,"CALL_HISTORY_METHOD",(function(){return c.a})),n.d(t,"onLocationChanged",(function(){return c.f})),n.d(t,"push",(function(){return c.g})),n.d(t,"replace",(function(){return c.h})),n.d(t,"go",(function(){return c.c})),n.d(t,"goBack",(function(){return c.d})),n.d(t,"goForward",(function(){return c.e})),n.d(t,"routerActions",(function(){return c.i})),n.d(t,"routerMiddleware",(function(){return P.a})),n.d(t,"ConnectedRouter",(function(){return I})),n.d(t,"connectRouter",(function(){return D})),n.d(t,"getLocation",(function(){return _})),n.d(t,"getAction",(function(){return A})),n.d(t,"getHash",(function(){return R})),n.d(t,"getSearch",(function(){return j})),n.d(t,"createMatchSelector",(function(){return M}));var r=n(0),o=n.n(r),i=n(2),a=n.n(i),l=n(9),u=n(12),c=n(3);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f=function(e){var t=e.getIn,n=e.toJS,r=function(e){var r,o=n(t(e,["router"]));if(null==(r=o)||"object"!==s(r)||!t(r,["location"])||!t(r,["action"]))throw'Could not find router reducer in state tree, it must be mounted under "router"';return o},o=function(e){return n(t(r(e),["location"]))};return{getLocation:o,getAction:function(e){return n(t(r(e),["action"]))},getRouter:r,getSearch:function(e){return n(t(r(e),["location","search"]))},getHash:function(e){return n(t(r(e),["location","hash"]))},createMatchSelector:function(e){var t=null,n=null;return function(r){var i=(o(r)||{}).pathname;if(i===t)return n;t=i;var a=Object(u.matchPath)(i,e);return a&&n&&a.url===n.url&&a.isExact===n.isExact||(n=a),n}}}};function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var b=function(e){var t=f(e).getLocation,n=function(e){function n(e){var r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),r=g(this,h(n).call(this,e));var o=e.store,i=e.history,a=e.onLocationChanged;r.inTimeTravelling=!1,r.unsubscribe=o.subscribe((function(){var n=t(o.getState()),a=n.pathname,l=n.search,u=n.hash,c=n.state,s=i.location,f=s.pathname,d=s.search,p=s.hash,m=s.state;"PUSH"!==e.history.action||f===a&&d===l&&p===u&&c===m||(r.inTimeTravelling=!0,i.push({pathname:a,search:l,hash:u,state:c}))}));var l=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];r.inTimeTravelling?r.inTimeTravelling=!1:a(e,t,n)};return r.unlisten=i.listen(l),e.noInitialPop||l(i.location,i.action,!0),r}var r,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(n,e),r=n,(i=[{key:"componentWillUnmount",value:function(){this.unlisten(),this.unsubscribe()}},{key:"render",value:function(){var e=this.props,t=e.history,n=e.children;return o.a.createElement(u.Router,{history:t},n)}}])&&m(r.prototype,i),a&&m(r,a),n}(r.PureComponent);n.propTypes={store:a.a.shape({getState:a.a.func.isRequired,subscribe:a.a.func.isRequired}).isRequired,history:a.a.shape({action:a.a.string.isRequired,listen:a.a.func.isRequired,location:a.a.object.isRequired,push:a.a.func.isRequired}).isRequired,basename:a.a.string,children:a.a.oneOfType([a.a.func,a.a.node]),onLocationChanged:a.a.func.isRequired,noInitialPop:a.a.bool};var i=function(e){var t=e.context||l.ReactReduxContext;if(null==t)throw"Please upgrade to react-redux v6";return o.a.createElement(t.Consumer,null,(function(t){var r=t.store;return o.a.createElement(n,p({store:r},e))}))};return i.propTypes={context:a.a.object},Object(l.connect)(null,(function(e){return{onLocationChanged:function(t,n,r){return e(Object(c.f)(t,n,r))}}}))(i)};function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var S=function(e){if(e&&e.query)return e;var t=e&&e.search;if("string"!=typeof t||0===t.length)return x({},e,{query:{}});var n=t.substring(1).split("&").reduce((function(e,t){var n=y(t.split("="),2);return x({},e,E({},n[0],n[1]))}),{});return x({},e,{query:n})},T=function(e){var t=e.fromJS,n=e.merge;return function(e){var r=t({location:S(e.location),action:e.action});return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.type,a=o.payload;if(i===c.b){var l=a.location,u=a.action,s=a.isFirstRendering;return s?e:n(e,{location:t(S(l)),action:u})}return e}}};function O(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var k={fromJS:function(e){return e},getIn:function(e,t){if(!e)return e;var n=t.length;if(n){for(var r=e,o=0;o<n&&r;++o)r=r[t[o]];return r}},merge:function(e,t){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?O(Object(n),!0).forEach((function(t){C(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{},t)},toJS:function(e){return e}},P=n(20),I=b(k),D=T(k),N=f(k),_=N.getLocation,A=N.getAction,R=N.getHash,j=N.getSearch,M=N.createMatchSelector},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t);var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(18),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,g=o?Symbol.for("react.lazy"):60116,h="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function w(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||b}function x(){}function E(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var S=E.prototype=new x;S.constructor=E,r(S,w.prototype),S.isPureReactComponent=!0;var T={current:null},O=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)O.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:T.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var I=/\/+/g,D=[];function N(e,t,n,r){if(D.length){var o=D.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function _(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>D.length&&D.push(e)}function A(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+R(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+R(l=t[c],c);u+=e(l,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=h&&t[h]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(l=t.next()).done;)u+=e(l=l.value,s=n+R(l,c++),r,o);else if("object"===l)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function j(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(I,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(I,"$&/")+"/"),A(e,M,t=N(t,i,r,o)),_(t)}var B={current:null};function F(){var e=B.current;if(null===e)throw Error(v(321));return e}var U={ReactCurrentDispatcher:B,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;A(e,j,t=N(null,null,t,n)),_(t)},count:function(e){return A(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(v(143));return e}},t.Component=w,t.Fragment=l,t.Profiler=c,t.PureComponent=E,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var o=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=T.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)O.call(t,s)&&!C.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(18),i=n(26);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function l(e,t,n,r,o,i,a,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var u=!1,c=null,s=!1,f=null,d={onError:function(e){u=!0,c=e}};function p(e,t,n,r,o,i,a,s,f){u=!1,c=null,l.apply(d,arguments)}var m=null,g=null,h=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=h(n),function(e,t,n,r,o,i,l,d,m){if(p.apply(this,arguments),u){if(!u)throw Error(a(198));var g=c;u=!1,c=null,s||(s=!0,f=g)}}(r,t,void 0,e),e.currentTarget=null}var b=null,y={};function w(){if(b)for(var e in y){var t=y[e],n=b.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!E[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in E[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,u=r;if(S.hasOwnProperty(u))throw Error(a(99,u));S[u]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&x(c[o],l,u);o=!0}else i.registrationName?(x(i.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function x(e,t,n){if(T[e])throw Error(a(100,e));T[e]=t,O[e]=t.eventTypes[n].dependencies}var E=[],S={},T={},O={};function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!y.hasOwnProperty(t)||y[t]!==r){if(y[t])throw Error(a(102,t));y[t]=r,n=!0}}n&&w()}var k=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),P=null,I=null,D=null;function N(e){if(e=g(e)){if("function"!=typeof P)throw Error(a(280));var t=e.stateNode;t&&(t=m(t),P(e.stateNode,e.type,t))}}function _(e){I?D?D.push(e):D=[e]:I=e}function A(){if(I){var e=I,t=D;if(D=I=null,N(e),t)for(e=0;e<t.length;e++)N(t[e])}}function R(e,t){return e(t)}function j(e,t,n,r,o){return e(t,n,r,o)}function M(){}var L=R,B=!1,F=!1;function U(){null===I&&null===D||(M(),A())}function z(e,t,n){if(F)return e(t,n);F=!0;try{return L(e,t,n)}finally{F=!1,U()}}var G=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,W=Object.prototype.hasOwnProperty,H={},V={};function q(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var $={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){$[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];$[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){$[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){$[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){$[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){$[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){$[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){$[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){$[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,Y);$[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,Y);$[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,Y);$[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){$[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),$.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){$[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var K=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var o=$.hasOwnProperty(t)?$[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!W.call(V,e)||!W.call(H,e)&&(G.test(e)?V[e]=!0:(H[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}K.hasOwnProperty("ReactCurrentDispatcher")||(K.ReactCurrentDispatcher={current:null}),K.hasOwnProperty("ReactCurrentBatchConfig")||(K.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ie=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ue=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,me="function"==typeof Symbol&&Symbol.iterator;function ge(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=me&&e[me]||e["@@iterator"])?e:null}function he(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return he(e.type);case pe:return he(e.render);case de:if(e=1===e._status?e._result:null)return he(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=he(e.type);n=null,r&&(n=he(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function be(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=ye(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ye(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ee(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Se(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=be(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Te(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Oe(e,t){Te(e,t);var n=be(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ke(e,t.type,n):t.hasOwnProperty("defaultValue")&&ke(e,t.type,be(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ce(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ke(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Pe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+be(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function De(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ne(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:be(n)}}function _e(e,t){var n=be(t.value),r=be(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Re="http://www.w3.org/1999/xhtml",je="http://www.w3.org/2000/svg";function Me(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Me(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Be,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==je||"innerHTML"in e)e.innerHTML=t;else{for((Be=Be||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Be.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ue(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function ze(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ge={animationend:ze("Animation","AnimationEnd"),animationiteration:ze("Animation","AnimationIteration"),animationstart:ze("Animation","AnimationStart"),transitionend:ze("Transition","TransitionEnd")},We={},He={};function Ve(e){if(We[e])return We[e];if(!Ge[e])return e;var t,n=Ge[e];for(t in n)if(n.hasOwnProperty(t)&&t in He)return We[e]=n[t];return e}k&&(He=document.createElement("div").style,"AnimationEvent"in window||(delete Ge.animationend.animation,delete Ge.animationiteration.animation,delete Ge.animationstart.animation),"TransitionEvent"in window||delete Ge.transitionend.transition);var qe=Ve("animationend"),$e=Ve("animationiteration"),Qe=Ve("animationstart"),Ye=Ve("transitionend"),Ke="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!k)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=kn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var l=null,u=0;u<E.length;u++){var c=E[u];c&&(c=c.extractEvents(r,t,i,o,a))&&(l=rt(l,c))}lt(l)}}function mt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Qt(t,"scroll",!0);break;case"focus":case"blur":Qt(t,"focus",!0),Qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&Qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ke.indexOf(e)&&$t(e,t)}n.set(e,null)}}var gt,ht,vt,bt=!1,yt=[],wt=null,xt=null,Et=null,St=new Map,Tt=new Map,Ot=[],Ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),kt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Pt(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function It(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":Et=null;break;case"pointerover":case"pointerout":St.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function Dt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=Pt(t,n,r,o,i),null!==t&&(null!==(t=Pn(t))&&ht(t)),e):(e.eventSystemFlags|=r,e)}function Nt(e){var t=kn(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function _t(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Pn(t);return null!==n&&ht(n),e.blockedOn=t,!1}return!0}function At(e,t,n){_t(e)&&n.delete(t)}function Rt(){for(bt=!1;0<yt.length;){var e=yt[0];if(null!==e.blockedOn){null!==(e=Pn(e.blockedOn))&&gt(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:yt.shift()}null!==wt&&_t(wt)&&(wt=null),null!==xt&&_t(xt)&&(xt=null),null!==Et&&_t(Et)&&(Et=null),St.forEach(At),Tt.forEach(At)}function jt(e,t){e.blockedOn===t&&(e.blockedOn=null,bt||(bt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Rt)))}function Mt(e){function t(t){return jt(t,e)}if(0<yt.length){jt(yt[0],e);for(var n=1;n<yt.length;n++){var r=yt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&jt(wt,e),null!==xt&&jt(xt,e),null!==Et&&jt(Et,e),St.forEach(t),Tt.forEach(t),n=0;n<Ot.length;n++)(r=Ot[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ot.length&&null===(n=Ot[0]).blockedOn;)Nt(n),null===n.blockedOn&&Ot.shift()}var Lt={},Bt=new Map,Ft=new Map,Ut=["abort","abort",qe,"animationEnd",$e,"animationIteration",Qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function zt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),Bt.set(r,i),Lt[o]=i}}zt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),zt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),zt(Ut,2);for(var Gt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Wt=0;Wt<Gt.length;Wt++)Ft.set(Gt[Wt],0);var Ht=i.unstable_UserBlockingPriority,Vt=i.unstable_runWithPriority,qt=!0;function $t(e,t){Qt(t,e,!1)}function Qt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Yt.bind(null,t,1,e);break;case 1:r=Kt.bind(null,t,1,e);break;default:r=Xt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Yt(e,t,n,r){B||M();var o=Xt,i=B;B=!0;try{j(o,e,t,n,r)}finally{(B=i)||U()}}function Kt(e,t,n,r){Vt(Ht,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){if(qt)if(0<yt.length&&-1<Ct.indexOf(e))e=Pt(null,e,t,n,r),yt.push(e);else{var o=Jt(e,t,n,r);if(null===o)It(e,r);else if(-1<Ct.indexOf(e))e=Pt(o,e,t,n,r),yt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return wt=Dt(wt,e,t,n,r,o),!0;case"dragenter":return xt=Dt(xt,e,t,n,r,o),!0;case"mouseover":return Et=Dt(Et,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return St.set(i,Dt(St.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Tt.set(i,Dt(Tt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){It(e,r),e=dt(e,r,null,t);try{z(pt,e)}finally{ft(e)}}}}function Jt(e,t,n,r){if(null!==(n=kn(n=ut(r)))){var o=Ze(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{z(pt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Re;function un(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=O[t];for(var r=0;r<t.length;r++)mt(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gn=null,hn=null;function vn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function bn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var yn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function En(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Sn=Math.random().toString(36).slice(2),Tn="__reactInternalInstance$"+Sn,On="__reactEventHandlers$"+Sn,Cn="__reactContainere$"+Sn;function kn(e){var t=e[Tn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cn]||n[Tn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=En(e);null!==e;){if(n=e[Tn])return n;e=En(e)}return t}n=(e=n).parentNode}return null}function Pn(e){return!(e=e[Tn]||e[Cn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function In(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Dn(e){return e[On]||null}function Nn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function _n(e,t){var n=e.stateNode;if(!n)return null;var r=m(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function An(e,t,n){(t=_n(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Rn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Nn(t);for(t=n.length;0<t--;)An(n[t],"captured",e);for(t=0;t<n.length;t++)An(n[t],"bubbled",e)}}function jn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=_n(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Mn(e){e&&e.dispatchConfig.registrationName&&jn(e._targetInst,null,e)}function Ln(e){ot(e,Rn)}var Bn=null,Fn=null,Un=null;function zn(){if(Un)return Un;var e,t,n=Fn,r=n.length,o="value"in Bn?Bn.value:Bn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Un=o.slice(e,1<t?1-t:void 0)}function Gn(){return!0}function Wn(){return!1}function Hn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Gn:Wn,this.isPropagationStopped=Wn,this}function Vn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function $n(e){e.eventPool=[],e.getPooled=Vn,e.release=qn}o(Hn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Gn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Gn)},persist:function(){this.isPersistent=Gn},isPersistent:Wn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Wn,this._dispatchInstances=this._dispatchListeners=null}}),Hn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Hn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,$n(n),n},$n(Hn);var Qn=Hn.extend({data:null}),Yn=Hn.extend({data:null}),Kn=[9,13,27,32],Xn=k&&"CompositionEvent"in window,Jn=null;k&&"documentMode"in document&&(Jn=document.documentMode);var Zn=k&&"TextEvent"in window&&!Jn,er=k&&(!Xn||Jn&&8<Jn&&11>=Jn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Xn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=zn()):(Fn="value"in(Bn=r)?Bn.value:Bn.textContent,ar=!0)),i=Qn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),Ln(i),o=i):o=null,(e=Zn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Xn&&or(e,t)?(e=zn(),Un=Fn=Bn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Yn.getPooled(nr.beforeInput,t,n,r)).data=e,Ln(t)):t=null,null===o?t:null===t?o:[o,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Hn.getPooled(sr.change,e,t,n)).type="change",_(n),Ln(e),e}var dr=null,pr=null;function mr(e){lt(e)}function gr(e){if(xe(In(e)))return e}function hr(e,t){if("change"===e)return t}var vr=!1;function br(){dr&&(dr.detachEvent("onpropertychange",yr),pr=dr=null)}function yr(e){if("value"===e.propertyName&&gr(pr))if(e=fr(pr,e,ut(e)),B)lt(e);else{B=!0;try{R(mr,e)}finally{B=!1,U()}}}function wr(e,t,n){"focus"===e?(br(),pr=n,(dr=t).attachEvent("onpropertychange",yr)):"blur"===e&&br()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return gr(pr)}function Er(e,t){if("click"===e)return gr(t)}function Sr(e,t){if("input"===e||"change"===e)return gr(t)}k&&(vr=ct("input")&&(!document.documentMode||9<document.documentMode));var Tr={eventTypes:sr,_isInputEventSupported:vr,extractEvents:function(e,t,n,r){var o=t?In(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=hr;else if(cr(o))if(vr)a=Sr;else{a=xr;var l=wr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Er);if(a&&(a=a(e,t)))return fr(a,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&ke(o,"number",o.value)}},Or=Hn.extend({view:null,detail:null}),Cr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cr[e])&&!!t[e]}function Pr(){return kr}var Ir=0,Dr=0,Nr=!1,_r=!1,Ar=Or.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Pr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ir;return Ir=e.screenX,Nr?"mousemove"===e.type?e.screenX-t:0:(Nr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Dr;return Dr=e.screenY,_r?"mousemove"===e.type?e.screenY-t:0:(_r=!0,0)}}),Rr=Ar.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),jr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Mr={eventTypes:jr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?kn(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var l=Ar,u=jr.mouseLeave,c=jr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Rr,u=jr.pointerLeave,c=jr.pointerEnter,s="pointer");if(e=null==a?i:In(a),i=null==t?i:In(t),(u=l.getPooled(u,a,n,r)).type=s+"leave",u.target=e,u.relatedTarget=i,(n=l.getPooled(c,t,n,r)).type=s+"enter",n.target=i,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=l=r;e;e=Nn(e))a++;for(e=0,t=c;t;t=Nn(t))e++;for(;0<a-e;)l=Nn(l),a--;for(;0<e-a;)c=Nn(c),e--;for(;a--;){if(l===c||l===c.alternate)break e;l=Nn(l),c=Nn(c)}l=null}else l=null;for(c=l,l=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)l.push(r),r=Nn(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=Nn(s);for(s=0;s<l.length;s++)jn(l[s],"bubbled",u);for(s=r.length;0<s--;)jn(r[s],"captured",n);return 0==(64&o)?[u]:[u,n]}};var Lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Br=Object.prototype.hasOwnProperty;function Fr(e,t){if(Lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Br.call(t,n[r])||!Lr(e[n[r]],t[n[r]]))return!1;return!0}var Ur=k&&"documentMode"in document&&11>=document.documentMode,zr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Gr=null,Wr=null,Hr=null,Vr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vr||null==Gr||Gr!==sn(n)?null:("selectionStart"in(n=Gr)&&mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hr&&Fr(Hr,n)?null:(Hr=n,(e=Hn.getPooled(zr.select,Wr,e,t)).type="select",e.target=Gr,Ln(e),e))}var $r={eventTypes:zr,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Je(o),i=O.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?In(t):window,e){case"focus":(cr(o)||"true"===o.contentEditable)&&(Gr=o,Wr=t,Hr=null);break;case"blur":Hr=Wr=Gr=null;break;case"mousedown":Vr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vr=!1,qr(n,r);case"selectionchange":if(Ur)break;case"keydown":case"keyup":return qr(n,r)}return null}},Qr=Hn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yr=Hn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Kr=Or.extend({relatedTarget:null});function Xr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Or.extend({key:function(e){if(e.key){var t=Jr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Pr,charCode:function(e){return"keypress"===e.type?Xr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Ar.extend({dataTransfer:null}),no=Or.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Pr}),ro=Hn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Ar.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:Lt,extractEvents:function(e,t,n,r){var o=Bt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Xr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Kr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Ar;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case qe:case $e:case Qe:e=Qr;break;case Ye:e=ro;break;case"scroll":e=Or;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Rr;break;default:e=Hn}return Ln(t=e.getPooled(o,t,n,r)),t}};if(b)throw Error(a(101));b=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),m=Dn,g=Pn,h=In,C({SimpleEventPlugin:io,EnterLeaveEventPlugin:Mr,ChangeEventPlugin:Tr,SelectEventPlugin:$r,BeforeInputEventPlugin:lr});var ao=[],lo=-1;function uo(e){0>lo||(e.current=ao[lo],ao[lo]=null,lo--)}function co(e,t){lo++,ao[lo]=e.current,e.current=t}var so={},fo={current:so},po={current:!1},mo=so;function go(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ho(e){return null!=(e=e.childContextTypes)}function vo(){uo(po),uo(fo)}function bo(e,t,n){if(fo.current!==so)throw Error(a(168));co(fo,t),co(po,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,he(t)||"Unknown",i));return o({},n,{},r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,mo=fo.current,co(fo,e),co(po,po.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=yo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,uo(po),uo(fo),co(fo,e)):uo(po),co(po,n)}var Eo=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,To=i.unstable_cancelCallback,Oo=i.unstable_requestPaint,Co=i.unstable_now,ko=i.unstable_getCurrentPriorityLevel,Po=i.unstable_ImmediatePriority,Io=i.unstable_UserBlockingPriority,Do=i.unstable_NormalPriority,No=i.unstable_LowPriority,_o=i.unstable_IdlePriority,Ao={},Ro=i.unstable_shouldYield,jo=void 0!==Oo?Oo:function(){},Mo=null,Lo=null,Bo=!1,Fo=Co(),Uo=1e4>Fo?Co:function(){return Co()-Fo};function zo(){switch(ko()){case Po:return 99;case Io:return 98;case Do:return 97;case No:return 96;case _o:return 95;default:throw Error(a(332))}}function Go(e){switch(e){case 99:return Po;case 98:return Io;case 97:return Do;case 96:return No;case 95:return _o;default:throw Error(a(332))}}function Wo(e,t){return e=Go(e),Eo(e,t)}function Ho(e,t,n){return e=Go(e),So(e,t,n)}function Vo(e){return null===Mo?(Mo=[e],Lo=So(Po,$o)):Mo.push(e),Ao}function qo(){if(null!==Lo){var e=Lo;Lo=null,To(e)}$o()}function $o(){if(!Bo&&null!==Mo){Bo=!0;var e=0;try{var t=Mo;Wo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Mo=null}catch(t){throw null!==Mo&&(Mo=Mo.slice(e+1)),So(Po,qo),t}finally{Bo=!1}}}function Qo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Yo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ko={current:null},Xo=null,Jo=null,Zo=null;function ei(){Zo=Jo=Xo=null}function ti(e){var t=Ko.current;uo(Ko),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Da=!0),e.firstContext=null)}function oi(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(a(308));Jo=t,Xo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ui(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ci(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.alternate;null!==n&&li(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,l=i.shared.pending;if(null!==l){if(null!==a){var u=a.next;a.next=l.next,l.next=u}a=l,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==a){u=a.next;var c=i.baseState,s=0,f=null,d=null,p=null;if(null!==u)for(var m=u;;){if((l=m.expirationTime)<r){var g={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null};null===p?(d=p=g,f=c):p=p.next=g,l>s&&(s=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null}),iu(l,m.suspenseConfig);e:{var h=e,v=m;switch(l=t,g=n,v.tag){case 1:if("function"==typeof(h=v.payload)){c=h.call(g,c,l);break e}c=h;break e;case 3:h.effectTag=-4097&h.effectTag|64;case 0:if(null==(l="function"==typeof(h=v.payload)?h.call(g,c,l):h))break e;c=o({},c,l);break e;case 2:ii=!0}}null!==m.callback&&(e.effectTag|=32,null===(l=i.effects)?i.effects=[m]:l.push(m))}if(null===(m=m.next)||m===u){if(null===(l=i.shared.pending))break;m=a.next=l.next,l.next=u,i.baseQueue=a=l,i.shared.pending=null}}null===p?f=c:p.next=d,i.baseState=f,i.baseQueue=p,au(s),e.expirationTime=s,e.memoizedState=c}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var pi=K.ReactCurrentBatchConfig,mi=(new r.Component).refs;function gi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pi.suspense;(o=ui(r=$l(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ci(e,o),Ql(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pi.suspense;(o=ui(r=$l(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ci(e,o),Ql(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ql(),r=pi.suspense;(r=ui(n=$l(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ci(e,r),Ql(e,n)}};function vi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(o,i))}function bi(e,t,n){var r=!1,o=so,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=ho(t)?mo:fo.current,i=(r=null!=(r=t.contextTypes))?go(e,o):so),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function yi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=ho(t)?mo:fo.current,o.context=go(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(gi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&hi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var xi=Array.isArray;function Ei(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Si(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ti(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Cu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Iu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ei(e,t,n),r.return=e,r):((r=ku(n.type,n.key,n.props,null,e.mode,r)).ref=Ei(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Du(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Pu(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Iu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=ku(t.type,t.key,t.props,null,e.mode,n)).ref=Ei(e,null,t),n.return=e,n;case te:return(t=Du(t,e.mode,n)).return=e,t}if(xi(t)||ge(t))return(t=Pu(t,e.mode,n,null)).return=e,t;Si(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(xi(n)||ge(n))return null!==o?null:f(e,t,n,r,null);Si(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(xi(r)||ge(r))return f(t,e=e.get(n)||null,r,o,null);Si(t,r)}return null}function g(o,a,l,u){for(var c=null,s=null,f=a,g=a=0,h=null;null!==f&&g<l.length;g++){f.index>g?(h=f,f=null):h=f.sibling;var v=p(o,f,l[g],u);if(null===v){null===f&&(f=h);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,g),null===s?c=v:s.sibling=v,s=v,f=h}if(g===l.length)return n(o,f),c;if(null===f){for(;g<l.length;g++)null!==(f=d(o,l[g],u))&&(a=i(f,a,g),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);g<l.length;g++)null!==(h=m(f,o,g,l[g],u))&&(e&&null!==h.alternate&&f.delete(null===h.key?g:h.key),a=i(h,a,g),null===s?c=h:s.sibling=h,s=h);return e&&f.forEach((function(e){return t(o,e)})),c}function h(o,l,u,c){var s=ge(u);if("function"!=typeof s)throw Error(a(150));if(null==(u=s.call(u)))throw Error(a(151));for(var f=s=null,g=l,h=l=0,v=null,b=u.next();null!==g&&!b.done;h++,b=u.next()){g.index>h?(v=g,g=null):v=g.sibling;var y=p(o,g,b.value,c);if(null===y){null===g&&(g=v);break}e&&g&&null===y.alternate&&t(o,g),l=i(y,l,h),null===f?s=y:f.sibling=y,f=y,g=v}if(b.done)return n(o,g),s;if(null===g){for(;!b.done;h++,b=u.next())null!==(b=d(o,b.value,c))&&(l=i(b,l,h),null===f?s=b:f.sibling=b,f=b);return s}for(g=r(o,g);!b.done;h++,b=u.next())null!==(b=m(g,o,h,b.value,c))&&(e&&null!==b.alternate&&g.delete(null===b.key?h:b.key),l=i(b,l,h),null===f?s=b:f.sibling=b,f=b);return e&&g.forEach((function(e){return t(o,e)})),s}return function(e,r,i,u){var c="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case ee:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(i.type===ne){n(e,c.sibling),(r=o(c,i.props.children)).return=e,e=r;break e}break;default:if(c.elementType===i.type){n(e,c.sibling),(r=o(c,i.props)).ref=Ei(e,c,i),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}i.type===ne?((r=Pu(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=ku(i.type,i.key,i.props,null,e.mode,u)).ref=Ei(e,r,i),u.return=e,e=u)}return l(e);case te:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Du(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Iu(i,e.mode,u)).return=e,e=r),l(e);if(xi(i))return g(e,r,i,u);if(ge(i))return h(e,r,i,u);if(s&&Si(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Oi=Ti(!0),Ci=Ti(!1),ki={},Pi={current:ki},Ii={current:ki},Di={current:ki};function Ni(e){if(e===ki)throw Error(a(174));return e}function _i(e,t){switch(co(Di,t),co(Ii,e),co(Pi,ki),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Le(null,"");break;default:t=Le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Pi),co(Pi,t)}function Ai(){uo(Pi),uo(Ii),uo(Di)}function Ri(e){Ni(Di.current);var t=Ni(Pi.current),n=Le(t,e.type);t!==n&&(co(Ii,e),co(Pi,n))}function ji(e){Ii.current===e&&(uo(Pi),uo(Ii))}var Mi={current:0};function Li(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Bi(e,t){return{responder:e,props:t}}var Fi=K.ReactCurrentDispatcher,Ui=K.ReactCurrentBatchConfig,zi=0,Gi=null,Wi=null,Hi=null,Vi=!1;function qi(){throw Error(a(321))}function $i(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Lr(e[n],t[n]))return!1;return!0}function Qi(e,t,n,r,o,i){if(zi=i,Gi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fi.current=null===e||null===e.memoizedState?va:ba,e=n(r,o),t.expirationTime===zi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Hi=Wi=null,t.updateQueue=null,Fi.current=ya,e=n(r,o)}while(t.expirationTime===zi)}if(Fi.current=ha,t=null!==Wi&&null!==Wi.next,zi=0,Hi=Wi=Gi=null,Vi=!1,t)throw Error(a(300));return e}function Yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Hi?Gi.memoizedState=Hi=e:Hi=Hi.next=e,Hi}function Ki(){if(null===Wi){var e=Gi.alternate;e=null!==e?e.memoizedState:null}else e=Wi.next;var t=null===Hi?Gi.memoizedState:Hi.next;if(null!==t)Hi=t,Wi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Wi=e).memoizedState,baseState:Wi.baseState,baseQueue:Wi.baseQueue,queue:Wi.queue,next:null},null===Hi?Gi.memoizedState=Hi=e:Hi=Hi.next=e}return Hi}function Xi(e,t){return"function"==typeof t?t(e):t}function Ji(e){var t=Ki(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Wi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,c=o;do{var s=c.expirationTime;if(s<zi){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,i=r):u=u.next=f,s>Gi.expirationTime&&(Gi.expirationTime=s,au(s))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),iu(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==o);null===u?i=r:u.next=l,Lr(r,t.memoizedState)||(Da=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zi(e){var t=Ki(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);Lr(i,t.memoizedState)||(Da=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xi,lastRenderedState:e}).dispatch=ga.bind(null,Gi,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Gi.updateQueue)?(t={lastEffect:null},Gi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Ki().memoizedState}function ra(e,t,n,r){var o=Yi();Gi.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Ki();r=void 0===r?null:r;var i=void 0;if(null!==Wi){var a=Wi.memoizedState;if(i=a.destroy,null!==r&&$i(r,a.deps))return void ta(t,n,i,r)}Gi.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function la(e,t){return oa(4,2,e,t)}function ua(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ca(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,ua.bind(null,t,e),n)}function sa(){}function fa(e,t){return Yi().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Ki();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Ki();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ma(e,t,n){var r=zo();Wo(98>r?98:r,(function(){e(!0)})),Wo(97<r?97:r,(function(){var r=Ui.suspense;Ui.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ui.suspense=r}}))}function ga(e,t,n){var r=ql(),o=pi.suspense;o={expirationTime:r=$l(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Gi||null!==i&&i===Gi)Vi=!0,o.expirationTime=zi,Gi.expirationTime=zi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.eagerReducer=i,o.eagerState=l,Lr(l,a))return}catch(e){}Ql(e,r)}}var ha={readContext:oi,useCallback:qi,useContext:qi,useEffect:qi,useImperativeHandle:qi,useLayoutEffect:qi,useMemo:qi,useReducer:qi,useRef:qi,useState:qi,useDebugValue:qi,useResponder:qi,useDeferredValue:qi,useTransition:qi},va={readContext:oi,useCallback:fa,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,ua.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ga.bind(null,Gi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Yi().memoizedState=e},useState:ea,useDebugValue:sa,useResponder:Bi,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ma.bind(null,t,e),[t,e]),n]}},ba={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:la,useMemo:pa,useReducer:Ji,useRef:na,useState:function(){return Ji(Xi)},useDebugValue:sa,useResponder:Bi,useDeferredValue:function(e,t){var n=Ji(Xi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ji(Xi),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},ya={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:la,useMemo:pa,useReducer:Zi,useRef:na,useState:function(){return Zi(Xi)},useDebugValue:sa,useResponder:Bi,useDeferredValue:function(e,t){var n=Zi(Xi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Xi),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},wa=null,xa=null,Ea=!1;function Sa(e,t){var n=Tu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ta(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Oa(e){if(Ea){var t=xa;if(t){var n=t;if(!Ta(e,t)){if(!(t=xn(n.nextSibling))||!Ta(e,t))return e.effectTag=-1025&e.effectTag|2,Ea=!1,void(wa=e);Sa(wa,n)}wa=e,xa=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ea=!1,wa=e}}function Ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function ka(e){if(e!==wa)return!1;if(!Ea)return Ca(e),Ea=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!bn(t,e.memoizedProps))for(t=xa;t;)Sa(e,t),t=xn(t.nextSibling);if(Ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xa=xn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}xa=null}}else xa=wa?xn(e.stateNode.nextSibling):null;return!0}function Pa(){xa=wa=null,Ea=!1}var Ia=K.ReactCurrentOwner,Da=!1;function Na(e,t,n,r){t.child=null===e?Ci(t,null,n,r):Oi(t,e.child,n,r)}function _a(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Qi(e,t,n,r,i,o),null===e||Da?(t.effectTag|=1,Na(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Qa(e,t,o))}function Aa(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Ou(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=ku(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ra(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(o,r)&&e.ref===t.ref)?Qa(e,t,i):(t.effectTag|=1,(e=Cu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ra(e,t,n,r,o,i){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(Da=!1,o<i)?(t.expirationTime=e.expirationTime,Qa(e,t,i)):Ma(e,t,n,r,i)}function ja(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ma(e,t,n,r,o){var i=ho(n)?mo:fo.current;return i=go(t,i),ri(t,o),n=Qi(e,t,n,r,i,o),null===e||Da?(t.effectTag|=1,Na(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Qa(e,t,o))}function La(e,t,n,r,o){if(ho(n)){var i=!0;wo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),bi(t,n,r),wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=oi(c):c=go(t,c=ho(n)?mo:fo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==c)&&yi(t,a,r,c),ii=!1;var d=t.memoizedState;a.state=d,fi(t,r,a,o),u=t.memoizedState,l!==r||d!==u||po.current||ii?("function"==typeof s&&(gi(t,n,s,r),u=t.memoizedState),(l=ii||vi(t,n,l,r,d,u,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=c,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,li(e,t),l=t.memoizedProps,a.props=t.type===t.elementType?l:Yo(t.type,l),u=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=oi(c):c=go(t,c=ho(n)?mo:fo.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==c)&&yi(t,a,r,c),ii=!1,u=t.memoizedState,a.state=u,fi(t,r,a,o),d=t.memoizedState,l!==r||u!==d||po.current||ii?("function"==typeof s&&(gi(t,n,s,r),d=t.memoizedState),(s=ii||vi(t,n,l,r,u,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ba(e,t,n,r,i,o)}function Ba(e,t,n,r,o,i){ja(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&xo(t,n,!1),Qa(e,t,i);r=t.stateNode,Ia.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Oi(t,e.child,null,i),t.child=Oi(t,null,l,i)):Na(e,t,l,i),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function Fa(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),_i(e,t.containerInfo)}var Ua,za,Ga,Wa={dehydrated:null,retryTime:0};function Ha(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Mi.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),co(Mi,1&a),null===e){if(void 0!==i.fallback&&Oa(t),l){if(l=i.fallback,(i=Pu(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Pu(l,o,n,null)).return=t,i.sibling=n,t.memoizedState=Wa,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ci(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(i=i.fallback,(n=Cu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Cu(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Wa,t.child=n,o}return n=Oi(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=i.fallback,(i=Pu(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Pu(l,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Wa,t.child=i,n}return t.memoizedState=null,t.child=Oi(t,e,i.children,n)}function Va(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function qa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function $a(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Na(e,t,r.children,n),0!=(2&(r=Mi.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Va(e,n);else if(19===e.tag)Va(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Mi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Li(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Li(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qa(t,!0,n,null,i,t.lastEffect);break;case"together":qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Qa(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&au(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Cu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Cu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ya(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ka(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&vo(),null;case 3:return Ai(),uo(po),uo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!ka(t)||(t.effectTag|=4),null;case 5:ji(t),n=Ni(Di.current);var i=t.type;if(null!==e&&null!=t.stateNode)za(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ni(Pi.current),ka(t)){r=t.stateNode,i=t.type;var l=t.memoizedProps;switch(r[Tn]=t,r[On]=l,i){case"iframe":case"object":case"embed":$t("load",r);break;case"video":case"audio":for(e=0;e<Ke.length;e++)$t(Ke[e],r);break;case"source":$t("error",r);break;case"img":case"image":case"link":$t("error",r),$t("load",r);break;case"form":$t("reset",r),$t("submit",r);break;case"details":$t("toggle",r);break;case"input":Se(r,l),$t("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},$t("invalid",r),un(n,"onChange");break;case"textarea":Ne(r,l),$t("invalid",r),un(n,"onChange")}for(var u in on(i,l),e=null,l)if(l.hasOwnProperty(u)){var c=l[u];"children"===u?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):T.hasOwnProperty(u)&&null!=c&&un(n,u)}switch(i){case"input":we(r),Ce(r,l,!0);break;case"textarea":we(r),Ae(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Me(i)),e===ln?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(i,{is:r.is}):(e=u.createElement(i),"select"===i&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,i),e[Tn]=t,e[On]=r,Ua(e,t),t.stateNode=e,u=an(i,r),i){case"iframe":case"object":case"embed":$t("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ke.length;c++)$t(Ke[c],e);c=r;break;case"source":$t("error",e),c=r;break;case"img":case"image":case"link":$t("error",e),$t("load",e),c=r;break;case"form":$t("reset",e),$t("submit",e),c=r;break;case"details":$t("toggle",e),c=r;break;case"input":Se(e,r),c=Ee(e,r),$t("invalid",e),un(n,"onChange");break;case"option":c=Pe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=o({},r,{value:void 0}),$t("invalid",e),un(n,"onChange");break;case"textarea":Ne(e,r),c=De(e,r),$t("invalid",e),un(n,"onChange");break;default:c=r}on(i,c);var s=c;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&Fe(e,f):"children"===l?"string"==typeof f?("textarea"!==i||""!==f)&&Ue(e,f):"number"==typeof f&&Ue(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(T.hasOwnProperty(l)?null!=f&&un(n,l):null!=f&&X(e,l,f,u))}switch(i){case"input":we(e),Ce(e,r,!1);break;case"textarea":we(e),Ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+be(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Ie(e,!!r.multiple,n,!1):null!=r.defaultValue&&Ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}vn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ga(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ni(Di.current),Ni(Pi.current),ka(t)?(n=t.stateNode,r=t.memoizedProps,n[Tn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Tn]=t,t.stateNode=n)}return null;case 13:return uo(Mi),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&ka(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=i,i.nextEffect=l):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Mi.current)?kl===wl&&(kl=xl):(kl!==wl&&kl!==xl||(kl=El),0!==_l&&null!==Tl&&(Au(Tl,Cl),Ru(Tl,_l)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ai(),null;case 10:return ti(t),null;case 17:return ho(t.type)&&vo(),null;case 19:if(uo(Mi),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(l=r.rendering)){if(i)Ya(r,!1);else if(kl!==wl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Li(l))){for(t.effectTag|=64,Ya(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=l,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,l=e.dependencies,i.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return co(Mi,1&Mi.current|2),t.child}l=l.sibling}}else{if(!i)if(null!==(e=Li(l))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ya(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Ya(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Uo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=Mi.current,co(Mi,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Xa(e){switch(e.tag){case 1:ho(e.type)&&vo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ai(),uo(po),uo(fo),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return ji(e),null;case 13:return uo(Mi),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(Mi),null;case 4:return Ai(),null;case 10:return ti(e),null;default:return null}}function Ja(e,t){return{value:e,source:t,stack:ve(t)}}Ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},za=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l,u,c=t.stateNode;switch(Ni(Pi.current),e=null,n){case"input":a=Ee(c,a),r=Ee(c,r),e=[];break;case"option":a=Pe(c,a),r=Pe(c,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=De(c,a),r=De(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(l in on(n,r),n=null,a)if(!r.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(u in c=a[l])c.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(T.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var s=r[l];if(c=null!=a?a[l]:void 0,r.hasOwnProperty(l)&&s!==c&&(null!=s||null!=c))if("style"===l)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(n||(n={}),n[u]=s[u])}else n||(e||(e=[]),e.push(l,n)),n=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(l,s)):"children"===l?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(T.hasOwnProperty(l)?(null!=s&&un(i,l),e||c===s||(e=[])):(e=e||[]).push(l,s))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Ga=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Za="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&he(n.type),t=t.value,null!==e&&1===e.tag&&he(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){bu(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&vn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Mt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function al(e,t,n){switch("function"==typeof Eu&&Eu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Wo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){bu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){bu(e,t)}}(t,n);break;case 5:tl(t);break;case 4:sl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function cl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Ue(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function sl(e,t,n){for(var r,o,i=t,l=!1;;){if(!l){l=i.return;e:for(;;){if(null===l)throw Error(a(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===i.tag||6===i.tag){e:for(var u=e,c=i,s=n,f=c;;)if(al(u,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=r,c=i.stateNode,8===u.nodeType?u.parentNode.removeChild(c):u.removeChild(c)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(al(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(l=!1)}i.sibling.return=i.return,i=i.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[On]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Te(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?Fe(n,u):"children"===l?Ue(n,u):X(n,l,u,t)}switch(e){case"input":Oe(n,r);break;case"textarea":_e(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ie(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ie(n,!!r.multiple,r.defaultValue,!0):Ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Mt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Rl=Uo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(a(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Za),t.forEach((function(t){var r=wu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=ui(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ml||(Ml=!0,Ll=r),el(e,t)},n}function gl(e,t,n){(n=ui(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Bl?Bl=new Set([this]):Bl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var hl,vl=Math.ceil,bl=K.ReactCurrentDispatcher,yl=K.ReactCurrentOwner,wl=0,xl=3,El=4,Sl=0,Tl=null,Ol=null,Cl=0,kl=wl,Pl=null,Il=1073741823,Dl=1073741823,Nl=null,_l=0,Al=!1,Rl=0,jl=null,Ml=!1,Ll=null,Bl=null,Fl=!1,Ul=null,zl=90,Gl=null,Wl=0,Hl=null,Vl=0;function ql(){return 0!=(48&Sl)?1073741821-(Uo()/10|0):0!==Vl?Vl:Vl=1073741821-(Uo()/10|0)}function $l(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=zo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Sl))return Cl;if(null!==n)e=Qo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Qo(e,150,100);break;case 97:case 96:e=Qo(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Tl&&e===Cl&&--e,e}function Ql(e,t){if(50<Wl)throw Wl=0,Hl=null,Error(a(185));if(null!==(e=Yl(e,t))){var n=zo();1073741823===t?0!=(8&Sl)&&0==(48&Sl)?Zl(e):(Xl(e),0===Sl&&qo()):Xl(e),0==(4&Sl)||98!==n&&99!==n||(null===Gl?Gl=new Map([[e,t]]):(void 0===(n=Gl.get(e))||n>t)&&Gl.set(e,t))}}function Yl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Tl===o&&(au(t),kl===El&&Au(o,Cl)),Ru(o,t)),o}function Kl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!_u(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Xl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Vo(Zl.bind(null,e));else{var t=Kl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Ao&&To(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Vo(Zl.bind(null,e)):Ho(r,Jl.bind(null,e),{timeout:10*(1073741821-t)-Uo()}),e.callbackNode=t}}}function Jl(e,t){if(Vl=0,t)return ju(e,t=ql()),Xl(e),null;var n=Kl(e);if(0!==n){if(t=e.callbackNode,0!=(48&Sl))throw Error(a(327));if(gu(),e===Tl&&n===Cl||nu(e,n),null!==Ol){var r=Sl;Sl|=16;for(var o=ou();;)try{uu();break}catch(t){ru(e,t)}if(ei(),Sl=r,bl.current=o,1===kl)throw t=Pl,nu(e,n),Au(e,n),Xl(e),t;if(null===Ol)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=kl,Tl=null,r){case wl:case 1:throw Error(a(345));case 2:ju(e,2<n?2:n);break;case xl:if(Au(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),1073741823===Il&&10<(o=Rl+500-Uo())){if(Al){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(i=Kl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=yn(du.bind(null,e),o);break}du(e);break;case El:if(Au(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),Al&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(o=Kl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Dl?r=10*(1073741821-Dl)-Uo():1073741823===Il?r=0:(r=10*(1073741821-Il)-5e3,0>(r=(o=Uo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*vl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=yn(du.bind(null,e),r);break}du(e);break;case 5:if(1073741823!==Il&&null!==Nl){i=Il;var l=Nl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(i=Uo()-(10*(1073741821-i)-(0|l.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Au(e,n),e.timeoutHandle=yn(du.bind(null,e),r);break}}du(e);break;default:throw Error(a(329))}if(Xl(e),e.callbackNode===t)return Jl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Sl))throw Error(a(327));if(gu(),e===Tl&&t===Cl||nu(e,t),null!==Ol){var n=Sl;Sl|=16;for(var r=ou();;)try{lu();break}catch(t){ru(e,t)}if(ei(),Sl=n,bl.current=r,1===kl)throw n=Pl,nu(e,t),Au(e,t),Xl(e),n;if(null!==Ol)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Tl=null,du(e),Xl(e)}return null}function eu(e,t){var n=Sl;Sl|=1;try{return e(t)}finally{0===(Sl=n)&&qo()}}function tu(e,t){var n=Sl;Sl&=-2,Sl|=8;try{return e(t)}finally{0===(Sl=n)&&qo()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Ai(),uo(po),uo(fo);break;case 5:ji(r);break;case 4:Ai();break;case 13:case 19:uo(Mi);break;case 10:ti(r)}n=n.return}Tl=e,Ol=Cu(e.current,null),Cl=t,kl=wl,Pl=null,Dl=Il=1073741823,Nl=null,_l=0,Al=!1}function ru(e,t){for(;;){try{if(ei(),Fi.current=ha,Vi)for(var n=Gi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(zi=0,Hi=Wi=Gi=null,Vi=!1,null===Ol||null===Ol.return)return kl=1,Pl=t,Ol=null;e:{var o=e,i=Ol.return,a=Ol,l=t;if(t=Cl,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&Mi.current),f=i;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var m=f.memoizedProps;d=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!s)}}if(d){var g=f.updateQueue;if(null===g){var h=new Set;h.add(u),f.updateQueue=h}else g.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var v=ui(1073741823,null);v.tag=2,ci(a,v)}a.expirationTime=1073741823;break e}l=void 0,a=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new pl,l=new Set,b.set(u,l)):void 0===(l=b.get(u))&&(l=new Set,b.set(u,l)),!l.has(a)){l.add(a);var y=yu.bind(null,o,u,a);u.then(y,y)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((he(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(a))}5!==kl&&(kl=2),l=Ja(l,a),f=i;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t,si(f,ml(f,u,t));break e;case 1:u=l;var w=f.type,x=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Bl||!Bl.has(x)))){f.effectTag|=4096,f.expirationTime=t,si(f,gl(f,u,t));break e}}f=f.return}while(null!==f)}Ol=su(Ol)}catch(e){t=e;continue}break}}function ou(){var e=bl.current;return bl.current=ha,null===e?ha:e}function iu(e,t){e<Il&&2<e&&(Il=e),null!==t&&e<Dl&&2<e&&(Dl=e,Nl=t)}function au(e){e>_l&&(_l=e)}function lu(){for(;null!==Ol;)Ol=cu(Ol)}function uu(){for(;null!==Ol&&!Ro();)Ol=cu(Ol)}function cu(e){var t=hl(e.alternate,e,Cl);return e.memoizedProps=e.pendingProps,null===t&&(t=su(e)),yl.current=null,t}function su(e){Ol=e;do{var t=Ol.alternate;if(e=Ol.return,0==(2048&Ol.effectTag)){if(t=Ka(t,Ol,Cl),1===Cl||1!==Ol.childExpirationTime){for(var n=0,r=Ol.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Ol.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ol.firstEffect),null!==Ol.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ol.firstEffect),e.lastEffect=Ol.lastEffect),1<Ol.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ol:e.firstEffect=Ol,e.lastEffect=Ol))}else{if(null!==(t=Xa(Ol)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ol.sibling))return t;Ol=e}while(null!==Ol);return kl===wl&&(kl=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function du(e){var t=zo();return Wo(99,pu.bind(null,e,t)),null}function pu(e,t){do{gu()}while(null!==Ul);if(0!=(48&Sl))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Tl&&(Ol=Tl=null,Cl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Sl;Sl|=32,yl.current=null,gn=qt;var l=pn();if(mn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var c=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(c&&0!==c.rangeCount){u=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,m=-1,g=0,h=0,v=l,b=null;t:for(;;){for(var y;v!==u||0!==s&&3!==v.nodeType||(p=d+s),v!==f||0!==c&&3!==v.nodeType||(m=d+c),3===v.nodeType&&(d+=v.nodeValue.length),null!==(y=v.firstChild);)b=v,v=y;for(;;){if(v===l)break t;if(b===u&&++g===s&&(p=d),b===f&&++h===c&&(m=d),null!==(y=v.nextSibling))break;b=(v=b).parentNode}v=y}u=-1===p||-1===m?null:{start:p,end:m}}else u=null}u=u||{start:0,end:0}}else u=null;hn={activeElementDetached:null,focusedElem:l,selectionRange:u},qt=!1,jl=o;do{try{mu()}catch(e){if(null===jl)throw Error(a(330));bu(jl,e),jl=jl.nextEffect}}while(null!==jl);jl=o;do{try{for(l=e,u=t;null!==jl;){var w=jl.effectTag;if(16&w&&Ue(jl.stateNode,""),128&w){var x=jl.alternate;if(null!==x){var E=x.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&w){case 2:cl(jl),jl.effectTag&=-3;break;case 6:cl(jl),jl.effectTag&=-3,fl(jl.alternate,jl);break;case 1024:jl.effectTag&=-1025;break;case 1028:jl.effectTag&=-1025,fl(jl.alternate,jl);break;case 4:fl(jl.alternate,jl);break;case 8:sl(l,s=jl,u),ll(s)}jl=jl.nextEffect}}catch(e){if(null===jl)throw Error(a(330));bu(jl,e),jl=jl.nextEffect}}while(null!==jl);if(E=hn,x=pn(),w=E.focusedElem,u=E.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&mn(w)&&(x=u.start,void 0===(E=u.end)&&(E=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(E,w.value.length)):(E=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(E=E.getSelection(),s=w.textContent.length,l=Math.min(u.start,s),u=void 0===u.end?l:Math.min(u.end,s),!E.extend&&l>u&&(s=u,u=l,l=s),s=dn(w,l),f=dn(w,u),s&&f&&(1!==E.rangeCount||E.anchorNode!==s.node||E.anchorOffset!==s.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((x=x.createRange()).setStart(s.node,s.offset),E.removeAllRanges(),l>u?(E.addRange(x),E.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),E.addRange(x))))),x=[];for(E=w;E=E.parentNode;)1===E.nodeType&&x.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(E=x[w]).element.scrollLeft=E.left,E.element.scrollTop=E.top}qt=!!gn,hn=gn=null,e.current=n,jl=o;do{try{for(w=e;null!==jl;){var S=jl.effectTag;if(36&S&&il(w,jl.alternate,jl),128&S){x=void 0;var T=jl.ref;if(null!==T){var O=jl.stateNode;switch(jl.tag){case 5:x=O;break;default:x=O}"function"==typeof T?T(x):T.current=x}}jl=jl.nextEffect}}catch(e){if(null===jl)throw Error(a(330));bu(jl,e),jl=jl.nextEffect}}while(null!==jl);jl=null,jo(),Sl=i}else e.current=n;if(Fl)Fl=!1,Ul=e,zl=t;else for(jl=o;null!==jl;)t=jl.nextEffect,jl.nextEffect=null,jl=t;if(0===(t=e.firstPendingTime)&&(Bl=null),1073741823===t?e===Hl?Wl++:(Wl=0,Hl=e):Wl=0,"function"==typeof xu&&xu(n.stateNode,r),Xl(e),Ml)throw Ml=!1,e=Ll,Ll=null,e;return 0!=(8&Sl)||qo(),null}function mu(){for(;null!==jl;){var e=jl.effectTag;0!=(256&e)&&nl(jl.alternate,jl),0==(512&e)||Fl||(Fl=!0,Ho(97,(function(){return gu(),null}))),jl=jl.nextEffect}}function gu(){if(90!==zl){var e=97<zl?97:zl;return zl=90,Wo(e,hu)}}function hu(){if(null===Ul)return!1;var e=Ul;if(Ul=null,0!=(48&Sl))throw Error(a(331));var t=Sl;for(Sl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(a(330));bu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Sl=t,qo(),!0}function vu(e,t,n){ci(e,t=ml(e,t=Ja(n,t),1073741823)),null!==(e=Yl(e,1073741823))&&Xl(e)}function bu(e,t){if(3===e.tag)vu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){vu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Bl||!Bl.has(r))){ci(n,e=gl(n,e=Ja(t,e),1073741823)),null!==(n=Yl(n,1073741823))&&Xl(n);break}}n=n.return}}function yu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Tl===e&&Cl===n?kl===El||kl===xl&&1073741823===Il&&Uo()-Rl<500?nu(e,Cl):Al=!0:_u(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Xl(e)))}function wu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=$l(t=ql(),e,null)),null!==(e=Yl(e,t))&&Xl(e)}hl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Da=!0;else{if(r<n){switch(Da=!1,t.tag){case 3:Fa(t),Pa();break;case 5:if(Ri(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:ho(t.type)&&wo(t);break;case 4:_i(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,co(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ha(e,t,n):(co(Mi,1&Mi.current),null!==(t=Qa(e,t,n))?t.sibling:null);co(Mi,1&Mi.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return $a(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),co(Mi,Mi.current),!r)return null}return Qa(e,t,n)}Da=!1}}else Da=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=go(t,fo.current),ri(t,n),o=Qi(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var i=!0;wo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&gi(t,r,l,e),o.updater=hi,t.stateNode=o,o._reactInternalFiber=t,wi(t,r,e,n),t=Ba(null,t,r,!0,i,n)}else t.tag=0,Na(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Ou(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(o),e=Yo(o,e),i){case 0:t=Ma(null,t,o,e,n);break e;case 1:t=La(null,t,o,e,n);break e;case 11:t=_a(null,t,o,e,n);break e;case 14:t=Aa(null,t,o,Yo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ma(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,La(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Fa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)Pa(),t=Qa(e,t,n);else{if((o=t.stateNode.hydrate)&&(xa=xn(t.stateNode.containerInfo.firstChild),wa=t,o=Ea=!0),o)for(n=Ci(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Na(e,t,r,n),Pa();t=t.child}return t;case 5:return Ri(t),null===e&&Oa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,bn(r,o)?l=null:null!==i&&bn(r,i)&&(t.effectTag|=16),ja(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Na(e,t,l,n),t=t.child),t;case 6:return null===e&&Oa(t),null;case 13:return Ha(e,t,n);case 4:return _i(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oi(t,null,r,n):Na(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,_a(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return Na(e,t,t.pendingProps,n),t.child;case 8:case 12:return Na(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(co(Ko,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0===(i=Lr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!po.current){t=Qa(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===u.tag&&((s=ui(n,null)).tag=2,ci(u,s)),u.expirationTime<n&&(u.expirationTime=n),null!==(s=u.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ni(u.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Na(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,Na(e,t,r,n),t.child;case 14:return i=Yo(o=t.type,t.pendingProps),Aa(e,t,o,i=Yo(o.type,i),r,n);case 15:return Ra(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,ho(r)?(e=!0,wo(t)):e=!1,ri(t,n),bi(t,r,o),wi(t,r,o,n),Ba(null,t,r,!0,e,n);case 19:return $a(e,t,n)}throw Error(a(156,t.tag))};var xu=null,Eu=null;function Su(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Tu(e,t,n,r){return new Su(e,t,n,r)}function Ou(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cu(e,t){var n=e.alternate;return null===n?((n=Tu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function ku(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ou(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Pu(n.children,o,i,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Tu(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case ce:return(e=Tu(13,n,t,o)).type=ce,e.elementType=ce,e.expirationTime=i,e;case se:return(e=Tu(19,n,t,o)).elementType=se,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:l=10;break e;case ae:l=9;break e;case ue:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Tu(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Pu(e,t,n,r){return(e=Tu(7,e,r,t)).expirationTime=n,e}function Iu(e,t,n){return(e=Tu(6,e,null,t)).expirationTime=n,e}function Du(e,t,n){return(t=Tu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Nu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function _u(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Au(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ru(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function ju(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Mu(e,t,n,r){var o=t.current,i=ql(),l=pi.suspense;i=$l(i,o,l);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var c=n.type;if(ho(c)){n=yo(n,c,u);break e}}n=u}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ci(o,t),Ql(o,i),i}function Lu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Bu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fu(e,t){Bu(e,t),(e=e.alternate)&&Bu(e,t)}function Uu(e,t,n){var r=new Nu(e,t,n=null!=n&&!0===n.hydrate),o=Tu(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[Cn]=r.current,n&&0!==t&&function(e,t){var n=Je(t);Ct.forEach((function(e){mt(e,t,n)})),kt.forEach((function(e){mt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Gu(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Lu(a);l.call(e)}}Mu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Uu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Lu(a);u.call(e)}}tu((function(){Mu(t,a,e,o)}))}return Lu(a)}function Wu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Hu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!zu(t))throw Error(a(200));return Wu(e,t,null,n)}Uu.prototype.render=function(e){Mu(e,this._internalRoot,null,null)},Uu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Mu(null,e,null,(function(){t[Cn]=null}))},gt=function(e){if(13===e.tag){var t=Qo(ql(),150,100);Ql(e,t),Fu(e,t)}},ht=function(e){13===e.tag&&(Ql(e,3),Fu(e,3))},vt=function(e){if(13===e.tag){var t=ql();Ql(e,t=$l(t,e,null)),Fu(e,t)}},P=function(e,t,n){switch(t){case"input":if(Oe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Dn(r);if(!o)throw Error(a(90));xe(r),Oe(r,o)}}}break;case"textarea":_e(e,n);break;case"select":null!=(t=n.value)&&Ie(e,!!n.multiple,t,!1)}},R=eu,j=function(e,t,n,r,o){var i=Sl;Sl|=4;try{return Wo(98,e.bind(null,t,n,r,o))}finally{0===(Sl=i)&&qo()}},M=function(){0==(49&Sl)&&(function(){if(null!==Gl){var e=Gl;Gl=null,e.forEach((function(e,t){ju(t,e),Xl(t)})),qo()}}(),gu())},L=function(e,t){var n=Sl;Sl|=2;try{return e(t)}finally{0===(Sl=n)&&qo()}};var Vu,qu,$u={Events:[Pn,In,Dn,C,S,Ln,function(e){ot(e,Mn)},_,A,Xt,lt,gu,{current:!1}]};qu=(Vu={findFiberByHostInstance:kn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Eu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Vu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:K.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return qu?qu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$u,t.createPortal=Hu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Sl))throw Error(a(187));var n=Sl;Sl|=1;try{return Wo(99,e.bind(null,t))}finally{Sl=n,qo()}},t.hydrate=function(e,t,n){if(!zu(t))throw Error(a(200));return Gu(null,e,t,!0,n)},t.render=function(e,t,n){if(!zu(t))throw Error(a(200));return Gu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!zu(e))throw Error(a(40));return!!e._reactRootContainer&&(tu((function(){Gu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Cn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Hu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!zu(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Gu(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(27)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,s=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(s,0))},o=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,m=window.setTimeout,g=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var v=p.now();t.unstable_now=function(){return p.now()-v}}var b=!1,y=null,w=-1,x=5,E=0;a=function(){return t.unstable_now()>=E},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,T=S.port2;S.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();E=e+x;try{y(!0,e)?T.postMessage(null):(b=!1,y=null)}catch(e){throw T.postMessage(null),e}}else b=!1},r=function(e){y=e,b||(b=!0,T.postMessage(null))},o=function(e,n){w=m((function(){e(t.unstable_now())}),n)},i=function(){g(w),w=-1}}function O(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<P(o,t)))break e;e[r]=t,e[n]=o,n=r}}function C(e){return void 0===(e=e[0])?null:e}function k(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>P(a,n))void 0!==u&&0>P(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>P(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var I=[],D=[],N=1,_=null,A=3,R=!1,j=!1,M=!1;function L(e){for(var t=C(D);null!==t;){if(null===t.callback)k(D);else{if(!(t.startTime<=e))break;k(D),t.sortIndex=t.expirationTime,O(I,t)}t=C(D)}}function B(e){if(M=!1,L(e),!j)if(null!==C(I))j=!0,r(F);else{var t=C(D);null!==t&&o(B,t.startTime-e)}}function F(e,n){j=!1,M&&(M=!1,i()),R=!0;var r=A;try{for(L(n),_=C(I);null!==_&&(!(_.expirationTime>n)||e&&!a());){var l=_.callback;if(null!==l){_.callback=null,A=_.priorityLevel;var u=l(_.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?_.callback=u:_===C(I)&&k(I),L(n)}else k(I);_=C(I)}if(null!==_)var c=!0;else{var s=C(D);null!==s&&o(B,s.startTime-n),c=!1}return c}finally{_=null,A=r,R=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var z=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){j||R||(j=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return A},t.unstable_getFirstCallbackNode=function(){return C(I)},t.unstable_next=function(e){switch(A){case 1:case 2:case 3:var t=3;break;default:t=A}var n=A;A=t;try{return e()}finally{A=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=A;A=e;try{return t()}finally{A=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"==typeof a&&null!==a){var u=a.delay;u="number"==typeof u&&0<u?l+u:l,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),u=l;return e={id:N++,callback:n,priorityLevel:e,startTime:u,expirationTime:a=u+a,sortIndex:-1},u>l?(e.sortIndex=u,O(D,e),null===C(I)&&e===C(D)&&(M?i():M=!0,o(B,u-l))):(e.sortIndex=a,O(I,e),j||R||(j=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=C(I);return n!==_&&null!==_&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<_.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=A;return function(){var n=A;A=t;try{return e.apply(this,arguments)}finally{A=n}}}},function(e,t,n){"use strict";var r=n(29);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,g=r?Symbol.for("react.suspense_list"):60120,h=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case u:case l:case m:return e;default:switch(e=e&&e.$$typeof){case s:case p:case v:case h:case c:return e;default:return t}}case i:return t}}}function S(e){return E(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=v,t.Memo=h,t.Portal=i,t.Profiler=u,t.StrictMode=l,t.Suspense=m,t.isAsyncMode=function(e){return S(e)||E(e)===f},t.isConcurrentMode=S,t.isContextConsumer=function(e){return E(e)===s},t.isContextProvider=function(e){return E(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return E(e)===p},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===v},t.isMemo=function(e){return E(e)===h},t.isPortal=function(e){return E(e)===i},t.isProfiler=function(e){return E(e)===u},t.isStrictMode=function(e){return E(e)===l},t.isSuspense=function(e){return E(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===l||e===m||e===g||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===h||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===y||e.$$typeof===w||e.$$typeof===x||e.$$typeof===b)},t.typeOf=E},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){e.exports=n(39)},function(e,t,n){var r=n(35),o=n(36);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function l(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],c=n[u]||0,s="".concat(u," ").concat(c);n[u]=c+1;var f=l(s),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:s,updater:h(d,t),references:1}),r.push(s)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,g=0;function h(e,t){var n,r,o;if(t.singleton){var i=g++;n=m||(m=c(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=c(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);a[o].references--}for(var i=u(e,t),c=0;c<n.length;c++){var s=l(n[c]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}},function(e,t,n){(t=n(37)(!1)).push([e.i,".topLevelEmenet, .addContainer {\r\n    padding: 1rem;\r\n}\r\n\r\n.columns{\r\n    display: flex;\r\n}\r\n.columnContainer{\r\n    border: 1px solid gray;\r\n    padding: 1rem;\r\n    margin: 1rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    overflow: auto;\r\n    width: 300px;\r\n}\r\n\r\n.cardContainer {\r\n    border: 1px solid gray;\r\n    padding: 1rem;\r\n    margin: 1rem;\r\n    background-color: white;\r\n}\r\n.modal {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n.modal .header, .modal .content, .modal .footer, .modal .input {\r\n    margin: 1rem;\r\n\r\n}\r\n.addContainer {\r\n    color: blue;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n}\r\n\r\n.title {\r\n    font-size: 22px;\r\n    font-weight: bold;\r\n    margin-left: 50%;\r\n}\r\n\r\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},,function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"updateColumnData",(function(){return w})),n.d(r,"addColumnData",(function(){return x})),n.d(r,"addTask",(function(){return E}));var o=n(0),i=n.n(o),a=n(11),l=n.n(a),u=n(9),c=n(8),s=n(7),f=n(20),d=n(21),p=function(){return(p=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},m={tasks:{task1:{id:"task1",title:"Task 1",content:"This is a very good description"},task2:{id:"task2",title:"Task 2",content:"Mail to xxxxx on tuesday at 3.30"},task3:{id:"task3",title:"Task 3",content:"Call amber on friday"},task4:{id:"task4",title:"Task 4",content:"call madison on thursady"}},columns:{column1:{id:"column1",title:"To Do",taskIds:["task1","task2","task3","task4"]}},columnIds:["column1"]};function g(e,t){var n,r;switch(void 0===e&&(e=m),t.type){case"UPDATE_TASKS":return p(p({},e),{tasks:t.data});case"ADD_COLUMN":var o=p(p({},e.columns),((n={})[t.data.id]=t.data,n)),i=e.columnIds;return i.push(t.data.id),p(p({},e),{columns:o,columnIds:i});case"UPDATE_STATE":var a=p(p({},e.columns),((r={})[t.data.id]=t.data,r));return p(p({},e),{columns:a});default:return e}}var h=function(e){return Object(s.combineReducers)({router:Object(d.connectRouter)(e),ToDoList:g})},v=n(23),b=Object(c.a)();n(34);var y=function(){return(y=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function w(e){return function(t){t({type:"UPDATE_STATE",data:e})}}function x(e){return function(t){t({type:"ADD_COLUMN",data:e})}}function E(e,t){return function(n,r){var o,i=r().ToDoList.tasks,a=r().ToDoList.columns[t],l={id:"task"+(Object.keys(i).length+1),title:e.title,content:e.content};i=y(y({},i),((o={})[l.id]=l,o)),a.taskIds.push(l.id),n({type:"UPDATE_TASKS",data:i}),n({type:"UPDATE_STATE",data:a})}}
/*!
 * reactjs-popup v1.5.0
 * (c) 2019-present Youssouf EL AZIZI <youssoufelazizi@gmail.com>
 * Released under the MIT License.
 */function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(){return(O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function P(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function I(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function D(e,t,n,r,o){var i=o.offsetX,a=o.offsetY,l=r?8:0,u=n.split(" "),c=e.top+e.height/2,s=e.left+e.width/2,f=t.height,d=t.width,p=c-f/2,m=s-d/2,g="",h="0%",v="0%";switch(u[0]){case"top":p-=f/2+e.height/2+l,g="rotate(45deg)",h="100%",v="50%";break;case"bottom":p+=f/2+e.height/2+l,g="rotate(225deg)",v="50%";break;case"left":m-=d/2+e.width/2+l,g=" rotate(-45deg)",v="100%",h="50%";break;case"right":m+=d/2+e.width/2+l,g="rotate(135deg)",h="50%"}switch(u[1]){case"top":p=e.top,h="".concat(e.height/2,"px");break;case"bottom":p=e.top-f+e.height,h="".concat(f-e.height/2,"px");break;case"left":m=e.left,v="".concat(e.width/2,"px");break;case"right":m=e.left-d+e.width,v="".concat(d-e.width/2,"px")}return{top:p="top"===u[0]?p-a:p+a,left:m="left"===u[0]?m-i:m+i,transform:g,arrowLeft:v,arrowTop:h}}var N={popupContent:{tooltip:{position:"absolute",zIndex:"2",width:"200px",background:"rgb(255, 255, 255)",border:"1px solid rgb(187, 187, 187)",boxShadow:"rgba(0, 0, 0, 0.2) 0px 1px 3px",padding:"5px"},modal:{position:"relative",background:"rgb(255, 255, 255)",width:"50%",margin:"auto",border:"1px solid rgb(187, 187, 187)",padding:"5px"}},popupArrow:{height:"10px",width:"10px",position:"absolute",background:"rgb(255, 255, 255)",transform:"rotate(45deg)",margin:"-5px",zIndex:"-1",boxShadow:"rgba(0, 0, 0, 0.2) 1px 1px 1px"},overlay:{tooltip:{position:"fixed",top:"0",bottom:"0",left:"0",right:"0"},modal:{position:"fixed",top:"0",bottom:"0",left:"0",right:"0",background:"rgba(0, 0, 0,0.5)",display:"flex",zIndex:"999"}}},_=["top left","top center","top right","right top","right center","right bottom","bottom left","bottom center","bottom right","left top","left center","left bottom","center center"],A=function(e){function t(e){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?P(e):t}(this,C(t).call(this,e)),T(P(n),"repositionOnResize",(function(){n.setPosition()})),T(P(n),"onEscape",(function(e){"Escape"===e.key&&n.closePopup()})),T(P(n),"lockScroll",(function(){var e=n.props.lockScroll;n.state.modal&&e&&(document.getElementsByTagName("body")[0].style.overflow="hidden")})),T(P(n),"resetScroll",(function(){var e=n.props.lockScroll;n.state.modal&&e&&(document.getElementsByTagName("body")[0].style.overflow="auto")})),T(P(n),"togglePopup",(function(e){e.persist(),n.state.isOpen?n.closePopup(e):n.openPopup(e)})),T(P(n),"openPopup",(function(e){var t=n.props,r=t.disabled,o=t.onOpen;n.state.isOpen||r||(o(e),n.setState({isOpen:!0},(function(){n.setPosition(),n.lockScroll()})))})),T(P(n),"closePopup",(function(e){var t=n.props.onClose;n.state.isOpen&&(t(e),n.setState({isOpen:!1},(function(){n.resetScroll()})))})),T(P(n),"onMouseEnter",(function(){clearTimeout(n.timeOut);var e=n.props.mouseEnterDelay;n.timeOut=setTimeout((function(){return n.openPopup()}),e)})),T(P(n),"onMouseLeave",(function(){clearTimeout(n.timeOut);var e=n.props.mouseLeaveDelay;n.timeOut=setTimeout((function(){return n.closePopup()}),e)})),T(P(n),"getTooltipBoundary",(function(){var e=n.props.keepTooltipInside,t={top:0,left:0,width:window.innerWidth,height:window.innerHeight};"string"==typeof e&&(t=document.querySelector(e).getBoundingClientRect());return t})),T(P(n),"setPosition",(function(){var e=n.state,t=e.modal,r=e.isOpen;if(!t&&r){var o=n.props,i=o.arrow,a=o.position,l=o.offsetX,u=o.offsetY,c=o.keepTooltipInside,s=o.arrowStyle,f=o.className,d=n.HelperEl.getBoundingClientRect(),p=n.TriggerEl.getBoundingClientRect(),m=n.ContentEl.getBoundingClientRect(),g=n.getTooltipBoundary(),h=Array.isArray(a)?a:[a];(c||Array.isArray(a))&&(h=[].concat(I(h),_));var v=function(e,t,n,r,o,i){for(var a,l=o.offsetX,u=o.offsetY,c=0;c<n.length;){var s={top:(a=D(e,t,n[c],r,{offsetX:l,offsetY:u})).top,left:a.left,width:t.width,height:t.height};if(!(s.top<=i.top||s.left<=i.left||s.top+s.height>=i.top+i.height||s.left+s.width>=i.left+i.width))break;c++}return a}(p,m,h,i,{offsetX:l,offsetY:u},g);n.ContentEl.style.top="".concat(v.top-d.top,"px"),n.ContentEl.style.left="".concat(v.left-d.left,"px"),i&&(n.ArrowEl.style.transform=v.transform,n.ArrowEl.style["-ms-transform"]=v.transform,n.ArrowEl.style["-webkit-transform"]=v.transform,n.ArrowEl.style.top=s.top||v.arrowTop,n.ArrowEl.style.left=s.left||v.arrowLeft,n.ArrowEl.classList.add("popup-arrow"),""!==f&&n.ArrowEl.classList.add("".concat(f,"-arrow"))),"static"!==window.getComputedStyle(n.TriggerEl,null).getPropertyValue("position")&&""!==window.getComputedStyle(n.TriggerEl,null).getPropertyValue("position")||(n.TriggerEl.style.position="relative")}})),T(P(n),"addWarperAction",(function(){var e=n.props,t=e.contentStyle,r=e.className,o=e.on,i=n.state.modal,a=i?N.popupContent.modal:N.popupContent.tooltip,l={className:"popup-content ".concat(""!==r?"".concat(r,"-content"):""),style:Object.assign({},a,t),ref:n.setContentRef,onClick:function(e){e.stopPropagation()}};return!i&&o.indexOf("hover")>=0&&(l.onMouseEnter=n.onMouseEnter,l.onMouseLeave=n.onMouseLeave),l})),T(P(n),"renderTrigger",(function(){for(var e={key:"T",ref:n.setTriggerRef},t=n.props,r=t.on,o=t.trigger,a=n.state.isOpen,l=Array.isArray(r)?r:[r],u=0,c=l.length;u<c;u++)switch(l[u]){case"click":e.onClick=n.togglePopup;break;case"hover":e.onMouseEnter=n.onMouseEnter,e.onMouseLeave=n.onMouseLeave;break;case"focus":e.onFocus=n.onMouseEnter}return"function"==typeof o?!!o&&i.a.cloneElement(o(a),e):!!o&&i.a.cloneElement(o,e)})),T(P(n),"renderContent",(function(){var e=n.props,t=e.arrow,r=e.arrowStyle,o=e.children,a=n.state,l=a.modal,u=a.isOpen;return i.a.createElement("div",O({},n.addWarperAction(),{key:"C"}),t&&!l&&i.a.createElement("div",{ref:n.setArrowRef,style:Object.assign({},N.popupArrow,r)}),"function"==typeof o?o(n.closePopup,u):o)})),n.setTriggerRef=function(e){return n.TriggerEl=e},n.setContentRef=function(e){return n.ContentEl=e},n.setArrowRef=function(e){return n.ArrowEl=e},n.setHelperRef=function(e){return n.HelperEl=e},n.timeOut=0;var r=e.open,o=e.modal,a=e.defaultOpen,l=e.trigger;return n.state={isOpen:r||a,modal:!!o||!l},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this.props,t=e.closeOnEscape,n=e.defaultOpen,r=e.repositionOnResize;n&&this.setPosition(),t&&window.addEventListener("keyup",this.onEscape),r&&window.addEventListener("resize",this.repositionOnResize)}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.open,r=t.disabled,o=this.state.isOpen;e.open!==n&&(n?this.openPopup():this.closePopup(void 0,!0)),e.disabled!==r&&r&&o&&this.closePopup()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeOut);var e=this.props,t=e.closeOnEscape,n=e.repositionOnResize;t&&window.removeEventListener("keyup",this.onEscape),n&&window.removeEventListener("resize",this.repositionOnResize),this.resetScroll()}},{key:"render",value:function(){var e=this.props,t=e.overlayStyle,n=e.closeOnDocumentClick,r=e.className,o=e.on,a=(e.trigger,this.state),l=a.modal,u=a.isOpen,c=u&&!(o.indexOf("hover")>=0),s=l?N.overlay.modal:N.overlay.tooltip;return[this.renderTrigger(),u&&i.a.createElement("div",{key:"H",style:{position:"absolute",top:"0px",left:"0px"},ref:this.setHelperRef}),c&&i.a.createElement("div",{key:"O",className:"popup-overlay ".concat(""!==r?"".concat(r,"-overlay"):""),style:Object.assign({},s,t),onClick:n?this.closePopup:void 0},l&&this.renderContent()),u&&!l&&this.renderContent()]}}])&&S(n.prototype,r),o&&S(n,o),t}(i.a.PureComponent);T(A,"defaultProps",{trigger:null,onOpen:function(){},onClose:function(){},defaultOpen:!1,open:!1,disabled:!1,closeOnDocumentClick:!0,repositionOnResize:!0,closeOnEscape:!0,on:["click"],contentStyle:{},arrowStyle:{},overlayStyle:{},className:"",position:"bottom center",modal:!1,lockScroll:!1,arrow:!0,offsetX:0,offsetY:0,mouseEnterDelay:100,mouseLeaveDelay:100,keepTooltipInside:!1});var R,j=A,M=(R=function(e,t){return(R=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}R(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),L=function(e){function t(t){var n=e.call(this,t)||this;return n.state={title:"",content:""},n}return M(t,e),t.prototype.changeTitle=function(e){console.log(e.target.value),this.setState({title:e.target.value})},t.prototype.changeContent=function(e){this.setState({content:e.target.value})},t.prototype.updateData=function(){this.props.updateData(this.state.title,this.state.content)},t.prototype.render=function(){var e=this;return i.a.createElement(j,{trigger:i.a.createElement("div",{className:"addContainer"},i.a.createElement("span",null," ",this.props.text," ")),modal:!0,closeOnDocumentClick:!0},(function(t){return i.a.createElement("div",{className:"modal"},i.a.createElement("div",{className:"header"},i.a.createElement("h1",null," Add Details ")),i.a.createElement("div",{className:"content"},i.a.createElement("div",{className:"input"},i.a.createElement("div",null,i.a.createElement("label",{htmlFor:"title"},"Title")),i.a.createElement("input",{id:"title",type:"text",value:e.state.title,onChange:e.changeTitle.bind(e)})),i.a.createElement("div",{className:"input"},i.a.createElement("div",null,i.a.createElement("label",{htmlFor:"content"},"Content")),i.a.createElement("input",{id:"content",type:"text",value:e.state.content,onChange:e.changeContent.bind(e)}))),i.a.createElement("div",{className:"footer"},i.a.createElement("button",{className:"button",onClick:function(){e.updateData(),t()}},"Done")))}))},t}(i.a.Component);function B(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function F(){return(F=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function U(e,t){var n=Object(o.useState)((function(){return{inputs:t,result:e()}}))[0],r=Object(o.useRef)(n),i=Boolean(t&&r.current.inputs&&function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(t,r.current.inputs))?r.current:{inputs:t,result:e()};return Object(o.useEffect)((function(){r.current=i}),[i]),i.result}var z=U,G=function(e,t){return U((function(){return e}),t)},W=n(4),H=function(e){var t=e.top,n=e.right,r=e.bottom,o=e.left;return{top:t,right:n,bottom:r,left:o,width:n-o,height:r-t,x:o,y:t,center:{x:(n+o)/2,y:(r+t)/2}}},V=function(e,t){return{top:e.top-t.top,left:e.left-t.left,bottom:e.bottom+t.bottom,right:e.right+t.right}},q=function(e,t){return{top:e.top+t.top,left:e.left+t.left,bottom:e.bottom-t.bottom,right:e.right-t.right}},$={top:0,right:0,bottom:0,left:0},Q=function(e){var t=e.borderBox,n=e.margin,r=void 0===n?$:n,o=e.border,i=void 0===o?$:o,a=e.padding,l=void 0===a?$:a,u=H(V(t,r)),c=H(q(t,i)),s=H(q(c,l));return{marginBox:u,borderBox:H(t),paddingBox:c,contentBox:s,margin:r,border:i,padding:l}},Y=function(e){var t=e.slice(0,-2);if("px"!==e.slice(-2))return 0;var n=Number(t);return isNaN(n)&&Object(W.a)(!1),n},K=function(e,t){var n,r,o=e.borderBox,i=e.border,a=e.margin,l=e.padding,u=(r=t,{top:(n=o).top+r.y,left:n.left+r.x,bottom:n.bottom+r.y,right:n.right+r.x});return Q({borderBox:u,border:i,margin:a,padding:l})},X=function(e,t){return void 0===t&&(t={x:window.pageXOffset,y:window.pageYOffset}),K(e,t)},J=function(e,t){var n={top:Y(t.marginTop),right:Y(t.marginRight),bottom:Y(t.marginBottom),left:Y(t.marginLeft)},r={top:Y(t.paddingTop),right:Y(t.paddingRight),bottom:Y(t.paddingBottom),left:Y(t.paddingLeft)},o={top:Y(t.borderTopWidth),right:Y(t.borderRightWidth),bottom:Y(t.borderBottomWidth),left:Y(t.borderLeftWidth)};return Q({borderBox:e,margin:n,padding:r,border:o})},Z=function(e){var t=e.getBoundingClientRect(),n=window.getComputedStyle(e);return J(t,n)};function ee(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var te=function(e,t){var n;void 0===t&&(t=ee);var r,o=[],i=!1;return function(){for(var a=[],l=0;l<arguments.length;l++)a[l]=arguments[l];return i&&n===this&&t(a,o)||(r=e.apply(this,a),i=!0,n=this,o=a),r}},ne=function(e){var t=[],n=null,r=function(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];t=o,n||(n=requestAnimationFrame((function(){n=null,e.apply(void 0,t)})))};return r.cancel=function(){n&&(cancelAnimationFrame(n),n=null)},r};function re(e,t){}re.bind(null,"warn"),re.bind(null,"error");function oe(){}function ie(e,t,n){var r=t.map((function(t){var r,o,i=(r=n,o=t.options,F({},r,{},o));return e.addEventListener(t.eventName,t.fn,i),function(){e.removeEventListener(t.eventName,t.fn,i)}}));return function(){r.forEach((function(e){e()}))}}function ae(e){this.message=e}function le(e,t){if(!e)throw new ae("Invariant failed")}ae.prototype.toString=function(){return this.message};var ue=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).callbacks=null,t.unbind=oe,t.onWindowError=function(e){var n=t.getCallbacks();n.isDragging()&&n.tryAbort(),e.error instanceof ae&&e.preventDefault()},t.getCallbacks=function(){if(!t.callbacks)throw new Error("Unable to find AppCallbacks in <ErrorBoundary/>");return t.callbacks},t.setCallbacks=function(e){t.callbacks=e},t}B(t,e);var n=t.prototype;return n.componentDidMount=function(){this.unbind=ie(window,[{eventName:"error",fn:this.onWindowError}])},n.componentWillUnmount=function(){this.unbind()},n.componentDidCatch=function(e){if(!(e instanceof ae))throw e;this.setState({})},n.render=function(){return this.props.children(this.setCallbacks)},t}(i.a.Component),ce=function(e){return e+1},se=function(e,t){var n=e.droppableId===t.droppableId,r=ce(e.index),o=ce(t.index);return n?"\n      You have moved the item from position "+r+"\n      to position "+o+"\n    ":"\n    You have moved the item from position "+r+"\n    in list "+e.droppableId+"\n    to list "+t.droppableId+"\n    in position "+o+"\n  "},fe=function(e,t,n){return t.droppableId===n.droppableId?"\n      The item "+e+"\n      has been combined with "+n.draggableId:"\n      The item "+e+"\n      in list "+t.droppableId+"\n      has been combined with "+n.draggableId+"\n      in list "+n.droppableId+"\n    "},de=function(e){return"\n  The item has returned to its starting position\n  of "+ce(e.index)+"\n"},pe="\n  Press space bar to start a drag.\n  When dragging you can use the arrow keys to move the item around and escape to cancel.\n  Some screen readers may require you to be in focus mode or to use your pass through key\n",me=function(e){return"\n  You have lifted an item in position "+ce(e.source.index)+"\n"},ge=function(e){var t=e.destination;if(t)return se(e.source,t);var n=e.combine;return n?fe(e.draggableId,e.source,n):"You are over an area that cannot be dropped on"},he=function(e){if("CANCEL"===e.reason)return"\n      Movement cancelled.\n      "+de(e.source)+"\n    ";var t=e.destination,n=e.combine;return t?"\n      You have dropped the item.\n      "+se(e.source,t)+"\n    ":n?"\n      You have dropped the item.\n      "+fe(e.draggableId,e.source,n)+"\n    ":"\n    The item has been dropped while not over a drop area.\n    "+de(e.source)+"\n  "},ve={x:0,y:0},be=function(e,t){return{x:e.x+t.x,y:e.y+t.y}},ye=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},we=function(e,t){return e.x===t.x&&e.y===t.y},xe=function(e){return{x:0!==e.x?-e.x:0,y:0!==e.y?-e.y:0}},Ee=function(e,t,n){var r;return void 0===n&&(n=0),(r={})[e]=t,r["x"===e?"y":"x"]=n,r},Se=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},Te=function(e,t){return Math.min.apply(Math,t.map((function(t){return Se(e,t)})))},Oe=function(e){return function(t){return{x:e(t.x),y:e(t.y)}}},Ce=function(e,t){return{top:e.top+t.y,left:e.left+t.x,bottom:e.bottom+t.y,right:e.right+t.x}},ke=function(e){return[{x:e.left,y:e.top},{x:e.right,y:e.top},{x:e.left,y:e.bottom},{x:e.right,y:e.bottom}]},Pe=function(e,t){return t&&t.shouldClipSubject?function(e,t){var n=H({top:Math.max(t.top,e.top),right:Math.min(t.right,e.right),bottom:Math.min(t.bottom,e.bottom),left:Math.max(t.left,e.left)});return n.width<=0||n.height<=0?null:n}(t.pageMarginBox,e):H(e)},Ie=function(e){var t=e.page,n=e.withPlaceholder,r=e.axis,o=e.frame,i=function(e,t,n){var r;return n&&n.increasedBy?F({},e,((r={})[t.end]=e[t.end]+n.increasedBy[t.line],r)):e}(function(e,t){return t?Ce(e,t.scroll.diff.displacement):e}(t.marginBox,o),r,n);return{page:t,withPlaceholder:n,active:Pe(i,o)}},De=function(e,t){e.frame||le(!1);var n=e.frame,r=ye(t,n.scroll.initial),o=xe(r),i=F({},n,{scroll:{initial:n.scroll.initial,current:t,diff:{value:r,displacement:o},max:n.scroll.max}});return F({},e,{frame:i,subject:Ie({page:e.subject.page,withPlaceholder:e.subject.withPlaceholder,axis:e.axis,frame:i})})};function Ne(e){return Object.values?Object.values(e):Object.keys(e).map((function(t){return e[t]}))}function _e(e,t){if(e.findIndex)return e.findIndex(t);for(var n=0;n<e.length;n++)if(t(e[n]))return n;return-1}function Ae(e,t){if(e.find)return e.find(t);var n=_e(e,t);return-1!==n?e[n]:void 0}function Re(e){return Array.prototype.slice.call(e)}var je=te((function(e){return e.reduce((function(e,t){return e[t.descriptor.id]=t,e}),{})})),Me=te((function(e){return e.reduce((function(e,t){return e[t.descriptor.id]=t,e}),{})})),Le=te((function(e){return Ne(e)})),Be=te((function(e){return Ne(e)})),Fe=te((function(e,t){return Be(t).filter((function(t){return e===t.descriptor.droppableId})).sort((function(e,t){return e.descriptor.index-t.descriptor.index}))}));function Ue(e){return e.at&&"REORDER"===e.at.type?e.at.destination:null}function ze(e){return e.at&&"COMBINE"===e.at.type?e.at.combine:null}var Ge=te((function(e,t){return t.filter((function(t){return t.descriptor.id!==e.descriptor.id}))})),We=function(e,t){return e.descriptor.droppableId===t.descriptor.id},He={point:ve,value:0},Ve={invisible:{},visible:{},all:[]},qe={displaced:Ve,displacedBy:He,at:null},$e=function(e,t){return function(n){return e<=n&&n<=t}},Qe=function(e){var t=$e(e.top,e.bottom),n=$e(e.left,e.right);return function(r){if(t(r.top)&&t(r.bottom)&&n(r.left)&&n(r.right))return!0;var o=t(r.top)||t(r.bottom),i=n(r.left)||n(r.right);if(o&&i)return!0;var a=r.top<e.top&&r.bottom>e.bottom,l=r.left<e.left&&r.right>e.right;return!(!a||!l)||(a&&i||l&&o)}},Ye=function(e){var t=$e(e.top,e.bottom),n=$e(e.left,e.right);return function(e){return t(e.top)&&t(e.bottom)&&n(e.left)&&n(e.right)}},Ke={direction:"vertical",line:"y",crossAxisLine:"x",start:"top",end:"bottom",size:"height",crossAxisStart:"left",crossAxisEnd:"right",crossAxisSize:"width"},Xe={direction:"horizontal",line:"x",crossAxisLine:"y",start:"left",end:"right",size:"width",crossAxisStart:"top",crossAxisEnd:"bottom",crossAxisSize:"height"},Je=function(e){var t=e.target,n=e.destination,r=e.viewport,o=e.withDroppableDisplacement,i=e.isVisibleThroughFrameFn,a=o?function(e,t){var n=t.frame?t.frame.scroll.diff.displacement:ve;return Ce(e,n)}(t,n):t;return function(e,t,n){return!!t.subject.active&&n(t.subject.active)(e)}(a,n,i)&&function(e,t,n){return n(t)(e)}(a,r,i)},Ze=function(e){return Je(F({},e,{isVisibleThroughFrameFn:Qe}))},et=function(e){return Je(F({},e,{isVisibleThroughFrameFn:Ye}))};function tt(e){var t=e.afterDragging,n=e.destination,r=e.displacedBy,o=e.viewport,i=e.forceShouldAnimate,a=e.last;return t.reduce((function(e,t){var l=function(e,t){var n=e.page.marginBox,r={top:t.point.y,right:0,bottom:0,left:t.point.x};return H(V(n,r))}(t,r),u=t.descriptor.id;if(e.all.push(u),!Ze({target:l,destination:n,viewport:o,withDroppableDisplacement:!0}))return e.invisible[t.descriptor.id]=!0,e;var c={draggableId:u,shouldAnimate:function(e,t,n){if("boolean"==typeof n)return n;if(!t)return!0;var r=t.invisible,o=t.visible;if(r[e])return!1;var i=o[e];return!i||i.shouldAnimate}(u,a,i)};return e.visible[u]=c,e}),{all:[],visible:{},invisible:{}})}function nt(e){var t=e.insideDestination,n=e.inHomeList,r=e.displacedBy,o=e.destination,i=function(e,t){if(!e.length)return 0;var n=e[e.length-1].descriptor.index;return t.inHomeList?n:n+1}(t,{inHomeList:n});return{displaced:Ve,displacedBy:r,at:{type:"REORDER",destination:{droppableId:o.descriptor.id,index:i}}}}function rt(e){var t=e.draggable,n=e.insideDestination,r=e.destination,o=e.viewport,i=e.displacedBy,a=e.last,l=e.index,u=e.forceShouldAnimate,c=We(t,r);if(null==l)return nt({insideDestination:n,inHomeList:c,displacedBy:i,destination:r});var s=Ae(n,(function(e){return e.descriptor.index===l}));if(!s)return nt({insideDestination:n,inHomeList:c,displacedBy:i,destination:r});var f=Ge(t,n),d=n.indexOf(s);return{displaced:tt({afterDragging:f.slice(d),destination:r,displacedBy:i,last:a,viewport:o.frame,forceShouldAnimate:u}),displacedBy:i,at:{type:"REORDER",destination:{droppableId:r.descriptor.id,index:l}}}}function ot(e,t){return Boolean(t.effected[e])}var it=function(e){var t=e.isMovingForward,n=e.isInHomeList,r=e.draggable,o=e.draggables,i=e.destination,a=e.insideDestination,l=e.previousImpact,u=e.viewport,c=e.afterCritical,s=l.at;if(s||le(!1),"REORDER"===s.type){var f=function(e){var t=e.isMovingForward,n=e.isInHomeList,r=e.insideDestination,o=e.location;if(!r.length)return null;var i=o.index,a=t?i+1:i-1,l=r[0].descriptor.index,u=r[r.length-1].descriptor.index;return a<l||a>(n?u:u+1)?null:a}({isMovingForward:t,isInHomeList:n,location:s.destination,insideDestination:a});return null==f?null:rt({draggable:r,insideDestination:a,destination:i,viewport:u,last:l.displaced,displacedBy:l.displacedBy,index:f})}var d=function(e){var t=e.isMovingForward,n=e.destination,r=e.draggables,o=e.combine,i=e.afterCritical;if(!n.isCombineEnabled)return null;var a=o.draggableId,l=r[a].descriptor.index;return ot(a,i)?t?l:l-1:t?l+1:l}({isMovingForward:t,destination:i,displaced:l.displaced,draggables:o,combine:s.combine,afterCritical:c});return null==d?null:rt({draggable:r,insideDestination:a,destination:i,viewport:u,last:l.displaced,displacedBy:l.displacedBy,index:d})},at=function(e){var t=e.afterCritical,n=e.impact,r=e.draggables,o=ze(n);o||le(!1);var i=o.draggableId,a=r[i].page.borderBox.center,l=function(e){var t=e.displaced,n=e.afterCritical,r=e.combineWith,o=e.displacedBy,i=Boolean(t.visible[r]||t.invisible[r]);return ot(r,n)?i?ve:xe(o.point):i?o.point:ve}({displaced:n.displaced,afterCritical:t,combineWith:i,displacedBy:n.displacedBy});return be(a,l)},lt=function(e,t){return t.margin[e.start]+t.borderBox[e.size]/2},ut=function(e,t,n){return t[e.crossAxisStart]+n.margin[e.crossAxisStart]+n.borderBox[e.crossAxisSize]/2},ct=function(e){var t=e.axis,n=e.moveRelativeTo,r=e.isMoving;return Ee(t.line,n.marginBox[t.end]+lt(t,r),ut(t,n.marginBox,r))},st=function(e){var t=e.axis,n=e.moveRelativeTo,r=e.isMoving;return Ee(t.line,n.marginBox[t.start]-function(e,t){return t.margin[e.end]+t.borderBox[e.size]/2}(t,r),ut(t,n.marginBox,r))},ft=function(e){var t=e.impact,n=e.draggable,r=e.draggables,o=e.droppable,i=e.afterCritical,a=Fe(o.descriptor.id,r),l=n.page,u=o.axis;if(!a.length)return function(e){var t=e.axis,n=e.moveInto,r=e.isMoving;return Ee(t.line,n.contentBox[t.start]+lt(t,r),ut(t,n.contentBox,r))}({axis:u,moveInto:o.page,isMoving:l});var c=t.displaced,s=t.displacedBy,f=c.all[0];if(f){var d=r[f];if(ot(f,i))return st({axis:u,moveRelativeTo:d.page,isMoving:l});var p=K(d.page,s.point);return st({axis:u,moveRelativeTo:p,isMoving:l})}var m=a[a.length-1];if(m.descriptor.id===n.descriptor.id)return l.borderBox.center;if(ot(m.descriptor.id,i)){var g=K(m.page,xe(i.displacedBy.point));return ct({axis:u,moveRelativeTo:g,isMoving:l})}return ct({axis:u,moveRelativeTo:m.page,isMoving:l})},dt=function(e,t){var n=e.frame;return n?be(t,n.scroll.diff.displacement):t},pt=function(e){var t=function(e){var t=e.impact,n=e.draggable,r=e.droppable,o=e.draggables,i=e.afterCritical,a=n.page.borderBox.center,l=t.at;return r&&l?"REORDER"===l.type?ft({impact:t,draggable:n,draggables:o,droppable:r,afterCritical:i}):at({impact:t,draggables:o,afterCritical:i}):a}(e),n=e.droppable;return n?dt(n,t):t},mt=function(e,t){var n=ye(t,e.scroll.initial),r=xe(n);return{frame:H({top:t.y,bottom:t.y+e.frame.height,left:t.x,right:t.x+e.frame.width}),scroll:{initial:e.scroll.initial,max:e.scroll.max,current:t,diff:{value:n,displacement:r}}}};function gt(e,t){return e.map((function(e){return t[e]}))}var ht=function(e){var t=e.pageBorderBoxCenter,n=e.draggable,r=function(e,t){return be(e.scroll.diff.displacement,t)}(e.viewport,t),o=ye(r,n.page.borderBox.center);return be(n.client.borderBox.center,o)},vt=function(e){var t=e.draggable,n=e.destination,r=e.newPageBorderBoxCenter,o=e.viewport,i=e.withDroppableDisplacement,a=e.onlyOnMainAxis,l=void 0!==a&&a,u=ye(r,t.page.borderBox.center),c={target:Ce(t.page.borderBox,u),destination:n,withDroppableDisplacement:i,viewport:o};return l?function(e){return Je(F({},e,{isVisibleThroughFrameFn:(t=e.destination.axis,function(e){var n=$e(e.top,e.bottom),r=$e(e.left,e.right);return function(e){return t===Ke?n(e.top)&&n(e.bottom):r(e.left)&&r(e.right)}})}));var t}(c):et(c)},bt=function(e){var t=e.isMovingForward,n=e.draggable,r=e.destination,o=e.draggables,i=e.previousImpact,a=e.viewport,l=e.previousPageBorderBoxCenter,u=e.previousClientSelection,c=e.afterCritical;if(!r.isEnabled)return null;var s=Fe(r.descriptor.id,o),f=We(n,r),d=function(e){var t=e.isMovingForward,n=e.draggable,r=e.destination,o=e.insideDestination,i=e.previousImpact;if(!r.isCombineEnabled)return null;if(!Ue(i))return null;function a(e){var t={type:"COMBINE",combine:{draggableId:e,droppableId:r.descriptor.id}};return F({},i,{at:t})}var l=i.displaced.all,u=l.length?l[0]:null;if(t)return u?a(u):null;var c=Ge(n,o);if(!u)return c.length?a(c[c.length-1].descriptor.id):null;var s=_e(c,(function(e){return e.descriptor.id===u}));-1===s&&le(!1);var f=s-1;return f<0?null:a(c[f].descriptor.id)}({isMovingForward:t,draggable:n,destination:r,insideDestination:s,previousImpact:i})||it({isMovingForward:t,isInHomeList:f,draggable:n,draggables:o,destination:r,insideDestination:s,previousImpact:i,viewport:a,afterCritical:c});if(!d)return null;var p=pt({impact:d,draggable:n,droppable:r,draggables:o,afterCritical:c});if(vt({draggable:n,destination:r,newPageBorderBoxCenter:p,viewport:a.frame,withDroppableDisplacement:!1,onlyOnMainAxis:!0}))return{clientSelection:ht({pageBorderBoxCenter:p,draggable:n,viewport:a}),impact:d,scrollJumpRequest:null};var m=ye(p,l);return{clientSelection:u,impact:function(e){var t=e.impact,n=e.viewport,r=e.destination,o=e.draggables,i=e.maxScrollChange,a=mt(n,be(n.scroll.current,i)),l=r.frame?De(r,be(r.frame.scroll.current,i)):r,u=t.displaced,c=tt({afterDragging:gt(u.all,o),destination:r,displacedBy:t.displacedBy,viewport:a.frame,last:u,forceShouldAnimate:!1}),s=tt({afterDragging:gt(u.all,o),destination:l,displacedBy:t.displacedBy,viewport:n.frame,last:u,forceShouldAnimate:!1}),f={},d={},p=[u,c,s];return u.all.forEach((function(e){var t=function(e,t){for(var n=0;n<t.length;n++){var r=t[n].visible[e];if(r)return r}return null}(e,p);t?d[e]=t:f[e]=!0})),F({},t,{displaced:{all:u.all,invisible:f,visible:d}})}({impact:d,viewport:a,destination:r,draggables:o,maxScrollChange:m}),scrollJumpRequest:m}},yt=function(e){var t=e.subject.active;return t||le(!1),t},wt=function(e,t){var n=e.page.borderBox.center;return ot(e.descriptor.id,t)?ye(n,t.displacedBy.point):n},xt=function(e,t){var n=e.page.borderBox;return ot(e.descriptor.id,t)?Ce(n,xe(t.displacedBy.point)):n},Et=te((function(e,t){var n=t[e.line];return{value:n,point:Ee(e.line,n)}})),St=function(e,t){return F({},e,{scroll:F({},e.scroll,{max:t})})},Tt=function(e,t,n){var r=e.frame;We(t,e)&&le(!1),e.subject.withPlaceholder&&le(!1);var o=Et(e.axis,t.displaceBy).point,i=function(e,t,n){var r=e.axis;if("virtual"===e.descriptor.mode)return Ee(r.line,t[r.line]);var o=e.subject.page.contentBox[r.size],i=Fe(e.descriptor.id,n).reduce((function(e,t){return e+t.client.marginBox[r.size]}),0)+t[r.line]-o;return i<=0?null:Ee(r.line,i)}(e,o,n),a={placeholderSize:o,increasedBy:i,oldFrameMaxScroll:e.frame?e.frame.scroll.max:null};if(!r)return F({},e,{subject:Ie({page:e.subject.page,withPlaceholder:a,axis:e.axis,frame:e.frame})});var l=i?be(r.scroll.max,i):r.scroll.max,u=St(r,l);return F({},e,{subject:Ie({page:e.subject.page,withPlaceholder:a,axis:e.axis,frame:u}),frame:u})},Ot=function(e){var t=e.isMovingForward,n=e.previousPageBorderBoxCenter,r=e.draggable,o=e.isOver,i=e.draggables,a=e.droppables,l=e.viewport,u=e.afterCritical,c=function(e){var t=e.isMovingForward,n=e.pageBorderBoxCenter,r=e.source,o=e.droppables,i=e.viewport,a=r.subject.active;if(!a)return null;var l=r.axis,u=$e(a[l.start],a[l.end]),c=Le(o).filter((function(e){return e!==r})).filter((function(e){return e.isEnabled})).filter((function(e){return Boolean(e.subject.active)})).filter((function(e){return Qe(i.frame)(yt(e))})).filter((function(e){var n=yt(e);return t?a[l.crossAxisEnd]<n[l.crossAxisEnd]:n[l.crossAxisStart]<a[l.crossAxisStart]})).filter((function(e){var t=yt(e),n=$e(t[l.start],t[l.end]);return u(t[l.start])||u(t[l.end])||n(a[l.start])||n(a[l.end])})).sort((function(e,n){var r=yt(e)[l.crossAxisStart],o=yt(n)[l.crossAxisStart];return t?r-o:o-r})).filter((function(e,t,n){return yt(e)[l.crossAxisStart]===yt(n[0])[l.crossAxisStart]}));if(!c.length)return null;if(1===c.length)return c[0];var s=c.filter((function(e){return $e(yt(e)[l.start],yt(e)[l.end])(n[l.line])}));return 1===s.length?s[0]:s.length>1?s.sort((function(e,t){return yt(e)[l.start]-yt(t)[l.start]}))[0]:c.sort((function(e,t){var r=Te(n,ke(yt(e))),o=Te(n,ke(yt(t)));return r!==o?r-o:yt(e)[l.start]-yt(t)[l.start]}))[0]}({isMovingForward:t,pageBorderBoxCenter:n,source:o,droppables:a,viewport:l});if(!c)return null;var s=Fe(c.descriptor.id,i),f=function(e){var t=e.previousPageBorderBoxCenter,n=e.moveRelativeTo,r=e.insideDestination,o=e.draggable,i=e.draggables,a=e.destination,l=e.viewport,u=e.afterCritical;if(!n){if(r.length)return null;var c={displaced:Ve,displacedBy:He,at:{type:"REORDER",destination:{droppableId:a.descriptor.id,index:0}}},s=pt({impact:c,draggable:o,droppable:a,draggables:i,afterCritical:u}),f=We(o,a)?a:Tt(a,o,i);return vt({draggable:o,destination:f,newPageBorderBoxCenter:s,viewport:l.frame,withDroppableDisplacement:!1,onlyOnMainAxis:!0})?c:null}var d,p=Boolean(t[a.axis.line]<=n.page.borderBox.center[a.axis.line]),m=(d=n.descriptor.index,n.descriptor.id===o.descriptor.id||p?d:d+1),g=Et(a.axis,o.displaceBy);return rt({draggable:o,insideDestination:r,destination:a,viewport:l,displacedBy:g,last:Ve,index:m})}({previousPageBorderBoxCenter:n,destination:c,draggable:r,draggables:i,moveRelativeTo:function(e){var t=e.pageBorderBoxCenter,n=e.viewport,r=e.destination,o=e.insideDestination,i=e.afterCritical;return o.filter((function(e){return et({target:xt(e,i),destination:r,viewport:n.frame,withDroppableDisplacement:!0})})).sort((function(e,n){var o=Se(t,dt(r,wt(e,i))),a=Se(t,dt(r,wt(n,i)));return o<a?-1:a<o?1:e.descriptor.index-n.descriptor.index}))[0]||null}({pageBorderBoxCenter:n,viewport:l,destination:c,insideDestination:s,afterCritical:u}),insideDestination:s,viewport:l,afterCritical:u});if(!f)return null;var d=pt({impact:f,draggable:r,droppable:c,draggables:i,afterCritical:u});return{clientSelection:ht({pageBorderBoxCenter:d,draggable:r,viewport:l}),impact:f,scrollJumpRequest:null}},Ct=function(e){var t=e.at;return t?"REORDER"===t.type?t.destination.droppableId:t.combine.droppableId:null},kt=function(e){var t=e.state,n=e.type,r=function(e,t){var n=Ct(e);return n?t[n]:null}(t.impact,t.dimensions.droppables),o=Boolean(r),i=t.dimensions.droppables[t.critical.droppable.id],a=r||i,l=a.axis.direction,u="vertical"===l&&("MOVE_UP"===n||"MOVE_DOWN"===n)||"horizontal"===l&&("MOVE_LEFT"===n||"MOVE_RIGHT"===n);if(u&&!o)return null;var c="MOVE_DOWN"===n||"MOVE_RIGHT"===n,s=t.dimensions.draggables[t.critical.draggable.id],f=t.current.page.borderBoxCenter,d=t.dimensions,p=d.draggables,m=d.droppables;return u?bt({isMovingForward:c,previousPageBorderBoxCenter:f,draggable:s,destination:a,draggables:p,viewport:t.viewport,previousClientSelection:t.current.client.selection,previousImpact:t.impact,afterCritical:t.afterCritical}):Ot({isMovingForward:c,previousPageBorderBoxCenter:f,draggable:s,isOver:a,draggables:p,droppables:m,viewport:t.viewport,afterCritical:t.afterCritical})};function Pt(e){return"DRAGGING"===e.phase||"COLLECTING"===e.phase}function It(e){var t=$e(e.top,e.bottom),n=$e(e.left,e.right);return function(e){return t(e.y)&&n(e.x)}}function Dt(e){var t=e.pageBorderBox,n=e.draggable,r=e.droppables,o=Le(r).filter((function(e){if(!e.isEnabled)return!1;var n,r,o=e.subject.active;if(!o)return!1;if(r=o,!((n=t).left<r.right&&n.right>r.left&&n.top<r.bottom&&n.bottom>r.top))return!1;if(It(o)(t.center))return!0;var i=e.axis,a=o.center[i.crossAxisLine],l=t[i.crossAxisStart],u=t[i.crossAxisEnd],c=$e(o[i.crossAxisStart],o[i.crossAxisEnd]),s=c(l),f=c(u);return!s&&!f||(s?l<a:u>a)}));return o.length?1===o.length?o[0].descriptor.id:function(e){var t=e.pageBorderBox,n=e.draggable,r=e.candidates,o=n.page.borderBox.center,i=r.map((function(e){var n=e.axis,r=Ee(e.axis.line,t.center[n.line],e.page.borderBox.center[n.crossAxisLine]);return{id:e.descriptor.id,distance:Se(o,r)}})).sort((function(e,t){return t.distance-e.distance}));return i[0]?i[0].id:null}({pageBorderBox:t,draggable:n,candidates:o}):null}var Nt=function(e,t){return H(Ce(e,t))};function _t(e){var t=e.displaced,n=e.id;return Boolean(t.visible[n]||t.invisible[n])}var At=function(e){var t=e.pageOffset,n=e.draggable,r=e.draggables,o=e.droppables,i=e.previousImpact,a=e.viewport,l=e.afterCritical,u=Nt(n.page.borderBox,t),c=Dt({pageBorderBox:u,draggable:n,droppables:o});if(!c)return qe;var s,f,d=o[c],p=Fe(d.descriptor.id,r),m=(s=u,(f=d.frame)?Nt(s,f.scroll.diff.value):s);return function(e){var t=e.draggable,n=e.pageBorderBoxWithDroppableScroll,r=e.previousImpact,o=e.destination,i=e.insideDestination,a=e.afterCritical;if(!o.isCombineEnabled)return null;var l=o.axis,u=Et(o.axis,t.displaceBy),c=u.value,s=n[l.start],f=n[l.end],d=Ae(Ge(t,i),(function(e){var t=e.descriptor.id,n=e.page.borderBox,o=n[l.size]/4,i=ot(t,a),u=_t({displaced:r.displaced,id:t});return i?u?f>n[l.start]+o&&f<n[l.end]-o:s>n[l.start]-c+o&&s<n[l.end]-c-o:u?f>n[l.start]+c+o&&f<n[l.end]+c-o:s>n[l.start]+o&&s<n[l.end]-o}));return d?{displacedBy:u,displaced:r.displaced,at:{type:"COMBINE",combine:{draggableId:d.descriptor.id,droppableId:o.descriptor.id}}}:null}({pageBorderBoxWithDroppableScroll:m,draggable:n,previousImpact:i,destination:d,insideDestination:p,afterCritical:l})||function(e){var t=e.pageBorderBoxWithDroppableScroll,n=e.draggable,r=e.destination,o=e.insideDestination,i=e.last,a=e.viewport,l=e.afterCritical,u=r.axis,c=Et(r.axis,n.displaceBy),s=c.value,f=t[u.start],d=t[u.end],p=function(e){var t=e.draggable,n=e.closest,r=e.inHomeList;return n?r&&n.descriptor.index>t.descriptor.index?n.descriptor.index-1:n.descriptor.index:null}({draggable:n,closest:Ae(Ge(n,o),(function(e){var t=e.descriptor.id,n=e.page.borderBox.center[u.line],r=ot(t,l),o=_t({displaced:i,id:t});return r?o?d<=n:f<n-s:o?d<=n+s:f<n})),inHomeList:We(n,r)});return rt({draggable:n,insideDestination:o,destination:r,viewport:a,last:i,displacedBy:c,index:p})}({pageBorderBoxWithDroppableScroll:m,draggable:n,destination:d,insideDestination:p,last:i.displaced,viewport:a,afterCritical:l})},Rt=function(e,t){var n;return F({},e,((n={})[t.descriptor.id]=t,n))},jt=function(e){var t=e.previousImpact,n=e.impact,r=e.droppables,o=Ct(t),i=Ct(n);if(!o)return r;if(o===i)return r;var a=r[o];if(!a.subject.withPlaceholder)return r;var l=function(e){var t=e.subject.withPlaceholder;t||le(!1);var n=e.frame;if(!n)return F({},e,{subject:Ie({page:e.subject.page,axis:e.axis,frame:null,withPlaceholder:null})});var r=t.oldFrameMaxScroll;r||le(!1);var o=St(n,r);return F({},e,{subject:Ie({page:e.subject.page,axis:e.axis,frame:o,withPlaceholder:null}),frame:o})}(a);return Rt(r,l)},Mt=function(e){var t=e.state,n=e.clientSelection,r=e.dimensions,o=e.viewport,i=e.impact,a=e.scrollJumpRequest,l=o||t.viewport,u=r||t.dimensions,c=n||t.current.client.selection,s=ye(c,t.initial.client.selection),f={offset:s,selection:c,borderBoxCenter:be(t.initial.client.borderBoxCenter,s)},d={selection:be(f.selection,l.scroll.current),borderBoxCenter:be(f.borderBoxCenter,l.scroll.current),offset:be(f.offset,l.scroll.diff.value)},p={client:f,page:d};if("COLLECTING"===t.phase)return F({phase:"COLLECTING"},t,{dimensions:u,viewport:l,current:p});var m=u.draggables[t.critical.draggable.id],g=i||At({pageOffset:d.offset,draggable:m,draggables:u.draggables,droppables:u.droppables,previousImpact:t.impact,viewport:l,afterCritical:t.afterCritical}),h=function(e){var t=e.draggable,n=e.draggables,r=e.droppables,o=e.previousImpact,i=e.impact,a=jt({previousImpact:o,impact:i,droppables:r}),l=Ct(i);if(!l)return a;var u=r[l];if(We(t,u))return a;if(u.subject.withPlaceholder)return a;var c=Tt(u,t,n);return Rt(a,c)}({draggable:m,impact:g,previousImpact:t.impact,draggables:u.draggables,droppables:u.droppables});return F({},t,{current:p,dimensions:{draggables:u.draggables,droppables:h},impact:g,viewport:l,scrollJumpRequest:a||null,forceShouldAnimate:!a&&null})};var Lt=function(e){var t=e.impact,n=e.viewport,r=e.draggables,o=e.destination,i=e.forceShouldAnimate,a=t.displaced;return F({},t,{displaced:tt({afterDragging:function(e,t){return e.map((function(e){return t[e]}))}(a.all,r),destination:o,displacedBy:t.displacedBy,viewport:n.frame,forceShouldAnimate:i,last:a})})},Bt=function(e){var t=e.impact,n=e.draggable,r=e.droppable,o=e.draggables,i=e.viewport,a=e.afterCritical,l=pt({impact:t,draggable:n,draggables:o,droppable:r,afterCritical:a});return ht({pageBorderBoxCenter:l,draggable:n,viewport:i})},Ft=function(e){var t=e.state,n=e.dimensions,r=e.viewport;"SNAP"!==t.movementMode&&le(!1);var o=t.impact,i=r||t.viewport,a=n||t.dimensions,l=a.draggables,u=a.droppables,c=l[t.critical.draggable.id],s=Ct(o);s||le(!1);var f=u[s],d=Lt({impact:o,viewport:i,destination:f,draggables:l}),p=Bt({impact:d,draggable:c,droppable:f,draggables:l,viewport:i,afterCritical:t.afterCritical});return Mt({impact:d,clientSelection:p,state:t,dimensions:a,viewport:i})},Ut=function(e){var t=e.draggable,n=e.home,r=e.draggables,o=e.viewport,i=Et(n.axis,t.displaceBy),a=Fe(n.descriptor.id,r),l=a.indexOf(t);-1===l&&le(!1);var u,c=a.slice(l+1),s=c.reduce((function(e,t){return e[t.descriptor.id]=!0,e}),{}),f={inVirtualList:"virtual"===n.descriptor.mode,displacedBy:i,effected:s};return{impact:{displaced:tt({afterDragging:c,destination:n,displacedBy:i,last:null,viewport:o.frame,forceShouldAnimate:!1}),displacedBy:i,at:{type:"REORDER",destination:(u=t.descriptor,{index:u.index,droppableId:u.droppableId})}},afterCritical:f}},zt=function(e){0},Gt=function(e){0},Wt=function(e){var t=e.additions,n=e.updatedDroppables,r=e.viewport,o=r.scroll.diff.value;return t.map((function(e){var t=e.descriptor.droppableId,i=function(e){var t=e.frame;return t||le(!1),t}(n[t]).scroll.diff.value;return function(e){var t=e.draggable,n=e.offset,r=e.initialWindowScroll,o=K(t.client,n),i=X(o,r);return F({},t,{placeholder:F({},t.placeholder,{client:o}),client:o,page:i})}({draggable:e,offset:be(o,i),initialWindowScroll:r.scroll.initial})}))},Ht=function(e){return"SNAP"===e.movementMode},Vt=function(e,t,n){var r=function(e,t){return{draggables:e.draggables,droppables:Rt(e.droppables,t)}}(e.dimensions,t);return!Ht(e)||n?Mt({state:e,dimensions:r}):Ft({state:e,dimensions:r})};function qt(e){return e.isDragging&&"SNAP"===e.movementMode?F({phase:"DRAGGING"},e,{scrollJumpRequest:null}):e}var $t={phase:"IDLE",completed:null,shouldFlush:!1},Qt=function(e,t){if(void 0===e&&(e=$t),"FLUSH"===t.type)return F({},$t,{shouldFlush:!0});if("INITIAL_PUBLISH"===t.type){"IDLE"!==e.phase&&le(!1);var n=t.payload,r=n.critical,o=n.clientSelection,i=n.viewport,a=n.dimensions,l=n.movementMode,u=a.draggables[r.draggable.id],c=a.droppables[r.droppable.id],s={selection:o,borderBoxCenter:u.client.borderBox.center,offset:ve},f={client:s,page:{selection:be(s.selection,i.scroll.initial),borderBoxCenter:be(s.selection,i.scroll.initial),offset:be(s.selection,i.scroll.diff.value)}},d=Le(a.droppables).every((function(e){return!e.isFixedOnPage})),p=Ut({draggable:u,home:c,draggables:a.draggables,viewport:i}),m=p.impact;return{phase:"DRAGGING",isDragging:!0,critical:r,movementMode:l,dimensions:a,initial:f,current:f,isWindowScrollAllowed:d,impact:m,afterCritical:p.afterCritical,onLiftImpact:m,viewport:i,scrollJumpRequest:null,forceShouldAnimate:null}}if("COLLECTION_STARTING"===t.type)return"COLLECTING"===e.phase||"DROP_PENDING"===e.phase?e:("DRAGGING"!==e.phase&&le(!1),F({phase:"COLLECTING"},e,{phase:"COLLECTING"}));if("PUBLISH_WHILE_DRAGGING"===t.type)return"COLLECTING"!==e.phase&&"DROP_PENDING"!==e.phase&&le(!1),function(e){var t=e.state,n=e.published;zt();var r=n.modified.map((function(e){var n=t.dimensions.droppables[e.droppableId];return De(n,e.scroll)})),o=F({},t.dimensions.droppables,{},je(r)),i=Me(Wt({additions:n.additions,updatedDroppables:o,viewport:t.viewport})),a=F({},t.dimensions.draggables,{},i);n.removals.forEach((function(e){delete a[e]}));var l={droppables:o,draggables:a},u=Ct(t.impact),c=u?l.droppables[u]:null,s=l.draggables[t.critical.draggable.id],f=l.droppables[t.critical.droppable.id],d=Ut({draggable:s,home:f,draggables:a,viewport:t.viewport}),p=d.impact,m=d.afterCritical,g=c&&c.isCombineEnabled?t.impact:p,h=At({pageOffset:t.current.page.offset,draggable:l.draggables[t.critical.draggable.id],draggables:l.draggables,droppables:l.droppables,previousImpact:g,viewport:t.viewport,afterCritical:m});Gt();var v=F({phase:"DRAGGING"},t,{phase:"DRAGGING",impact:h,onLiftImpact:p,dimensions:l,afterCritical:m,forceShouldAnimate:!1});return"COLLECTING"===t.phase?v:F({phase:"DROP_PENDING"},v,{phase:"DROP_PENDING",reason:t.reason,isWaiting:!1})}({state:e,published:t.payload});if("MOVE"===t.type){if("DROP_PENDING"===e.phase)return e;Pt(e)||le(!1);var g=t.payload.client;return we(g,e.current.client.selection)?e:Mt({state:e,clientSelection:g,impact:Ht(e)?e.impact:null})}if("UPDATE_DROPPABLE_SCROLL"===t.type){if("DROP_PENDING"===e.phase)return qt(e);if("COLLECTING"===e.phase)return qt(e);Pt(e)||le(!1);var h=t.payload,v=h.id,b=h.newScroll,y=e.dimensions.droppables[v];if(!y)return e;var w=De(y,b);return Vt(e,w,!1)}if("UPDATE_DROPPABLE_IS_ENABLED"===t.type){if("DROP_PENDING"===e.phase)return e;Pt(e)||le(!1);var x=t.payload,E=x.id,S=x.isEnabled,T=e.dimensions.droppables[E];T||le(!1),T.isEnabled===S&&le(!1);var O=F({},T,{isEnabled:S});return Vt(e,O,!0)}if("UPDATE_DROPPABLE_IS_COMBINE_ENABLED"===t.type){if("DROP_PENDING"===e.phase)return e;Pt(e)||le(!1);var C=t.payload,k=C.id,P=C.isCombineEnabled,I=e.dimensions.droppables[k];I||le(!1),I.isCombineEnabled===P&&le(!1);var D=F({},I,{isCombineEnabled:P});return Vt(e,D,!0)}if("MOVE_BY_WINDOW_SCROLL"===t.type){if("DROP_PENDING"===e.phase||"DROP_ANIMATING"===e.phase)return e;Pt(e)||le(!1),e.isWindowScrollAllowed||le(!1);var N=t.payload.newScroll;if(we(e.viewport.scroll.current,N))return qt(e);var _=mt(e.viewport,N);return Ht(e)?Ft({state:e,viewport:_}):Mt({state:e,viewport:_})}if("UPDATE_VIEWPORT_MAX_SCROLL"===t.type){if(!Pt(e))return e;var A=t.payload.maxScroll;if(we(A,e.viewport.scroll.max))return e;var R=F({},e.viewport,{scroll:F({},e.viewport.scroll,{max:A})});return F({phase:"DRAGGING"},e,{viewport:R})}if("MOVE_UP"===t.type||"MOVE_DOWN"===t.type||"MOVE_LEFT"===t.type||"MOVE_RIGHT"===t.type){if("COLLECTING"===e.phase||"DROP_PENDING"===e.phase)return e;"DRAGGING"!==e.phase&&le(!1);var j=kt({state:e,type:t.type});return j?Mt({state:e,impact:j.impact,clientSelection:j.clientSelection,scrollJumpRequest:j.scrollJumpRequest}):e}if("DROP_PENDING"===t.type){var M=t.payload.reason;return"COLLECTING"!==e.phase&&le(!1),F({phase:"DROP_PENDING"},e,{phase:"DROP_PENDING",isWaiting:!0,reason:M})}if("DROP_ANIMATE"===t.type){var L=t.payload,B=L.completed,U=L.dropDuration,z=L.newHomeClientOffset;return"DRAGGING"!==e.phase&&"DROP_PENDING"!==e.phase&&le(!1),{phase:"DROP_ANIMATING",completed:B,dropDuration:U,newHomeClientOffset:z,dimensions:e.dimensions}}return"DROP_COMPLETE"===t.type?{phase:"IDLE",completed:t.payload.completed,shouldFlush:!1}:e},Yt=function(e){return{type:"PUBLISH_WHILE_DRAGGING",payload:e}},Kt=function(){return{type:"COLLECTION_STARTING",payload:null}},Xt=function(e){return{type:"UPDATE_DROPPABLE_SCROLL",payload:e}},Jt=function(e){return{type:"UPDATE_DROPPABLE_IS_ENABLED",payload:e}},Zt=function(e){return{type:"UPDATE_DROPPABLE_IS_COMBINE_ENABLED",payload:e}},en=function(e){return{type:"MOVE",payload:e}},tn=function(){return{type:"MOVE_UP",payload:null}},nn=function(){return{type:"MOVE_DOWN",payload:null}},rn=function(){return{type:"MOVE_RIGHT",payload:null}},on=function(){return{type:"MOVE_LEFT",payload:null}},an=function(e){return{type:"DROP_COMPLETE",payload:e}},ln=function(e){return{type:"DROP",payload:e}},un=function(){return{type:"DROP_ANIMATION_FINISHED",payload:null}};var cn="cubic-bezier(.2,1,.1,1)",sn={drop:0,combining:.7},fn={drop:.75},dn=.2+"s "+"cubic-bezier(0.2, 0, 0, 1)",pn={fluid:"opacity "+dn,snap:"transform "+dn+", opacity "+dn,drop:function(e){var t=e+"s "+cn;return"transform "+t+", opacity "+t},outOfTheWay:"transform "+dn,placeholder:"height "+dn+", width "+dn+", margin "+dn},mn=function(e){return we(e,ve)?null:"translate("+e.x+"px, "+e.y+"px)"},gn=mn,hn=function(e,t){var n=mn(e);return n?t?n+" scale("+fn.drop+")":n:null},vn=.33,bn=.55,yn=bn-vn,wn=function(e){var t=e.getState,n=e.dispatch;return function(e){return function(r){if("DROP"===r.type){var o=t(),i=r.payload.reason;if("COLLECTING"!==o.phase){if("IDLE"!==o.phase){"DROP_PENDING"===o.phase&&o.isWaiting&&le(!1),"DRAGGING"!==o.phase&&"DROP_PENDING"!==o.phase&&le(!1);var a=o.critical,l=o.dimensions,u=l.draggables[o.critical.draggable.id],c=function(e){var t=e.draggables,n=e.reason,r=e.lastImpact,o=e.home,i=e.viewport,a=e.onLiftImpact;return r.at&&"DROP"===n?"REORDER"===r.at.type?{impact:r,didDropInsideDroppable:!0}:{impact:F({},r,{displaced:Ve}),didDropInsideDroppable:!0}:{impact:Lt({draggables:t,impact:a,destination:o,viewport:i,forceShouldAnimate:!0}),didDropInsideDroppable:!1}}({reason:i,lastImpact:o.impact,afterCritical:o.afterCritical,onLiftImpact:o.onLiftImpact,home:o.dimensions.droppables[o.critical.droppable.id],viewport:o.viewport,draggables:o.dimensions.draggables}),s=c.impact,f=c.didDropInsideDroppable,d=f?Ue(s):null,p=f?ze(s):null,m={index:a.draggable.index,droppableId:a.droppable.id},g={draggableId:u.descriptor.id,type:u.descriptor.type,source:m,reason:i,mode:o.movementMode,destination:d,combine:p},h=function(e){var t=e.impact,n=e.draggable,r=e.dimensions,o=e.viewport,i=e.afterCritical,a=r.draggables,l=r.droppables,u=Ct(t),c=u?l[u]:null,s=l[n.descriptor.droppableId],f=Bt({impact:t,draggable:n,draggables:a,afterCritical:i,droppable:c||s,viewport:o});return ye(f,n.client.borderBox.center)}({impact:s,draggable:u,dimensions:l,viewport:o.viewport,afterCritical:o.afterCritical}),v={critical:o.critical,afterCritical:o.afterCritical,result:g,impact:s};if(!we(o.current.client.offset,h)||Boolean(g.combine)){var b=function(e){var t=e.current,n=e.destination,r=e.reason,o=Se(t,n);if(o<=0)return vn;if(o>=1500)return bn;var i=vn+yn*(o/1500);return Number(("CANCEL"===r?.6*i:i).toFixed(2))}({current:o.current.client.offset,destination:h,reason:i});n(function(e){return{type:"DROP_ANIMATE",payload:e}}({newHomeClientOffset:h,dropDuration:b,completed:v}))}else n(an({completed:v}))}}else n(function(e){return{type:"DROP_PENDING",payload:e}}({reason:i}))}else e(r)}}},xn=function(){return{x:window.pageXOffset,y:window.pageYOffset}};function En(e){var t=e.onWindowScroll;var n,r=ne((function(){t(xn())})),o=(n=r,{eventName:"scroll",options:{passive:!0,capture:!1},fn:function(e){e.target!==window&&e.target!==window.document||n()}}),i=oe;function a(){return i!==oe}return{start:function(){a()&&le(!1),i=ie(window,[o])},stop:function(){a()||le(!1),r.cancel(),i(),i=oe},isActive:a}}var Sn=function(e){var t=En({onWindowScroll:function(t){e.dispatch({type:"MOVE_BY_WINDOW_SCROLL",payload:{newScroll:t}})}});return function(e){return function(n){t.isActive()||"INITIAL_PUBLISH"!==n.type||t.start(),t.isActive()&&function(e){return"DROP_COMPLETE"===e.type||"DROP_ANIMATE"===e.type||"FLUSH"===e.type}(n)&&t.stop(),e(n)}}},Tn=function(){var e=[];return{add:function(t){var n=setTimeout((function(){return function(t){var n=_e(e,(function(e){return e.timerId===t}));-1===n&&le(!1),e.splice(n,1)[0].callback()}(n)})),r={timerId:n,callback:t};e.push(r)},flush:function(){if(e.length){var t=[].concat(e);e.length=0,t.forEach((function(e){clearTimeout(e.timerId),e.callback()}))}}}},On=function(e,t){zt(),t(),Gt()},Cn=function(e,t){return{draggableId:e.draggable.id,type:e.droppable.type,source:{droppableId:e.droppable.id,index:e.draggable.index},mode:t}},kn=function(e,t,n,r){if(e){var o=function(e){var t=!1,n=!1,r=setTimeout((function(){n=!0})),o=function(o){t||n||(t=!0,e(o),clearTimeout(r))};return o.wasCalled=function(){return t},o}(n);e(t,{announce:o}),o.wasCalled()||n(r(t))}else n(r(t))},Pn=function(e,t){var n=function(e,t){var n=Tn(),r=null,o=function(n){r||le(!1),r=null,On(0,(function(){return kn(e().onDragEnd,n,t,he)}))};return{beforeCapture:function(t,n){r&&le(!1),On(0,(function(){var r=e().onBeforeCapture;r&&r({draggableId:t,mode:n})}))},beforeStart:function(t,n){r&&le(!1),On(0,(function(){var r=e().onBeforeDragStart;r&&r(Cn(t,n))}))},start:function(o,i){r&&le(!1);var a=Cn(o,i);r={mode:i,lastCritical:o,lastLocation:a.source,lastCombine:null},n.add((function(){On(0,(function(){return kn(e().onDragStart,a,t,me)}))}))},update:function(o,i){var a=Ue(i),l=ze(i);r||le(!1);var u=!function(e,t){if(e===t)return!0;var n=e.draggable.id===t.draggable.id&&e.draggable.droppableId===t.draggable.droppableId&&e.draggable.type===t.draggable.type&&e.draggable.index===t.draggable.index,r=e.droppable.id===t.droppable.id&&e.droppable.type===t.droppable.type;return n&&r}(o,r.lastCritical);u&&(r.lastCritical=o);var c,s,f=(c=r.lastLocation,s=a,!(null==c&&null==s||null!=c&&null!=s&&c.droppableId===s.droppableId&&c.index===s.index));f&&(r.lastLocation=a);var d=!function(e,t){return null==e&&null==t||null!=e&&null!=t&&(e.draggableId===t.draggableId&&e.droppableId===t.droppableId)}(r.lastCombine,l);if(d&&(r.lastCombine=l),u||f||d){var p=F({},Cn(o,r.mode),{combine:l,destination:a});n.add((function(){On(0,(function(){return kn(e().onDragUpdate,p,t,ge)}))}))}},flush:function(){r||le(!1),n.flush()},drop:o,abort:function(){if(r){var e=F({},Cn(r.lastCritical,r.mode),{combine:null,destination:null,reason:"CANCEL"});o(e)}}}}(e,t);return function(e){return function(t){return function(r){if("BEFORE_INITIAL_CAPTURE"!==r.type){if("INITIAL_PUBLISH"===r.type){var o=r.payload.critical;return n.beforeStart(o,r.payload.movementMode),t(r),void n.start(o,r.payload.movementMode)}if("DROP_COMPLETE"===r.type){var i=r.payload.completed.result;return n.flush(),t(r),void n.drop(i)}if(t(r),"FLUSH"!==r.type){var a=e.getState();"DRAGGING"===a.phase&&n.update(a.critical,a.impact)}else n.abort()}else n.beforeCapture(r.payload.draggableId,r.payload.movementMode)}}}},In=function(e){return function(t){return function(n){if("DROP_ANIMATION_FINISHED"===n.type){var r=e.getState();"DROP_ANIMATING"!==r.phase&&le(!1),e.dispatch(an({completed:r.completed}))}else t(n)}}},Dn=function(e){var t=null,n=null;return function(r){return function(o){if("FLUSH"!==o.type&&"DROP_COMPLETE"!==o.type&&"DROP_ANIMATION_FINISHED"!==o.type||(n&&(cancelAnimationFrame(n),n=null),t&&(t(),t=null)),r(o),"DROP_ANIMATE"===o.type){var i={eventName:"scroll",options:{capture:!0,passive:!1,once:!0},fn:function(){"DROP_ANIMATING"===e.getState().phase&&e.dispatch({type:"DROP_ANIMATION_FINISHED",payload:null})}};n=requestAnimationFrame((function(){n=null,t=ie(window,[i])}))}}}},Nn=function(e){return function(t){return function(n){if(t(n),"PUBLISH_WHILE_DRAGGING"===n.type){var r=e.getState();"DROP_PENDING"===r.phase&&(r.isWaiting||e.dispatch(ln({reason:r.reason})))}}}},_n=s.compose,An=function(e){var t,n=e.dimensionMarshal,r=e.focusMarshal,o=e.styleMarshal,i=e.getResponders,a=e.announce,l=e.autoScroller;return Object(s.createStore)(Qt,_n(Object(s.applyMiddleware)((t=o,function(){return function(e){return function(n){"INITIAL_PUBLISH"===n.type&&t.dragging(),"DROP_ANIMATE"===n.type&&t.dropping(n.payload.completed.result.reason),"FLUSH"!==n.type&&"DROP_COMPLETE"!==n.type||t.resting(),e(n)}}}),function(e){return function(){return function(t){return function(n){"DROP_COMPLETE"!==n.type&&"FLUSH"!==n.type&&"DROP_ANIMATE"!==n.type||e.stopPublishing(),t(n)}}}}(n),function(e){return function(t){var n=t.getState,r=t.dispatch;return function(t){return function(o){if("LIFT"===o.type){var i=o.payload,a=i.id,l=i.clientSelection,u=i.movementMode,c=n();"DROP_ANIMATING"===c.phase&&r(an({completed:c.completed})),"IDLE"!==n().phase&&le(!1),r({type:"FLUSH",payload:null}),r({type:"BEFORE_INITIAL_CAPTURE",payload:{draggableId:a,movementMode:u}});var s={draggableId:a,scrollOptions:{shouldPublishImmediately:"SNAP"===u}},f=e.startPublishing(s),d=f.critical,p=f.dimensions,m=f.viewport;r(function(e){return{type:"INITIAL_PUBLISH",payload:e}}({critical:d,dimensions:p,clientSelection:l,movementMode:u,viewport:m}))}else t(o)}}}}(n),wn,In,Dn,Nn,function(e){return function(t){return function(n){return function(r){if(function(e){return"DROP_COMPLETE"===e.type||"DROP_ANIMATE"===e.type||"FLUSH"===e.type}(r))return e.stop(),void n(r);if("INITIAL_PUBLISH"===r.type){n(r);var o=t.getState();return"DRAGGING"!==o.phase&&le(!1),void e.start(o)}n(r),e.scroll(t.getState())}}}}(l),Sn,function(e){var t=!1;return function(){return function(n){return function(r){if("INITIAL_PUBLISH"===r.type)return t=!0,e.tryRecordFocus(r.payload.critical.draggable.id),n(r),void e.tryRestoreFocusRecorded();if(n(r),t){if("FLUSH"===r.type)return t=!1,void e.tryRestoreFocusRecorded();if("DROP_COMPLETE"===r.type){t=!1;var o=r.payload.completed.result;o.combine&&e.tryShiftRecord(o.draggableId,o.combine.draggableId),e.tryRestoreFocusRecorded()}}}}}}(r),Pn(i,a))))};var Rn=function(e){var t=e.scrollHeight,n=e.scrollWidth,r=e.height,o=e.width,i=ye({x:n,y:t},{x:o,y:r});return{x:Math.max(0,i.x),y:Math.max(0,i.y)}},jn=function(){var e=document.documentElement;return e||le(!1),e},Mn=function(){var e=jn();return Rn({scrollHeight:e.scrollHeight,scrollWidth:e.scrollWidth,width:e.clientWidth,height:e.clientHeight})},Ln=function(e){var t=e.critical,n=e.scrollOptions,r=e.registry;zt();var o,i,a,l,u,c,s,f=(o=xn(),i=Mn(),a=o.y,l=o.x,u=jn(),c=u.clientWidth,s=u.clientHeight,{frame:H({top:a,left:l,right:l+c,bottom:a+s}),scroll:{initial:o,current:o,max:i,diff:{value:ve,displacement:ve}}}),d=f.scroll.current,p=t.droppable,m=r.droppable.getAllByType(p.type).map((function(e){return e.callbacks.getDimensionAndWatchScroll(d,n)})),g=r.draggable.getAllByType(t.draggable.type).map((function(e){return e.getDimension(d)})),h={draggables:Me(g),droppables:je(m)};return Gt(),{dimensions:h,critical:t,viewport:f}};function Bn(e,t,n){return n.descriptor.id!==t.id&&(n.descriptor.type===t.type&&"virtual"===e.droppable.getById(n.descriptor.droppableId).descriptor.mode)}var Fn,Un,zn=function(e,t){var n=null,r=function(e){var t=e.registry,n=e.callbacks,r={additions:{},removals:{},modified:{}},o=null,i=function(){o||(n.collectionStarting(),o=requestAnimationFrame((function(){o=null,zt();var e=r,i=e.additions,a=e.removals,l=e.modified,u=Object.keys(i).map((function(e){return t.draggable.getById(e).getDimension(ve)})).sort((function(e,t){return e.descriptor.index-t.descriptor.index})),c=Object.keys(l).map((function(e){return{droppableId:e,scroll:t.droppable.getById(e).callbacks.getScrollWhileDragging()}})),s={additions:u,removals:Object.keys(a),modified:c};r={additions:{},removals:{},modified:{}},Gt(),n.publish(s)})))};return{add:function(e){var t=e.descriptor.id;r.additions[t]=e,r.modified[e.descriptor.droppableId]=!0,r.removals[t]&&delete r.removals[t],i()},remove:function(e){var t=e.descriptor;r.removals[t.id]=!0,r.modified[t.droppableId]=!0,r.additions[t.id]&&delete r.additions[t.id],i()},stop:function(){o&&(cancelAnimationFrame(o),o=null,r={additions:{},removals:{},modified:{}})}}}({callbacks:{publish:t.publishWhileDragging,collectionStarting:t.collectionStarting},registry:e}),o=function(t){n||le(!1);var o=n.critical.draggable;"ADDITION"===t.type&&Bn(e,o,t.value)&&r.add(t.value),"REMOVAL"===t.type&&Bn(e,o,t.value)&&r.remove(t.value)};return{updateDroppableIsEnabled:function(r,o){e.droppable.exists(r)||le(!1),n&&t.updateDroppableIsEnabled({id:r,isEnabled:o})},updateDroppableIsCombineEnabled:function(r,o){n&&(e.droppable.exists(r)||le(!1),t.updateDroppableIsCombineEnabled({id:r,isCombineEnabled:o}))},scrollDroppable:function(t,r){n&&e.droppable.getById(t).callbacks.scroll(r)},updateDroppableScroll:function(r,o){n&&(e.droppable.exists(r)||le(!1),t.updateDroppableScroll({id:r,newScroll:o}))},startPublishing:function(t){n&&le(!1);var r=e.draggable.getById(t.draggableId),i=e.droppable.getById(r.descriptor.droppableId),a={draggable:r.descriptor,droppable:i.descriptor},l=e.subscribe(o);return n={critical:a,unsubscribe:l},Ln({critical:a,registry:e,scrollOptions:t.scrollOptions})},stopPublishing:function(){if(n){r.stop();var t=n.critical.droppable;e.droppable.getAllByType(t.type).forEach((function(e){return e.callbacks.dragStopped()})),n.unsubscribe(),n=null}}}},Gn=function(e,t){return"IDLE"===e.phase||"DROP_ANIMATING"===e.phase&&(e.completed.result.draggableId!==t&&"DROP"===e.completed.result.reason)},Wn=function(e){window.scrollBy(e.x,e.y)},Hn=te((function(e){return Le(e).filter((function(e){return!!e.isEnabled&&!!e.frame}))})),Vn=function(e){var t=e.center,n=e.destination,r=e.droppables;if(n){var o=r[n];return o.frame?o:null}return function(e,t){return Ae(Hn(t),(function(t){return t.frame||le(!1),It(t.frame.pageMarginBox)(e)}))}(t,r)},qn=.25,$n=.05,Qn=28,Yn=function(e){return Math.pow(e,2)},Kn={stopDampeningAt:1200,accelerateAt:360},Xn=function(e){var t=e.startOfRange,n=e.endOfRange,r=e.current,o=n-t;return 0===o?0:(r-t)/o},Jn=Kn.accelerateAt,Zn=Kn.stopDampeningAt,er=function(e){var t=e.distanceToEdge,n=e.thresholds,r=e.dragStartTime,o=e.shouldUseTimeDampening,i=function(e,t){if(e>t.startScrollingFrom)return 0;if(e<=t.maxScrollValueAt)return Qn;if(e===t.startScrollingFrom)return 1;var n=Xn({startOfRange:t.maxScrollValueAt,endOfRange:t.startScrollingFrom,current:e}),r=Qn*Yn(1-n);return Math.ceil(r)}(t,n);return 0===i?0:o?Math.max(function(e,t){var n=t,r=Zn,o=Date.now()-n;if(o>=Zn)return e;if(o<Jn)return 1;var i=Xn({startOfRange:Jn,endOfRange:r,current:o}),a=e*Yn(i);return Math.ceil(a)}(i,r),1):i},tr=function(e){var t=e.container,n=e.distanceToEdges,r=e.dragStartTime,o=e.axis,i=e.shouldUseTimeDampening,a=function(e,t){return{startScrollingFrom:e[t.size]*qn,maxScrollValueAt:e[t.size]*$n}}(t,o);return n[o.end]<n[o.start]?er({distanceToEdge:n[o.end],thresholds:a,dragStartTime:r,shouldUseTimeDampening:i}):-1*er({distanceToEdge:n[o.start],thresholds:a,dragStartTime:r,shouldUseTimeDampening:i})},nr=Oe((function(e){return 0===e?0:e})),rr=function(e){var t=e.dragStartTime,n=e.container,r=e.subject,o=e.center,i=e.shouldUseTimeDampening,a={top:o.y-n.top,right:n.right-o.x,bottom:n.bottom-o.y,left:o.x-n.left},l=tr({container:n,distanceToEdges:a,dragStartTime:t,axis:Ke,shouldUseTimeDampening:i}),u=tr({container:n,distanceToEdges:a,dragStartTime:t,axis:Xe,shouldUseTimeDampening:i}),c=nr({x:u,y:l});if(we(c,ve))return null;var s=function(e){var t=e.container,n=e.subject,r=e.proposedScroll,o=n.height>t.height,i=n.width>t.width;return i||o?i&&o?null:{x:i?0:r.x,y:o?0:r.y}:r}({container:n,subject:r,proposedScroll:c});return s?we(s,ve)?null:s:null},or=Oe((function(e){return 0===e?0:e>0?1:-1})),ir=(Fn=function(e,t){return e<0?e:e>t?e-t:0},function(e){var t=e.current,n=e.max,r=e.change,o=be(t,r),i={x:Fn(o.x,n.x),y:Fn(o.y,n.y)};return we(i,ve)?null:i}),ar=function(e){var t=e.max,n=e.current,r=e.change,o={x:Math.max(n.x,t.x),y:Math.max(n.y,t.y)},i=or(r),a=ir({max:o,current:n,change:i});return!a||(0!==i.x&&0===a.x||0!==i.y&&0===a.y)},lr=function(e,t){return ar({current:e.scroll.current,max:e.scroll.max,change:t})},ur=function(e,t){var n=e.frame;return!!n&&ar({current:n.scroll.current,max:n.scroll.max,change:t})},cr=function(e){var t=e.state,n=e.dragStartTime,r=e.shouldUseTimeDampening,o=e.scrollWindow,i=e.scrollDroppable,a=t.current.page.borderBoxCenter,l=t.dimensions.draggables[t.critical.draggable.id].page.marginBox;if(t.isWindowScrollAllowed){var u=function(e){var t=e.viewport,n=e.subject,r=e.center,o=e.dragStartTime,i=e.shouldUseTimeDampening,a=rr({dragStartTime:o,container:t.frame,subject:n,center:r,shouldUseTimeDampening:i});return a&&lr(t,a)?a:null}({dragStartTime:n,viewport:t.viewport,subject:l,center:a,shouldUseTimeDampening:r});if(u)return void o(u)}var c=Vn({center:a,destination:Ct(t.impact),droppables:t.dimensions.droppables});if(c){var s=function(e){var t=e.droppable,n=e.subject,r=e.center,o=e.dragStartTime,i=e.shouldUseTimeDampening,a=t.frame;if(!a)return null;var l=rr({dragStartTime:o,container:a.pageMarginBox,subject:n,center:r,shouldUseTimeDampening:i});return l&&ur(t,l)?l:null}({dragStartTime:n,droppable:c,subject:l,center:a,shouldUseTimeDampening:r});s&&i(c.descriptor.id,s)}},sr=function(e){var t=e.move,n=e.scrollDroppable,r=e.scrollWindow,o=function(e,t){if(!ur(e,t))return t;var r=function(e,t){var n=e.frame;return n&&ur(e,t)?ir({current:n.scroll.current,max:n.scroll.max,change:t}):null}(e,t);if(!r)return n(e.descriptor.id,t),null;var o=ye(t,r);return n(e.descriptor.id,o),ye(t,o)},i=function(e,t,n){if(!e)return n;if(!lr(t,n))return n;var o=function(e,t){if(!lr(e,t))return null;var n=e.scroll.max,r=e.scroll.current;return ir({current:r,max:n,change:t})}(t,n);if(!o)return r(n),null;var i=ye(n,o);return r(i),ye(n,i)};return function(e){var n=e.scrollJumpRequest;if(n){var r=Ct(e.impact);r||le(!1);var a=o(e.dimensions.droppables[r],n);if(a){var l=e.viewport,u=i(e.isWindowScrollAllowed,l,a);u&&function(e,n){var r=be(e.current.client.selection,n);t({client:r})}(e,u)}}}},fr=function(e){var t=e.scrollDroppable,n=e.scrollWindow,r=e.move,o=function(e){var t=e.scrollWindow,n=e.scrollDroppable,r=ne(t),o=ne(n),i=null,a=function(e){i||le(!1);var t=i,n=t.shouldUseTimeDampening,a=t.dragStartTime;cr({state:e,scrollWindow:r,scrollDroppable:o,dragStartTime:a,shouldUseTimeDampening:n})};return{start:function(e){zt(),i&&le(!1);var t=Date.now(),n=!1,r=function(){n=!0};cr({state:e,dragStartTime:0,shouldUseTimeDampening:!1,scrollWindow:r,scrollDroppable:r}),i={dragStartTime:t,shouldUseTimeDampening:n},Gt(),n&&a(e)},stop:function(){i&&(r.cancel(),o.cancel(),i=null)},scroll:a}}({scrollWindow:n,scrollDroppable:t}),i=sr({move:r,scrollWindow:n,scrollDroppable:t});return{scroll:function(e){"DRAGGING"===e.phase&&("FLUID"!==e.movementMode?e.scrollJumpRequest&&i(e):o.scroll(e))},start:o.start,stop:o.stop}},dr={base:Un="data-rbd-drag-handle",draggableId:Un+"-draggable-id",contextId:Un+"-context-id"},pr=function(){var e="data-rbd-draggable";return{base:e,contextId:e+"-context-id",id:e+"-id"}}(),mr=function(){var e="data-rbd-droppable";return{base:e,contextId:e+"-context-id",id:e+"-id"}}(),gr={contextId:"data-rbd-scroll-container-context-id"},hr=function(e,t){return e.map((function(e){var n=e.styles[t];return n?e.selector+" { "+n+" }":""})).join(" ")},vr="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?o.useLayoutEffect:o.useEffect,br=function(){var e=document.querySelector("head");return e||le(!1),e},yr=function(e){var t=document.createElement("style");return e&&t.setAttribute("nonce",e),t.type="text/css",t};function wr(e,t){var n=z((function(){return function(e){var t,n,r,o=(t=e,function(e){return"["+e+'="'+t+'"]'}),i=(n="\n      cursor: -webkit-grab;\n      cursor: grab;\n    ",{selector:o(dr.contextId),styles:{always:"\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",resting:n,dragging:"pointer-events: none;",dropAnimating:n}}),a=[(r="\n      transition: "+pn.outOfTheWay+";\n    ",{selector:o(pr.contextId),styles:{dragging:r,dropAnimating:r,userCancel:r}}),i,{selector:o(mr.contextId),styles:{always:"overflow-anchor: none;"}},{selector:"body",styles:{dragging:"\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "}}];return{always:hr(a,"always"),resting:hr(a,"resting"),dragging:hr(a,"dragging"),dropAnimating:hr(a,"dropAnimating"),userCancel:hr(a,"userCancel")}}(e)}),[e]),r=Object(o.useRef)(null),i=Object(o.useRef)(null),a=G(te((function(e){var t=i.current;t||le(!1),t.textContent=e})),[]),l=G((function(e){var t=r.current;t||le(!1),t.textContent=e}),[]);vr((function(){(r.current||i.current)&&le(!1);var o=yr(t),u=yr(t);return r.current=o,i.current=u,o.setAttribute("data-rbd-always",e),u.setAttribute("data-rbd-dynamic",e),br().appendChild(o),br().appendChild(u),l(n.always),a(n.resting),function(){var e=function(e){var t=e.current;t||le(!1),br().removeChild(t),e.current=null};e(r),e(i)}}),[t,l,a,n.always,n.resting,e]);var u=G((function(){return a(n.dragging)}),[a,n.dragging]),c=G((function(e){a("DROP"!==e?n.userCancel:n.dropAnimating)}),[a,n.dropAnimating,n.userCancel]),s=G((function(){i.current&&a(n.resting)}),[a,n.resting]);return z((function(){return{dragging:u,dropping:c,resting:s}}),[u,c,s])}var xr=function(e){return e&&e.ownerDocument?e.ownerDocument.defaultView:window};function Er(e){return e instanceof xr(e).HTMLElement}function Sr(e,t){var n="["+dr.contextId+'="'+e+'"]',r=Re(document.querySelectorAll(n));if(!r.length)return null;var o=Ae(r,(function(e){return e.getAttribute(dr.draggableId)===t}));return o&&Er(o)?o:null}function Tr(){var e={draggables:{},droppables:{}},t=[];function n(e){t.length&&t.forEach((function(t){return t(e)}))}function r(t){return e.draggables[t]||null}function o(t){return e.droppables[t]||null}return{draggable:{register:function(t){e.draggables[t.descriptor.id]=t,n({type:"ADDITION",value:t})},update:function(t,n){var r=e.draggables[n.descriptor.id];r&&r.uniqueId===t.uniqueId&&(delete e.draggables[n.descriptor.id],e.draggables[t.descriptor.id]=t)},unregister:function(t){var o=t.descriptor.id,i=r(o);i&&t.uniqueId===i.uniqueId&&(delete e.draggables[o],n({type:"REMOVAL",value:t}))},getById:function(e){var t=r(e);return t||le(!1),t},findById:r,exists:function(e){return Boolean(r(e))},getAllByType:function(t){return Ne(e.draggables).filter((function(e){return e.descriptor.type===t}))}},droppable:{register:function(t){e.droppables[t.descriptor.id]=t},unregister:function(t){var n=o(t.descriptor.id);n&&t.uniqueId===n.uniqueId&&delete e.droppables[t.descriptor.id]},getById:function(e){var t=o(e);return t||le(!1),t},findById:o,exists:function(e){return Boolean(o(e))},getAllByType:function(t){return Ne(e.droppables).filter((function(e){return e.descriptor.type===t}))}},subscribe:function(e){return t.push(e),function(){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}},clean:function(){e.draggables={},e.droppables={},t.length=0}}}var Or=i.a.createContext(null),Cr=function(){var e=document.body;return e||le(!1),e},kr={position:"absolute",width:"1px",height:"1px",margin:"-1px",border:"0",padding:"0",overflow:"hidden",clip:"rect(0 0 0 0)","clip-path":"inset(100%)"};var Pr=0,Ir={separator:"::"};function Dr(e,t){return void 0===t&&(t=Ir),z((function(){return""+e+t.separator+Pr++}),[t.separator,e])}var Nr=i.a.createContext(null);function _r(e){0}function Ar(e,t){_r()}function Rr(){Ar()}function jr(e){var t=Object(o.useRef)(e);return Object(o.useEffect)((function(){t.current=e})),t}var Mr,Lr=((Mr={})[13]=!0,Mr[9]=!0,Mr),Br=function(e){Lr[e.keyCode]&&e.preventDefault()},Fr=function(){var e="visibilitychange";return"undefined"==typeof document?e:Ae([e,"ms"+e,"webkit"+e,"moz"+e,"o"+e],(function(e){return"on"+e in document}))||e}();var Ur,zr={type:"IDLE"};function Gr(e){var t=e.cancel,n=e.completed,r=e.getPhase,o=e.setPhase;return[{eventName:"mousemove",fn:function(e){var t=e.button,n=e.clientX,i=e.clientY;if(0===t){var a={x:n,y:i},l=r();if("DRAGGING"===l.type)return e.preventDefault(),void l.actions.move(a);"PENDING"!==l.type&&le(!1);var u=l.point;if(c=u,s=a,Math.abs(s.x-c.x)>=5||Math.abs(s.y-c.y)>=5){var c,s;e.preventDefault();var f=l.actions.fluidLift(a);o({type:"DRAGGING",actions:f})}}}},{eventName:"mouseup",fn:function(e){var o=r();"DRAGGING"===o.type?(e.preventDefault(),o.actions.drop({shouldBlockNextClick:!0}),n()):t()}},{eventName:"mousedown",fn:function(e){"DRAGGING"===r().type&&e.preventDefault(),t()}},{eventName:"keydown",fn:function(e){if("PENDING"!==r().type)return 27===e.keyCode?(e.preventDefault(),void t()):void Br(e);t()}},{eventName:"resize",fn:t},{eventName:"scroll",options:{passive:!0,capture:!1},fn:function(){"PENDING"===r().type&&t()}},{eventName:"webkitmouseforcedown",fn:function(e){var n=r();"IDLE"===n.type&&le(!1),n.actions.shouldRespectForcePress()?t():e.preventDefault()}},{eventName:Fr,fn:t}]}function Wr(){}var Hr=((Ur={})[34]=!0,Ur[33]=!0,Ur[36]=!0,Ur[35]=!0,Ur);function Vr(e,t){function n(){t(),e.cancel()}return[{eventName:"keydown",fn:function(r){return 27===r.keyCode?(r.preventDefault(),void n()):32===r.keyCode?(r.preventDefault(),t(),void e.drop()):40===r.keyCode?(r.preventDefault(),void e.moveDown()):38===r.keyCode?(r.preventDefault(),void e.moveUp()):39===r.keyCode?(r.preventDefault(),void e.moveRight()):37===r.keyCode?(r.preventDefault(),void e.moveLeft()):void(Hr[r.keyCode]?r.preventDefault():Br(r))}},{eventName:"mousedown",fn:n},{eventName:"mouseup",fn:n},{eventName:"click",fn:n},{eventName:"touchstart",fn:n},{eventName:"resize",fn:n},{eventName:"wheel",fn:n,options:{passive:!0}},{eventName:Fr,fn:n}]}var qr={type:"IDLE"};var $r={input:!0,button:!0,textarea:!0,select:!0,option:!0,optgroup:!0,video:!0,audio:!0};function Qr(e,t){var n=t.target;return!!Er(n)&&function e(t,n){if(null==n)return!1;if(Boolean($r[n.tagName.toLowerCase()]))return!0;var r=n.getAttribute("contenteditable");return"true"===r||""===r||n!==t&&e(t,n.parentElement)}(e,n)}var Yr=function(e){return H(e.getBoundingClientRect()).center};var Kr="undefined"==typeof document?"matches":Ae(["matches","msMatchesSelector","webkitMatchesSelector"],(function(e){return e in Element.prototype}))||"matches";function Xr(e,t){return e.closest?e.closest(t):function e(t,n){return null==t?null:t[Kr](n)?t:e(t.parentElement,n)}(e,t)}function Jr(e,t){var n,r=t.target;if(!((n=r)instanceof xr(n).Element))return null;var o=Xr(r,function(e){return"["+dr.contextId+'="'+e+'"]'}(e));return o&&Er(o)?o:null}function Zr(e){e.preventDefault()}function eo(e){var t=e.expected,n=e.phase,r=e.isLockActive;e.shouldWarn;return!!r()&&t===n}function to(e){var t=e.lockAPI,n=e.store,r=e.registry,o=e.draggableId;if(t.isClaimed())return!1;var i=r.draggable.findById(o);return!!i&&(!!i.options.isEnabled&&!!Gn(n.getState(),o))}function no(e){var t=e.lockAPI,n=e.contextId,r=e.store,o=e.registry,i=e.draggableId,a=e.forceSensorStop,l=e.sourceEvent;if(!to({lockAPI:t,store:r,registry:o,draggableId:i}))return null;var u=o.draggable.getById(i),c=function(e,t){var n="["+pr.contextId+'="'+e+'"]',r=Ae(Re(document.querySelectorAll(n)),(function(e){return e.getAttribute(pr.id)===t}));return r&&Er(r)?r:null}(n,u.descriptor.id);if(!c)return null;if(l&&!u.options.canDragInteractiveElements&&Qr(c,l))return null;var s=t.claim(a||oe),f="PRE_DRAG";function d(){return u.options.shouldRespectForcePress}function p(){return t.isActive(s)}var m=function(e,t){eo({expected:e,phase:f,isLockActive:p,shouldWarn:!0})&&r.dispatch(t())}.bind(null,"DRAGGING");function g(e){function n(){t.release(),f="COMPLETED"}function o(t,o){if(void 0===o&&(o={shouldBlockNextClick:!1}),e.cleanup(),o.shouldBlockNextClick){var i=ie(window,[{eventName:"click",fn:Zr,options:{once:!0,passive:!1,capture:!0}}]);setTimeout(i)}n(),r.dispatch(ln({reason:t}))}return"PRE_DRAG"!==f&&(n(),"PRE_DRAG"!==f&&le(!1)),r.dispatch(function(e){return{type:"LIFT",payload:e}}(e.liftActionArgs)),f="DRAGGING",F({isActive:function(){return eo({expected:"DRAGGING",phase:f,isLockActive:p,shouldWarn:!1})},shouldRespectForcePress:d,drop:function(e){return o("DROP",e)},cancel:function(e){return o("CANCEL",e)}},e.actions)}return{isActive:function(){return eo({expected:"PRE_DRAG",phase:f,isLockActive:p,shouldWarn:!1})},shouldRespectForcePress:d,fluidLift:function(e){var t=ne((function(e){m((function(){return en({client:e})}))}));return F({},g({liftActionArgs:{id:i,clientSelection:e,movementMode:"FLUID"},cleanup:function(){return t.cancel()},actions:{move:t}}),{move:t})},snapLift:function(){var e={moveUp:function(){return m(tn)},moveRight:function(){return m(rn)},moveDown:function(){return m(nn)},moveLeft:function(){return m(on)}};return g({liftActionArgs:{id:i,clientSelection:Yr(c),movementMode:"SNAP"},cleanup:oe,actions:e})},abort:function(){eo({expected:"PRE_DRAG",phase:f,isLockActive:p,shouldWarn:!0})&&t.release()}}}var ro=[function(e){var t=Object(o.useRef)(zr),n=Object(o.useRef)(oe),r=z((function(){return{eventName:"mousedown",fn:function(t){if(!t.defaultPrevented&&0===t.button&&!(t.ctrlKey||t.metaKey||t.shiftKey||t.altKey)){var r=e.findClosestDraggableId(t);if(r){var o=e.tryGetLock(r,l,{sourceEvent:t});if(o){t.preventDefault();var i={x:t.clientX,y:t.clientY};n.current(),s(o,i)}}}}}}),[e]),i=z((function(){return{eventName:"webkitmouseforcewillbegin",fn:function(t){if(!t.defaultPrevented){var n=e.findClosestDraggableId(t);if(n){var r=e.findOptionsForDraggable(n);r&&(r.shouldRespectForcePress||e.canGetLock(n)&&t.preventDefault())}}}}}),[e]),a=G((function(){n.current=ie(window,[i,r],{passive:!1,capture:!0})}),[i,r]),l=G((function(){"IDLE"!==t.current.type&&(t.current=zr,n.current(),a())}),[a]),u=G((function(){var e=t.current;l(),"DRAGGING"===e.type&&e.actions.cancel({shouldBlockNextClick:!0}),"PENDING"===e.type&&e.actions.abort()}),[l]),c=G((function(){var e=Gr({cancel:u,completed:l,getPhase:function(){return t.current},setPhase:function(e){t.current=e}});n.current=ie(window,e,{capture:!0,passive:!1})}),[u,l]),s=G((function(e,n){"IDLE"!==t.current.type&&le(!1),t.current={type:"PENDING",point:n,actions:e},c()}),[c]);vr((function(){return a(),function(){n.current()}}),[a])},function(e){var t=Object(o.useRef)(Wr),n=z((function(){return{eventName:"keydown",fn:function(n){if(!n.defaultPrevented&&32===n.keyCode){var o=e.findClosestDraggableId(n);if(o){var i=e.tryGetLock(o,u,{sourceEvent:n});if(i){n.preventDefault();var a=!0,l=i.snapLift();t.current(),t.current=ie(window,Vr(l,u),{capture:!0,passive:!1})}}}function u(){a||le(!1),a=!1,t.current(),r()}}}}),[e]),r=G((function(){t.current=ie(window,[n],{passive:!1,capture:!0})}),[n]);vr((function(){return r(),function(){t.current()}}),[r])},function(e){var t=Object(o.useRef)(qr),n=Object(o.useRef)(oe),r=G((function(){return t.current}),[]),i=G((function(e){t.current=e}),[]),a=z((function(){return{eventName:"touchstart",fn:function(t){if(!t.defaultPrevented){var r=e.findClosestDraggableId(t);if(r){var o=e.tryGetLock(r,u,{sourceEvent:t});if(o){var i=t.touches[0],a={x:i.clientX,y:i.clientY};n.current(),d(o,a)}}}}}}),[e]),l=G((function(){n.current=ie(window,[a],{capture:!0,passive:!1})}),[a]),u=G((function(){var e=t.current;"IDLE"!==e.type&&("PENDING"===e.type&&clearTimeout(e.longPressTimerId),i(qr),n.current(),l())}),[l,i]),c=G((function(){var e=t.current;u(),"DRAGGING"===e.type&&e.actions.cancel({shouldBlockNextClick:!0}),"PENDING"===e.type&&e.actions.abort()}),[u]),s=G((function(){var e={capture:!0,passive:!1},t={cancel:c,completed:u,getPhase:r},o=ie(window,function(e){var t=e.cancel,n=e.completed,r=e.getPhase;return[{eventName:"touchmove",options:{capture:!1},fn:function(e){var n=r();if("DRAGGING"===n.type){n.hasMoved=!0;var o=e.touches[0],i={x:o.clientX,y:o.clientY};e.preventDefault(),n.actions.move(i)}else t()}},{eventName:"touchend",fn:function(e){var o=r();"DRAGGING"===o.type?(e.preventDefault(),o.actions.drop({shouldBlockNextClick:!0}),n()):t()}},{eventName:"touchcancel",fn:function(e){"DRAGGING"===r().type?(e.preventDefault(),t()):t()}},{eventName:"touchforcechange",fn:function(e){var n=r();"IDLE"===n.type&&le(!1);var o=e.touches[0];if(o&&o.force>=.15){var i=n.actions.shouldRespectForcePress();if("PENDING"!==n.type)return i?n.hasMoved?void e.preventDefault():void t():void e.preventDefault();i&&t()}}},{eventName:Fr,fn:t}]}(t),e),i=ie(window,function(e){var t=e.cancel,n=e.getPhase;return[{eventName:"orientationchange",fn:t},{eventName:"resize",fn:t},{eventName:"contextmenu",fn:function(e){e.preventDefault()}},{eventName:"keydown",fn:function(e){"DRAGGING"===n().type?(27===e.keyCode&&e.preventDefault(),t()):t()}},{eventName:Fr,fn:t}]}(t),e);n.current=function(){o(),i()}}),[c,r,u]),f=G((function(){var e=r();"PENDING"!==e.type&&le(!1);var t=e.actions.fluidLift(e.point);i({type:"DRAGGING",actions:t,hasMoved:!1})}),[r,i]),d=G((function(e,t){"IDLE"!==r().type&&le(!1);var n=setTimeout(f,120);i({type:"PENDING",point:t,actions:e,longPressTimerId:n}),s()}),[s,r,i,f]);vr((function(){return l(),function(){n.current();var e=r();"PENDING"===e.type&&(clearTimeout(e.longPressTimerId),i(qr))}}),[r,l,i]),vr((function(){return ie(window,[{eventName:"touchmove",fn:function(){},options:{capture:!1,passive:!1}}])}),[])}];function oo(e){var t=e.contextId,n=e.store,r=e.registry,i=e.customSensors,a=e.enableDefaultSensors,l=[].concat(a?ro:[],i||[]),u=Object(o.useState)((function(){return function(){var e=null;function t(){e||le(!1),e=null}return{isClaimed:function(){return Boolean(e)},isActive:function(t){return t===e},claim:function(t){e&&le(!1);var n={abandon:t};return e=n,n},release:t,tryAbandon:function(){e&&(e.abandon(),t())}}}()}))[0],c=G((function(e,t){e.isDragging&&!t.isDragging&&u.tryAbandon()}),[u]);vr((function(){var e=n.getState();return n.subscribe((function(){var t=n.getState();c(e,t),e=t}))}),[u,n,c]),vr((function(){return u.tryAbandon}),[u.tryAbandon]);var s=G((function(e){return to({lockAPI:u,registry:r,store:n,draggableId:e})}),[u,r,n]),f=G((function(e,o,i){return no({lockAPI:u,registry:r,contextId:t,store:n,draggableId:e,forceSensorStop:o,sourceEvent:i&&i.sourceEvent?i.sourceEvent:null})}),[t,u,r,n]),d=G((function(e){return function(e,t){var n=Jr(e,t);return n?n.getAttribute(dr.draggableId):null}(t,e)}),[t]),p=G((function(e){var t=r.draggable.findById(e);return t?t.options:null}),[r.draggable]),m=G((function(){u.isClaimed()&&(u.tryAbandon(),"IDLE"!==n.getState().phase&&n.dispatch({type:"FLUSH",payload:null}))}),[u,n]),g=G(u.isClaimed,[u]),h=z((function(){return{canGetLock:s,tryGetLock:f,findClosestDraggableId:d,findOptionsForDraggable:p,tryReleaseLock:m,isLockClaimed:g}}),[s,f,d,p,m,g]);_r();for(var v=0;v<l.length;v++)l[v](h)}function io(e){return e.current||le(!1),e.current}function ao(e){var t=e.contextId,n=e.setCallbacks,r=e.sensors,a=e.nonce,l=e.dragHandleUsageInstructions,c=Object(o.useRef)(null);Rr();var f=jr(e),d=G((function(){return function(e){return{onBeforeCapture:e.onBeforeCapture,onBeforeDragStart:e.onBeforeDragStart,onDragStart:e.onDragStart,onDragEnd:e.onDragEnd,onDragUpdate:e.onDragUpdate}}(f.current)}),[f]),p=function(e){var t=z((function(){return function(e){return"rbd-announcement-"+e}(e)}),[e]),n=Object(o.useRef)(null);return Object(o.useEffect)((function(){var e=document.createElement("div");return n.current=e,e.id=t,e.setAttribute("aria-live","assertive"),e.setAttribute("aria-atomic","true"),F(e.style,kr),Cr().appendChild(e),function(){setTimeout((function(){var t=Cr();t.contains(e)&&t.removeChild(e),e===n.current&&(n.current=null)}))}}),[t]),G((function(e){var t=n.current;t&&(t.textContent=e)}),[])}(t),m=function(e){var t=e.contextId,n=e.text,r=Dr("hidden-text",{separator:"-"}),i=z((function(){return"rbd-hidden-text-"+(e={contextId:t,uniqueId:r}).contextId+"-"+e.uniqueId;var e}),[r,t]);return Object(o.useEffect)((function(){var e=document.createElement("div");return e.id=i,e.textContent=n,e.style.display="none",Cr().appendChild(e),function(){var t=Cr();t.contains(e)&&t.removeChild(e)}}),[i,n]),i}({contextId:t,text:l}),g=wr(t,a),h=G((function(e){io(c).dispatch(e)}),[]),v=z((function(){return Object(s.bindActionCreators)({publishWhileDragging:Yt,updateDroppableScroll:Xt,updateDroppableIsEnabled:Jt,updateDroppableIsCombineEnabled:Zt,collectionStarting:Kt},h)}),[h]),b=function(){var e=z(Tr,[]);return Object(o.useEffect)((function(){return function(){requestAnimationFrame(e.clean)}}),[e]),e}(),y=z((function(){return zn(b,v)}),[b,v]),w=z((function(){return fr(F({scrollWindow:Wn,scrollDroppable:y.scrollDroppable},Object(s.bindActionCreators)({move:en},h)))}),[y.scrollDroppable,h]),x=function(e){var t=Object(o.useRef)({}),n=Object(o.useRef)(null),r=Object(o.useRef)(null),i=Object(o.useRef)(!1),a=G((function(e,n){var r={id:e,focus:n};return t.current[e]=r,function(){var n=t.current;n[e]!==r&&delete n[e]}}),[]),l=G((function(t){var n=Sr(e,t);n&&n!==document.activeElement&&n.focus()}),[e]),u=G((function(e,t){n.current===e&&(n.current=t)}),[]),c=G((function(){r.current||i.current&&(r.current=requestAnimationFrame((function(){r.current=null;var e=n.current;e&&l(e)})))}),[l]),s=G((function(e){n.current=null;var t=document.activeElement;t&&t.getAttribute(dr.draggableId)===e&&(n.current=e)}),[]);return vr((function(){return i.current=!0,function(){i.current=!1;var e=r.current;e&&cancelAnimationFrame(e)}}),[]),z((function(){return{register:a,tryRecordFocus:s,tryRestoreFocusRecorded:c,tryShiftRecord:u}}),[a,s,c,u])}(t),E=z((function(){return An({announce:p,autoScroller:w,dimensionMarshal:y,focusMarshal:x,getResponders:d,styleMarshal:g})}),[p,w,y,x,d,g]);c.current=E;var S=G((function(){var e=io(c);"IDLE"!==e.getState().phase&&e.dispatch({type:"FLUSH",payload:null})}),[]),T=G((function(){var e=io(c).getState();return e.isDragging||"DROP_ANIMATING"===e.phase}),[]);n(z((function(){return{isDragging:T,tryAbort:S}}),[T,S]));var O=G((function(e){return Gn(io(c).getState(),e)}),[]),C=G((function(){return Pt(io(c).getState())}),[]),k=z((function(){return{marshal:y,focus:x,contextId:t,canLift:O,isMovementAllowed:C,dragHandleUsageInstructionsId:m,registry:b}}),[t,y,m,x,O,C,b]);return oo({contextId:t,store:E,registry:b,customSensors:r,enableDefaultSensors:!1!==e.enableDefaultSensors}),Object(o.useEffect)((function(){return S}),[S]),i.a.createElement(Nr.Provider,{value:k},i.a.createElement(u.Provider,{context:Or,store:E},e.children))}var lo=0;function uo(e){var t=z((function(){return""+lo++}),[]),n=e.dragHandleUsageInstructions||pe;return i.a.createElement(ue,null,(function(r){return i.a.createElement(ao,{nonce:e.nonce,contextId:t,setCallbacks:r,dragHandleUsageInstructions:n,enableDefaultSensors:e.enableDefaultSensors,sensors:e.sensors,onBeforeCapture:e.onBeforeCapture,onBeforeDragStart:e.onBeforeDragStart,onDragStart:e.onDragStart,onDragUpdate:e.onDragUpdate,onDragEnd:e.onDragEnd},e.children)}))}var co=function(e){return function(t){return e===t}},so=co("scroll"),fo=co("auto"),po=(co("visible"),function(e,t){return t(e.overflowX)||t(e.overflowY)}),mo=function(e){var t=window.getComputedStyle(e),n={overflowX:t.overflowX,overflowY:t.overflowY};return po(n,so)||po(n,fo)},go=function e(t){return null==t||t===document.body||t===document.documentElement?null:mo(t)?t:e(t.parentElement)},ho=function(e){return{x:e.scrollLeft,y:e.scrollTop}},vo=function(e){return{closestScrollable:go(e),isFixedOnPage:function e(t){return!!t&&("fixed"===window.getComputedStyle(t).position||e(t.parentElement))}(e)}},bo=function(e){var t=e.ref,n=e.descriptor,r=e.env,o=e.windowScroll,i=e.direction,a=e.isDropDisabled,l=e.isCombineEnabled,u=e.shouldClipSubject,c=r.closestScrollable,s=function(e,t){var n=Z(e);if(!t)return n;if(e!==t)return n;var r=n.paddingBox.top-t.scrollTop,o=n.paddingBox.left-t.scrollLeft,i=r+t.scrollHeight,a=o+t.scrollWidth,l=V({top:r,right:a,bottom:i,left:o},n.border);return Q({borderBox:l,margin:n.margin,border:n.border,padding:n.padding})}(t,c),f=X(s,o),d=function(){if(!c)return null;var e=Z(c),t={scrollHeight:c.scrollHeight,scrollWidth:c.scrollWidth};return{client:e,page:X(e,o),scroll:ho(c),scrollSize:t,shouldClipSubject:u}}();return function(e){var t=e.descriptor,n=e.isEnabled,r=e.isCombineEnabled,o=e.isFixedOnPage,i=e.direction,a=e.client,l=e.page,u=e.closest,c=function(){if(!u)return null;var e=u.scrollSize,t=u.client,n=Rn({scrollHeight:e.scrollHeight,scrollWidth:e.scrollWidth,height:t.paddingBox.height,width:t.paddingBox.width});return{pageMarginBox:u.page.marginBox,frameClient:t,scrollSize:e,shouldClipSubject:u.shouldClipSubject,scroll:{initial:u.scroll,current:u.scroll,max:n,diff:{value:ve,displacement:ve}}}}(),s="vertical"===i?Ke:Xe;return{descriptor:t,isCombineEnabled:r,isFixedOnPage:o,axis:s,isEnabled:n,client:a,page:l,frame:c,subject:Ie({page:l,withPlaceholder:null,axis:s,frame:c})}}({descriptor:n,isEnabled:!a,isCombineEnabled:l,isFixedOnPage:r.isFixedOnPage,direction:i,client:s,page:f,closest:d})},yo={passive:!1},wo={passive:!0},xo=function(e){return e.shouldPublishImmediately?yo:wo};function Eo(e){var t=Object(o.useContext)(e);return t||le(!1),t}var So=function(e){return e&&e.env.closestScrollable||null};function To(){}var Oo={width:0,height:0,margin:{top:0,right:0,bottom:0,left:0}},Co=function(e){var t=e.isAnimatingOpenOnMount,n=e.placeholder,r=e.animate,o=function(e){var t=e.isAnimatingOpenOnMount,n=e.placeholder,r=e.animate;return t||"close"===r?Oo:{height:n.client.borderBox.height,width:n.client.borderBox.width,margin:n.client.margin}}({isAnimatingOpenOnMount:t,placeholder:n,animate:r});return{display:n.display,boxSizing:"border-box",width:o.width,height:o.height,marginTop:o.margin.top,marginRight:o.margin.right,marginBottom:o.margin.bottom,marginLeft:o.margin.left,flexShrink:"0",flexGrow:"0",pointerEvents:"none",transition:"none"!==r?pn.placeholder:null}};var ko=i.a.memo((function(e){var t=Object(o.useRef)(null),n=G((function(){t.current&&(clearTimeout(t.current),t.current=null)}),[]),r=e.animate,a=e.onTransitionEnd,l=e.onClose,u=e.contextId,c=Object(o.useState)("open"===e.animate),s=c[0],f=c[1];Object(o.useEffect)((function(){return s?"open"!==r?(n(),f(!1),To):t.current?To:(t.current=setTimeout((function(){t.current=null,f(!1)})),n):To}),[r,s,n]);var d=G((function(e){"height"===e.propertyName&&(a(),"close"===r&&l())}),[r,l,a]),p=Co({isAnimatingOpenOnMount:s,animate:e.animate,placeholder:e.placeholder});return i.a.createElement(e.placeholder.tagName,{style:p,"data-rbd-placeholder-context-id":u,onTransitionEnd:d,ref:e.innerRef})})),Po=i.a.createContext(null);var Io=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).state={isVisible:Boolean(t.props.on),data:t.props.on,animate:t.props.shouldAnimate&&t.props.on?"open":"none"},t.onClose=function(){"close"===t.state.animate&&t.setState({isVisible:!1})},t}return B(t,e),t.getDerivedStateFromProps=function(e,t){return e.shouldAnimate?e.on?{isVisible:!0,data:e.on,animate:"open"}:t.isVisible?{isVisible:!0,data:t.data,animate:"close"}:{isVisible:!1,animate:"close",data:null}:{isVisible:Boolean(e.on),data:e.on,animate:"none"}},t.prototype.render=function(){if(!this.state.isVisible)return null;var e={onClose:this.onClose,data:this.state.data,animate:this.state.animate};return this.props.children(e)},t}(i.a.PureComponent),Do=5e3,No=4500,_o=function(e,t){return t?pn.drop(t.duration):e?pn.snap:pn.fluid},Ao=function(e,t){return e?t?sn.drop:sn.combining:null};function Ro(e){return"DRAGGING"===e.type?(r=(n=e).dimension.client,o=n.offset,i=n.combineWith,a=n.dropping,l=Boolean(i),u=function(e){return null!=e.forceShouldAnimate?e.forceShouldAnimate:"SNAP"===e.mode}(n),c=Boolean(a),s=c?hn(o,l):gn(o),{position:"fixed",top:r.marginBox.top,left:r.marginBox.left,boxSizing:"border-box",width:r.borderBox.width,height:r.borderBox.height,transition:_o(u,a),transform:s,opacity:Ao(l,c),zIndex:c?No:Do,pointerEvents:"none"}):{transform:gn((t=e).offset),transition:t.shouldAnimateDisplacement?null:"none"};var t,n,r,o,i,a,l,u,c,s}function jo(e){var t=Dr("draggable"),n=e.descriptor,r=e.registry,i=e.getDraggableRef,a=e.canDragInteractiveElements,l=e.shouldRespectForcePress,u=e.isEnabled,c=z((function(){return{canDragInteractiveElements:a,shouldRespectForcePress:l,isEnabled:u}}),[a,u,l]),s=G((function(e){var t=i();return t||le(!1),function(e,t,n){void 0===n&&(n=ve);var r=window.getComputedStyle(t),o=t.getBoundingClientRect(),i=J(o,r),a=X(i,n);return{descriptor:e,placeholder:{client:i,tagName:t.tagName.toLowerCase(),display:r.display},displaceBy:{x:i.marginBox.width,y:i.marginBox.height},client:i,page:a}}(n,t,e)}),[n,i]),f=z((function(){return{uniqueId:t,descriptor:n,options:c,getDimension:s}}),[n,s,c,t]),d=Object(o.useRef)(f),p=Object(o.useRef)(!0);vr((function(){return r.draggable.register(d.current),function(){return r.draggable.unregister(d.current)}}),[r.draggable]),vr((function(){if(p.current)p.current=!1;else{var e=d.current;d.current=f,r.draggable.update(f,e)}}),[f,r.draggable])}function Mo(e,t,n){Ar()}function Lo(e){e.preventDefault()}var Bo=function(e,t){return e===t},Fo=function(e){var t=e.combine,n=e.destination;return n?n.droppableId:t?t.droppableId:null};function Uo(e){return{isDragging:!1,isDropAnimating:!1,isClone:!1,dropAnimation:null,mode:null,draggingOver:null,combineTargetFor:e,combineWith:null}}var zo={mapped:{type:"SECONDARY",offset:ve,combineTargetFor:null,shouldAnimateDisplacement:!0,snapshot:Uo(null)}};var Go={dropAnimationFinished:un},Wo=Object(u.connect)((function(){var e,t,n,r=(e=te((function(e,t){return{x:e,y:t}})),t=te((function(e,t,n,r,o){return{isDragging:!0,isClone:t,isDropAnimating:Boolean(o),dropAnimation:o,mode:e,draggingOver:n,combineWith:r,combineTargetFor:null}})),n=te((function(e,n,r,o,i,a,l){return{mapped:{type:"DRAGGING",dropping:null,draggingOver:i,combineWith:a,mode:n,offset:e,dimension:r,forceShouldAnimate:l,snapshot:t(n,o,i,a,null)}}})),function(r,o){if(r.isDragging){if(r.critical.draggable.id!==o.draggableId)return null;var i=r.current.client.offset,a=r.dimensions.draggables[o.draggableId],l=Ct(r.impact),u=(s=r.impact).at&&"COMBINE"===s.at.type?s.at.combine.draggableId:null,c=r.forceShouldAnimate;return n(e(i.x,i.y),r.movementMode,a,o.isClone,l,u,c)}var s;if("DROP_ANIMATING"===r.phase){var f=r.completed;if(f.result.draggableId!==o.draggableId)return null;var d=o.isClone,p=r.dimensions.draggables[o.draggableId],m=f.result,g=m.mode,h=Fo(m),v=function(e){return e.combine?e.combine.draggableId:null}(m),b={duration:r.dropDuration,curve:cn,moveTo:r.newHomeClientOffset,opacity:v?sn.drop:null,scale:v?fn.drop:null};return{mapped:{type:"DRAGGING",offset:r.newHomeClientOffset,dimension:p,dropping:b,draggingOver:h,combineWith:v,mode:g,forceShouldAnimate:null,snapshot:t(g,d,h,v,b)}}}return null}),o=function(){var e=te((function(e,t){return{x:e,y:t}})),t=te(Uo),n=te((function(e,n,r){return void 0===n&&(n=null),{mapped:{type:"SECONDARY",offset:e,combineTargetFor:n,shouldAnimateDisplacement:r,snapshot:t(n)}}})),r=function(e){return e?n(ve,e,!0):null},o=function(t,o,i,a){var l=i.displaced.visible[t],u=Boolean(a.inVirtualList&&a.effected[t]),c=ze(i),s=c&&c.draggableId===t?o:null;if(!l){if(!u)return r(s);if(i.displaced.invisible[t])return null;var f=xe(a.displacedBy.point),d=e(f.x,f.y);return n(d,s,!0)}if(u)return r(s);var p=i.displacedBy.point,m=e(p.x,p.y);return n(m,s,l.shouldAnimate)};return function(e,t){if(e.isDragging)return e.critical.draggable.id===t.draggableId?null:o(t.draggableId,e.critical.draggable.id,e.impact,e.afterCritical);if("DROP_ANIMATING"===e.phase){var n=e.completed;return n.result.draggableId===t.draggableId?null:o(t.draggableId,n.result.draggableId,n.impact,n.afterCritical)}return null}}();return function(e,t){return r(e,t)||o(e,t)||zo}}),Go,null,{context:Or,pure:!0,areStatePropsEqual:Bo})((function(e){var t=Object(o.useRef)(null),n=G((function(e){t.current=e}),[]),r=G((function(){return t.current}),[]),i=Eo(Nr),a=i.contextId,l=i.dragHandleUsageInstructionsId,u=i.registry,c=Eo(Po),s=c.type,f=c.droppableId,d=z((function(){return{id:e.draggableId,index:e.index,type:s,droppableId:f}}),[e.draggableId,e.index,s,f]),p=e.children,m=e.draggableId,g=e.isEnabled,h=e.shouldRespectForcePress,v=e.canDragInteractiveElements,b=e.isClone,y=e.mapped,w=e.dropAnimationFinished;Mo(),_r(),b||jo(z((function(){return{descriptor:d,registry:u,getDraggableRef:r,canDragInteractiveElements:v,shouldRespectForcePress:h,isEnabled:g}}),[d,u,r,v,h,g]));var x=z((function(){return g?{tabIndex:0,role:"button","aria-describedby":l,"data-rbd-drag-handle-draggable-id":m,"data-rbd-drag-handle-context-id":a,draggable:!1,onDragStart:Lo}:null}),[a,l,m,g]),E=G((function(e){"DRAGGING"===y.type&&y.dropping&&"transform"===e.propertyName&&w()}),[w,y]),S=z((function(){var e=Ro(y),t="DRAGGING"===y.type&&y.dropping?E:null;return{innerRef:n,draggableProps:{"data-rbd-draggable-context-id":a,"data-rbd-draggable-id":m,style:e,onTransitionEnd:t},dragHandleProps:x}}),[a,x,m,y,E,n]),T=z((function(){return{draggableId:d.id,type:d.type,source:{index:d.index,droppableId:d.droppableId}}}),[d.droppableId,d.id,d.index,d.type]);return p(S,y.snapshot,T)}));function Ho(e){return Eo(Po).isUsingCloneFor!==e.draggableId||e.isClone?i.a.createElement(Wo,e):null}function Vo(e){var t="boolean"!=typeof e.isDragDisabled||!e.isDragDisabled,n=Boolean(e.disableInteractiveElementBlocking),r=Boolean(e.shouldRespectForcePress);return i.a.createElement(Ho,F({},e,{isClone:!1,isEnabled:t,canDragInteractiveElements:n,shouldRespectForcePress:r}))}var qo=function(e,t){return e===t.droppable.type},$o=function(e,t){return t.draggables[e.draggable.id]},Qo={updateViewportMaxScroll:function(e){return{type:"UPDATE_VIEWPORT_MAX_SCROLL",payload:e}}};var Yo={mode:"standard",type:"DEFAULT",direction:"vertical",isDropDisabled:!1,isCombineEnabled:!1,ignoreContainerClipping:!1,renderClone:null,getContainerForClone:function(){return document.body||le(!1),document.body}},Ko=Object(u.connect)((function(){var e={placeholder:null,shouldAnimatePlaceholder:!0,snapshot:{isDraggingOver:!1,draggingOverWith:null,draggingFromThisWith:null,isUsingPlaceholder:!1},useClone:null},t=F({},e,{shouldAnimatePlaceholder:!1}),n=te((function(e){return{draggableId:e.id,type:e.type,source:{index:e.index,droppableId:e.droppableId}}})),r=te((function(r,o,i,a,l,u){var c=l.descriptor.id;if(l.descriptor.droppableId===r){var s=u?{render:u,dragging:n(l.descriptor)}:null,f={isDraggingOver:i,draggingOverWith:i?c:null,draggingFromThisWith:c,isUsingPlaceholder:!0};return{placeholder:l.placeholder,shouldAnimatePlaceholder:!1,snapshot:f,useClone:s}}if(!o)return t;if(!a)return e;var d={isDraggingOver:i,draggingOverWith:c,draggingFromThisWith:null,isUsingPlaceholder:!0};return{placeholder:l.placeholder,shouldAnimatePlaceholder:!0,snapshot:d,useClone:null}}));return function(n,o){var i=o.droppableId,a=o.type,l=!o.isDropDisabled,u=o.renderClone;if(n.isDragging){var c=n.critical;if(!qo(a,c))return t;var s=$o(c,n.dimensions),f=Ct(n.impact)===i;return r(i,l,f,f,s,u)}if("DROP_ANIMATING"===n.phase){var d=n.completed;if(!qo(a,d.critical))return t;var p=$o(d.critical,n.dimensions);return r(i,l,Fo(d.result)===i,Ct(d.impact)===i,p,u)}if("IDLE"===n.phase&&n.completed&&!n.shouldFlush){var m=n.completed;if(!qo(a,m.critical))return t;var g=Ct(m.impact)===i,h=Boolean(m.impact.at&&"COMBINE"===m.impact.at.type),v=m.critical.droppable.id===i;return g?h?e:t:v?e:t}return t}}),Qo,null,{context:Or,pure:!0,areStatePropsEqual:Bo})((function(e){var t=Object(o.useContext)(Nr);t||le(!1);var n=t.contextId,r=t.isMovementAllowed,a=Object(o.useRef)(null),u=Object(o.useRef)(null),c=e.children,s=e.droppableId,f=e.type,d=e.mode,p=e.direction,m=e.ignoreContainerClipping,g=e.isDropDisabled,h=e.isCombineEnabled,v=e.snapshot,b=e.useClone,y=e.updateViewportMaxScroll,w=e.getContainerForClone,x=G((function(){return a.current}),[]),E=G((function(e){a.current=e}),[]),S=(G((function(){return u.current}),[]),G((function(e){u.current=e}),[]));Ar();var T=G((function(){r()&&y({maxScroll:Mn()})}),[r,y]);!function(e){var t=Object(o.useRef)(null),n=Eo(Nr),r=Dr("droppable"),i=n.registry,a=n.marshal,l=jr(e),u=z((function(){return{id:e.droppableId,type:e.type,mode:e.mode}}),[e.droppableId,e.mode,e.type]),c=Object(o.useRef)(u),s=z((function(){return te((function(e,n){t.current||le(!1);var r={x:e,y:n};a.updateDroppableScroll(u.id,r)}))}),[u.id,a]),f=G((function(){var e=t.current;return e&&e.env.closestScrollable?ho(e.env.closestScrollable):ve}),[]),d=G((function(){var e=f();s(e.x,e.y)}),[f,s]),p=z((function(){return ne(d)}),[d]),m=G((function(){var e=t.current,n=So(e);e&&n||le(!1),e.scrollOptions.shouldPublishImmediately?d():p()}),[p,d]),g=G((function(e,r){t.current&&le(!1);var o=l.current,i=o.getDroppableRef();i||le(!1);var a=vo(i),c={ref:i,descriptor:u,env:a,scrollOptions:r};t.current=c;var s=bo({ref:i,descriptor:u,env:a,windowScroll:e,direction:o.direction,isDropDisabled:o.isDropDisabled,isCombineEnabled:o.isCombineEnabled,shouldClipSubject:!o.ignoreContainerClipping}),f=a.closestScrollable;return f&&(f.setAttribute(gr.contextId,n.contextId),f.addEventListener("scroll",m,xo(c.scrollOptions))),s}),[n.contextId,u,m,l]),h=G((function(){var e=t.current,n=So(e);return e&&n||le(!1),ho(n)}),[]),v=G((function(){var e=t.current;e||le(!1);var n=So(e);t.current=null,n&&(p.cancel(),n.removeAttribute(gr.contextId),n.removeEventListener("scroll",m,xo(e.scrollOptions)))}),[m,p]),b=G((function(e){var n=t.current;n||le(!1);var r=So(n);r||le(!1),r.scrollTop+=e.y,r.scrollLeft+=e.x}),[]),y=z((function(){return{getDimensionAndWatchScroll:g,getScrollWhileDragging:h,dragStopped:v,scroll:b}}),[v,g,h,b]),w=z((function(){return{uniqueId:r,descriptor:u,callbacks:y}}),[y,u,r]);vr((function(){return c.current=w.descriptor,i.droppable.register(w),function(){t.current&&v(),i.droppable.unregister(w)}}),[y,u,v,w,a,i.droppable]),vr((function(){t.current&&a.updateDroppableIsEnabled(c.current.id,!e.isDropDisabled)}),[e.isDropDisabled,a]),vr((function(){t.current&&a.updateDroppableIsCombineEnabled(c.current.id,e.isCombineEnabled)}),[e.isCombineEnabled,a])}({droppableId:s,type:f,mode:d,direction:p,isDropDisabled:g,isCombineEnabled:h,ignoreContainerClipping:m,getDroppableRef:x});var O=i.a.createElement(Io,{on:e.placeholder,shouldAnimate:e.shouldAnimatePlaceholder},(function(e){var t=e.onClose,r=e.data,o=e.animate;return i.a.createElement(ko,{placeholder:r,onClose:t,innerRef:S,animate:o,contextId:n,onTransitionEnd:T})})),C=z((function(){return{innerRef:E,placeholder:O,droppableProps:{"data-rbd-droppable-id":s,"data-rbd-droppable-context-id":n}}}),[n,s,O,E]),k=b?b.dragging.draggableId:null,P=z((function(){return{droppableId:s,type:f,isUsingCloneFor:k}}),[s,k,f]);return i.a.createElement(Po.Provider,{value:P},c(C,v),function(){if(!b)return null;var e=b.dragging,t=b.render,n=i.a.createElement(Ho,{draggableId:e.draggableId,index:e.source.index,isClone:!0,isEnabled:!0,shouldRespectForcePress:!1,canDragInteractiveElements:!0},(function(n,r){return t(n,r,e)}));return l.a.createPortal(n,w())}())}));Ko.defaultProps=Yo;var Xo,Jo=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Zo=function(){return(Zo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ei=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.editTask=function(){},t}return Jo(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(Vo,{draggableId:this.props.task.id,index:this.props.index},(function(t){return i.a.createElement("div",Zo({className:"cardContainer"},t.draggableProps,t.dragHandleProps,{ref:t.innerRef}),i.a.createElement("h3",null,e.props.task.title),i.a.createElement("h4",null,e.props.task.content))}))},t}(i.a.Component),ti=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ni=function(){return(ni=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ri=function(e){function t(t){var n=e.call(this,t)||this;return n.addTask=function(e,t){var r={title:e,content:t};n.props.addTask(r,n.props.column.id)},n.state={text:"+ Add Task"},n}return ti(t,e),t.prototype.render=function(){var e=this.props.tasks.map((function(e,t){return i.a.createElement(ei,{key:e.id,task:e,index:t})}));return i.a.createElement("div",{className:"columnContainer"},i.a.createElement("h3",null,this.props.column.title),i.a.createElement(Ko,{droppableId:this.props.column.id},(function(t){return i.a.createElement("div",ni({ref:t.innerRef},t.droppableProps),e,t.placeholder)})),i.a.createElement(L,{text:this.state.text,updateData:this.addTask.bind(this)}))},t}(i.a.Component),oi=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ii=function(){return(ii=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ai=function(e){function t(t){var n=e.call(this,t)||this;return n.addContainer=function(e,t){var r={id:"column"+(Object.keys(n.props.toDoList.columns).length+1),title:e,content:t,taskIds:[]};n.props.toDoActions.addColumnData(r)},n.dragEnd=function(e){var t=e.destination,r=e.source,o=e.draggableId;if(t&&(t.droppableId!==r.droppableId||t.index!==r.index)){var i=n.props.toDoList.columns[r.droppableId],a=n.props.toDoList.columns[t.droppableId];if(i===a){var l=Array.from(i.taskIds);l.splice(r.index,1),l.splice(t.index,0,o);var u=ii(ii({},i),{taskIds:l});n.props.toDoActions.updateColumnData(u)}else{var c=Array.from(i.taskIds);c.splice(r.index,1);var s=ii(ii({},i),{taskIds:c});n.props.toDoActions.updateColumnData(s);var f=Array.from(a.taskIds);f.splice(t.index,0,o);var d=ii(ii({},a),{taskIds:f});n.props.toDoActions.updateColumnData(d)}}},n.state={dropContainers:[],text:"+ Add Column"},console.log(JSON.stringify(t)),n}return oi(t,e),t.prototype.render=function(){var e=this,t=this.props.toDoList.columnIds.map((function(t){var n=e.props.toDoList.columns[t],r=n.taskIds.map((function(t){return e.props.toDoList.tasks[t]}));return i.a.createElement(ri,{key:t,column:n,tasks:r,addTask:e.props.toDoActions.addTask})}));return i.a.createElement("div",{className:"topLevelEmenet"},i.a.createElement("div",{className:"title"},"To Do App"),i.a.createElement("div",{className:"columns"},i.a.createElement(uo,{onDragEnd:this.dragEnd},t,i.a.createElement(L,{text:this.state.text,updateData:this.addContainer.bind(this)}))))},t}(i.a.Component),li=Object(u.connect)((function(e){return{toDoList:e.ToDoList}}),(function(e){return{dispatchProps:e,toDoActions:Object(s.bindActionCreators)(r,e)}}))(ai),ui=(Xo={},Object(s.createStore)(h(b),Xo,Object(s.compose)(Object(s.applyMiddleware)(v.default,Object(f.a)(b)))));Object(a.render)(i.a.createElement(u.Provider,{store:ui},i.a.createElement(li,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,